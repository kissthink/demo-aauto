<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" >
<head>
    <title>窗口消息大全</title>
    <style type="text/css">

    .t_msgfont,.t_msgfont td{font-size: 14px;}
    .postmessage *, .pmmessage *, .register * {line-height: 175%; }
    *{word-wrap:break-word;}	
    span.t_tag {border-bottom:1px solid #FF0000;cursor:pointer;white-space:nowrap;}
    .t_attach {background:#FFF;filter:alpha(opacity=85%);opacity:0.85;}
    .absmiddle { vertical-align: middle; }
    a{text-decoration:none; color:#000;}
    em,strong{font-style:normal;}
    em,cite,strong,th{text-align:left;font-style:normal;}
    .main table{width:100%;}
    table{empty-cells:show;border-collapse:collapse;}
    body,td,input,textarea,select,button{color:#444;font:12px/1.6em Verdana,Helvetica,Arial,sans-serif;}
    .quote {background:#F9F9F9 url('img/icon_quote_e.gif') no-repeat 20px 6px;
    padding-bottom:5px;
    }
    .quote, .blockcode {margin:10px 0;padding:10px 10px 10px 65px;}
    .quote blockquote{background:url('img/icon_quote_e.gif') no-repeat 100% 100%;
    line-height:1.6em;margin:0;padding:0 65px 5px 0;
    }
    .lastediter{clear:both;margin-top:10px;}
    </style>
</head>
<body>

    <div id="message24121" class="t_msgfont">
        <div id="firstpost">
            消息，就是指Windows发出的一个通知，告诉应用程序某个事情发生了。例如，单击鼠标、改变窗口尺寸、按下键盘上的一个键都会使Windows发送一个消息给应用程序。消息本身是作为一个记录传递给应用程序的，这个记录中包含了消息的类型以及其他信息。例如，对于单击鼠标所产生的消息来说，这个记录中包含了单击鼠标时的坐标。 
            <br />
			<table width="100%" cellpadding="0" cellspacing="0" border="1" class="MsoNormalTable" style="margin: 5px auto; width: 100%; border-collapse: collapse; border: medium none; padding: 0px;">
<tbody style="margin: 0px; padding: 0px;">
<tr style="margin: 0px; height: 14.25pt; padding: 0px;">
<td width="44%" valign="top" style="background-color: #cccccc; margin: 0px; width: 44.52%; height: 14.25pt; border: black 1pt solid; padding: 0px;">
<p class="MsoNormal" style="margin: 0px 0px 15px; padding: 0px;"><strong style="margin: 0px; padding: 0px;"><span style="margin: 0px; color: black; font-size: 12pt; padding: 0px;">消息范围</span></strong></p>
</td>
<td width="55%" valign="top" style="border-bottom: black 1pt solid; background-color: #cccccc; margin: 0px; width: 55.48%; height: 14.25pt; border-left-color: #f0f0f0; border-top: black 1pt solid; border-right: black 1pt solid; padding: 0px;">
<p class="MsoNormal" style="margin: 0px 0px 15px; padding: 0px;"><strong style="margin: 0px; padding: 0px;"><span style="margin: 0px; color: black; font-size: 12pt; padding: 0px;">表示</span></strong></p>
</td>
</tr>
<tr style="margin: 0px; height: 23.25pt; padding: 0px;">
<td width="44%" valign="top" style="border-bottom: black 1pt solid; border-left: black 1pt solid; background-color: #e5e5e5; border-top-color: #f0f0f0; margin: 0px; width: 44.52%; height: 23.25pt; border-right: black 1pt solid; padding: 0px;">
<p class="MsoNormal" style="margin: 0px 0px 15px; padding: 0px;"><span style="margin: 0px; color: black; padding: 0px;"><span size="3" style="font-size: small; padding: 0px; margin: 0px;">0 ~ WM_USER–1</span></span></p>
</td>
<td width="55%" valign="top" style="border-bottom: black 1pt solid; background-color: #eeeeee; border-top-color: #f0f0f0; margin: 0px; width: 55.48%; height: 23.25pt; border-left-color: #f0f0f0; border-right: black 1pt solid; padding: 0px;">
<p class="MsoNormal" style="margin: 0px 0px 15px; padding: 0px;"><span size="3" style="font-size: small; padding: 0px; margin: 0px;"><span style="margin: 0px; color: black; padding: 0px;">操作系统保留的消息。</span></span></p>
</td>
</tr>
<tr style="margin: 0px; height: 23.25pt; padding: 0px;">
<td width="44%" valign="top" style="border-bottom: black 1pt solid; border-left: black 1pt solid; background-color: #eeeeee; border-top-color: #f0f0f0; margin: 0px; width: 44.52%; height: 23.25pt; border-right: black 1pt solid; padding: 0px;">
<p class="MsoNormal" style="margin: 0px 0px 15px; padding: 0px;"><span size="3" style="font-size: small; padding: 0px; margin: 0px;"><strong style="margin: 0px; padding: 0px;"><span style="margin: 0px; color: black; padding: 0px;">WM_USER</span></strong><span style="margin: 0px; color: black; padding: 0px;"><span> </span>~ 0x7FFF</span></span></p>
</td>
<td width="55%" valign="top" style="border-bottom: black 1pt solid; background-color: #eeeeee; border-top-color: #f0f0f0; margin: 0px; width: 55.48%; height: 23.25pt; border-left-color: #f0f0f0; border-right: black 1pt solid; padding: 0px;">
<p class="MsoNormal" style="margin: 0px 0px 15px; padding: 0px;"><span size="3" style="font-size: small; padding: 0px; margin: 0px;"><span style="margin: 0px; color: black; padding: 0px;">私有窗口级别的自定义消息。</span></span></p>
</td>
</tr>

<tr style="margin: 0px; height: 23.25pt; padding: 0px;">
<td width="44%" valign="top" style="border-bottom: black 1pt solid; border-left: black 1pt solid; background-color: #eeeeee; border-top-color: #f0f0f0; margin: 0px; width: 44.52%; height: 23.25pt; border-right: black 1pt solid; padding: 0px;">
<p class="MsoNormal" style="margin: 0px 0px 15px; padding: 0px;"><span size="3" style="font-size: small; padding: 0px; margin: 0px;"><strong style="margin: 0px; padding: 0px;"><span style="margin: 0px; color: black; padding: 0px;">WM_APP</span></strong><span style="margin: 0px; color: black; padding: 0px;"><span> </span>~ 0xBFFF</span></span></p>
</td>
<td width="55%" valign="top" style="border-bottom: black 1pt solid; background-color: #eeeeee; border-top-color: #f0f0f0; margin: 0px; width: 55.48%; height: 23.25pt; border-left-color: #f0f0f0; border-right: black 1pt solid; padding: 0px;">
<p class="MsoNormal" style="margin: 0px 0px 15px; padding: 0px;"><span size="3" style="font-size: small; padding: 0px; margin: 0px;"><span style="margin: 0px; color: black; padding: 0px;">应用程序级别的自定义消息。其中0xAAAA/*_WM_AARDIO_RESERVED*/ 至 0xBFFF 为aardio标准库保留值请勿使用。</span></span></p>
</td>
</tr>

<tr style="margin: 0px; height: 23.25pt; padding: 0px;">
<td width="44%" valign="top" style="border-bottom: black 1pt solid; border-left: black 1pt solid; background-color: #eeeeee; border-top-color: #f0f0f0; margin: 0px; width: 44.52%; height: 23.25pt; border-right: black 1pt solid; padding: 0px;">
<p class="MsoNormal" style="margin: 0px 0px 15px; padding: 0px;"><span style="margin: 0px; color: black; padding: 0px;"><span size="3" style="font-size: small; padding: 0px; margin: 0px;">0xC000 ~ 0xFFFF</span></span></p>
</td>
<td width="55%" valign="top" style="border-bottom: black 1pt solid; background-color: #eeeeee; border-top-color: #f0f0f0; margin: 0px; width: 55.48%; height: 23.25pt; border-left-color: #f0f0f0; border-right: black 1pt solid; padding: 0px;">
<p class="MsoNormal" style="margin: 0px 0px 15px; padding: 0px;"><span size="3" style="font-size: small; padding: 0px; margin: 0px;"><span style="margin: 0px; color: black; padding: 0px;">::RegisterWindowMessage函数定义一个新的窗口消息，该消息保证在整个系统范围内是唯一的。</span></span></p>
</td>
</tr>
<tr style="margin: 0px; height: 14.25pt; padding: 0px;"> 
<td width="44%" valign="top" style="border-bottom: black 1pt solid; border-left: black 1pt solid; background-color: #eeeeee; border-top-color: #f0f0f0; margin: 0px; width: 44.52%; height: 14.25pt; border-right: black 1pt solid; padding: 0px;">
<p class="MsoNormal" style="margin: 0px 0px 15px; padding: 0px;"><span style="margin: 0px; color: black; padding: 0px;"><span size="3" style="font-size: small; padding: 0px; margin: 0px;">0xFFFF ~</span></span></p>
</td>
<td width="55%" valign="top" style="border-bottom: black 1pt solid; background-color: #eeeeee; border-top-color: #f0f0f0; margin: 0px; width: 55.48%; height: 14.25pt; border-left-color: #f0f0f0; border-right: black 1pt solid; padding: 0px;">
<p class="MsoNormal" style="margin: 0px 0px 15px; padding: 0px;"><span size="3" style="font-size: small; padding: 0px; margin: 0px;"><span style="margin: 0px; color: black; padding: 0px;">操作系统保留的消息。</span></span></p>
</td>
</tr>
</tbody>
</table>

            <br />
            对于一般的点按控件的用户操作，通过创建事件响应函数就可以处理了。<br />
            在窗体设计器里，直接双击控件，就可以创建该控件的oncommand函数（也就是用户点按这个控件时会触发的函数。<br />
            <br />
            如果你需要进一步拦截所有消息，在aardio里，非常的简单。<br />
            请看下面的动画过程。<br />
            <br />
            <img src="img/msg_proc.gif">
            <br />
            <br />
            在消息回调函数里，可以处理控件或窗口的所有消息。<br />
            <br />
            对于主窗体：直接双击窗体就可以创建消息回调函数了，如下：<br />
            <br />
            <table style="WIDTH: auto">
                <tr>
                    <td style="BORDER-BOTTOM-STYLE: none; BORDER-RIGHT-STYLE: none; BORDER-TOP-STYLE: none; BORDER-LEFT-STYLE: none">
                        <div class="quote">
                            <blockquote>
                                <br />
                                &nbsp;
                                <br />
                                <br />
                                winform.wndproc = <font color="#0000ff">function</font><font color="#000000">(hwnd,message,wparam,lparam){<br />
                                &nbsp; &nbsp; </font><font color="#0000ff">select</font><font color="#000000">(message) {</font><font 
                                    color="#008000">//判断消息类型<br />
                                </font><font color="#000000">&nbsp; &nbsp; &nbsp; &nbsp; </font><font color="#0000ff">case</font><font 
                                    color="#000000"> 0x201</font><font color="#008000">/*_WM_LBUTTONDOWN 鼠标按下*/</font><font 
                                    color="#000000">{&nbsp; }<br />
                                &nbsp; &nbsp; &nbsp; &nbsp; </font><font color="#0000ff">case</font><font color="#000000"> 0x202</font><font 
                                    color="#008000">/*_WM_LBUTTONUP*/</font><font color="#000000"> </font>
                                <font color="#008000">//鼠标弹起<br />
                                </font><font color="#000000">&nbsp; &nbsp; &nbsp; &nbsp; {&nbsp; }<br />
                                &nbsp; &nbsp; &nbsp; &nbsp; </font><font color="#0000ff">case</font><font color="#000000"> 0x3</font><font 
                                    color="#008000">/*_WM_MOVE 鼠标移动*/</font><font color="#000000">
                                <br />
                                &nbsp; &nbsp; &nbsp; &nbsp; {&nbsp; }<br />
                                &nbsp; &nbsp; &nbsp; &nbsp; </font><font color="#0000ff">case</font><font color="#000000"> 0x10</font><font 
                                    color="#008000">/*_WM_CLOSE窗口关闭消息*/</font><font color="#000000">
                                <br />
                                &nbsp; &nbsp; &nbsp; &nbsp; {<br />
                                &nbsp; &nbsp; &nbsp; &nbsp;
                                <br />
                                &nbsp; &nbsp; &nbsp; &nbsp; }<br />
                                &nbsp; &nbsp; &nbsp; &nbsp; </font><font color="#0000ff">case</font><font color="#000000"> 0x205</font><font 
                                    color="#008000">/*_WM_RBUTTONUP 鼠标右键弹起，弹出菜单*/</font><font color="#000000">
                                <br />
                                &nbsp; &nbsp; &nbsp; &nbsp; </font><font color="#0000ff">begin</font><font color="#000000"><br />
                                &nbsp; &nbsp; &nbsp; &nbsp; </font><font color="#008000">//winform.popmenu.popup(::LOWORD(lparam), 
                                ::HIWORD(lparam));//弹出菜单<br />
                                </font><font color="#000000">&nbsp; &nbsp; &nbsp; &nbsp; </font><font color="#0000ff">end</font><font 
                                    color="#000000"><br />
                                &nbsp; &nbsp; &nbsp; &nbsp; </font><font color="#0000ff">else</font><font color="#000000"><br />
                                &nbsp; &nbsp; &nbsp; &nbsp; { }<br />
                                &nbsp; &nbsp; }<br />
                                &nbsp; &nbsp;
                                <br />
                                &nbsp; &nbsp; </font><font color="#008000">//无返回值则继续调用默认回调函数<br />
                                </font><font color="#000000">}</font><font color="#008000">//endproc<br />
                                </font><font color="#000000">
                                <br />
                                </font>
                                <br />
                            </blockquote>
                        </div>
                    </td>
                </tr>
            </table>
            <br />
            <br />
            wparam 通常是一个与消息有关的常量值，也可能是窗口或控件的句柄。<br />
            lparam 通常是一个指向内存中数据的32位指针。 
            <br />
            根据不同的消息，他们有不同的意义，例如在鼠标右键弹起消息里，::LOWORD(lparam)取lparam的低位表示x坐标, 
            ::HIWORD(lparam)取出lparam的高位表示y坐标.<br />
            <br />
            hwnd 32位的窗口句柄。 一般我们不用管这个参数。<br />
            message 用于区别其他消息的常量值，这些常量值通常以下划线开头，或_WM_开头<br />
             
            <img src="img\msg_const.jpg">
            <br />
            <br />
            _WM_NULL = 0x0000;<br />
            _WM_CREATE = 0x0001;<br />
            应用程序创建一个窗口<br />
            <br />
            _WM_DESTROY = 0x0002;<br />
            一个窗口被销毁<br />
            <br />
            _WM_MOVE = 0x0003;<br />
            移动一个窗口<br />
            <br />
            _WM_SIZE = 0x0005;<br />
            改变一个窗口的大小<br />
            <br />
            _WM_ACTIVATE = 0x0006;<br />
            一个窗口被激活或失去激活状态；<br />
            <br />
            _WM_SETFOCUS = 0x0007;<br />
            获得焦点后<br />
            <br />
            _WM_KILLFOCUS = 0x0008;<br />
            失去焦点<br />
            <br />
            _WM_ENABLE = 0x000A;<br />
            改变enable状态<br />
            <br />
            _WM_SETREDRAW = 0x000B;<br />
            设置窗口是否能重画 
            <br />
            <br />
            _WM_SETTEXT = 0x000C;<br />
            应用程序发送此消息来设置一个窗口的文本<br />
            <br />
            _WM_GETTEXT = 0x000D;<br />
            应用程序发送此消息来复制对应窗口的文本到缓冲区<br />
            <br />
            _WM_GETTEXTLENGTH = 0x000E;<br />
            得到与一个窗口有关的文本的长度（不包含空字符）<br />
            <br />
            _WM_PAINT = 0x000F;<br />
            要求一个窗口重画自己<br />
            <br />
            _WM_CLOSE = 0x0010;<br />
            当一个窗口或应用程序要关闭时发送一个信号<br />
            <br />
            _WM_QUERYENDSESSION = 0x0011;<br />
            当用户选择结束对话框或程序自己调用ExitWindows函数<br />
            <br />
            _WM_QUIT = 0x0012;<br />
            用来结束程序运行或当程序调用postquitmessage函数 
            <br />
            <br />
            _WM_QUERYOPEN = 0x0013;<br />
            当用户窗口恢复以前的大小位置时，把此消息发送给某个图标<br />
            <br />
            _WM_ERASEBKGND = 0x0014;<br />
            当窗口背景必须被擦除时（例在窗口改变大小时）<br />
            <br />
            _WM_SYSCOLORCHANGE = 0x0015;<br />
            当系统颜色改变时，发送此消息给所有顶级窗口<br />
            <br />
            _WM_ENDSESSION = 0x0016;<br />
            当系统进程发出_WM_QUERYENDSESSION消息后，此消息发送给应用程序，<br />
            通知它对话是否结束<br />
            <br />
            _WM_SYSTEMERROR = 0x0017;<br />
            <br />
            _WM_SHOWWINDOW = 0x0018;<br />
            当隐藏或显示窗口是发送此消息给这个窗口<br />
            <br />
            _WM_ACTIVATEAPP = 0x001C;<br />
            发此消息给应用程序哪个窗口是激活的，哪个是非激活的；<br />
            <br />
            _WM_FONTCHANGE = 0x001D;<br />
            当系统的字体资源库变化时发送此消息给所有顶级窗口<br />
            <br />
            _WM_TIMECHANGE = 0x001E;<br />
            当系统的时间变化时发送此消息给所有顶级窗口<br />
            <br />
            _WM_CANCELMODE = 0x001F;<br />
            发送此消息来取消某种正在进行的摸态（操作）<br />
            <br />
            _WM_SETCURSOR = 0x0020;<br />
            如果鼠标引起光标在某个窗口中移动且鼠标输入没有被捕获时，就发消息给某个窗口<br />
            <br />
            _WM_MOUSEACTIVATE = 0x0021;<br />
            当光标在某个非激活的窗口中而用户正按着鼠标的某个键发送此消息给当前窗口<br />
            <br />
            _WM_CHILDACTIVATE = 0x0022;<br />
            发送此消息给MDI子窗口当用户点击此窗口的标题栏，或当窗口被激活，移动，改变大小<br />
            <br />
            _WM_QUEUESYNC = 0x0023;<br />
            此消息由基于计算机的训练程序发送，通过WH_JOURNALPALYBACK的hook程序<br />
            分离出用户输入消息<br />
            <br />
            _WM_GETMINMAXINFO = 0x0024;<br />
            此消息发送给窗口当它将要改变大小或位置；<br />
            <br />
            _WM_PAINTICON = 0x0026;<br />
            发送给最小化窗口当它图标将要被重画<br />
            <br />
            _WM_ICONERASEBKGND = 0x0027;<br />
            此消息发送给某个最小化窗口，仅当它在画图标前它的背景必须被重画<br />
            <br />
            _WM_NEXTDLGCTL = 0x0028;<br />
            发送此消息给一个对话框程序去更改焦点位置<br />
            <br />
            _WM_SPOOLERSTATUS = 0x002A;<br />
            每当打印管理列队增加或减少一条作业时发出此消息 
            <br />
            <br />
            _WM_DRAWITEM = 0x002B;<br />
            当button，combobox，listbox，menu的可视外观改变时发送<br />
            此消息给这些空件的所有者<br />
            <br />
            _WM_MEASUREITEM = 0x002C;<br />
            当button, combo box, list box, list view control, or menu item 被创建时<br />
            发送此消息给控件的所有者<br />
            <br />
            _WM_DELETEITEM = 0x002D;<br />
            当the list box 或 combo box 被销毁 或 当 某些项被删除通过<br />
            LB_DELETESTRING, LB_RESETCONTENT, CB_DELETESTRING, or CB_RESETCONTENT 消息<br />
            <br />
            _WM_VKEYTOITEM = 0x002E;<br />
            此消息有一个LBS_WANTKEYBOARDINPUT风格的发出给它的所有者来响应<br />
            <br />
            _WM_KEYDOWN消息 
            <br />
            _WM_CHARTOITEM = 0x002F;<br />
            此消息由一个LBS_WANTKEYBOARDINPUT风格的列表框发送给他的所有者来响应_WM_CHAR消息 
            <br />
            <br />
            _WM_SETFONT = 0x0030;<br />
            当绘制文本时程序发送此消息得到控件要用的颜色 
            <br />
            <br />
            _WM_GETFONT = 0x0031;<br />
            应用程序发送此消息得到当前控件绘制文本的字体<br />
            <br />
            _WM_SETHOTKEY = 0x0032;<br />
            应用程序发送此消息让一个窗口与一个热键相关连<br />
            <br />
            _WM_GETHOTKEY = 0x0033;<br />
            应用程序发送此消息来判断热键与某个窗口是否有关联<br />
            <br />
            _WM_QUERYDRAGICON = 0x0037;<br />
            此消息发送给最小化窗口，当此窗口将要被拖放而它的类中没有定义图标，应用程序能返回一个图标或光标的句柄，当用户拖放图标时系统显示这个图标或光标<br />
            <br />
            _WM_COMPAREITEM = 0x0039;<br />
            发送此消息来判定combobox或listbox新增加的项的相对位置<br />
            <br />
            _WM_GETOBJECT = 0x003D;<br />
            <br />
            _WM_COMPACTING = 0x0041;<br />
            显示内存已经很少了<br />
            <br />
            _WM_WINDOWPOSCHANGING = 0x0046;<br />
            发送此消息给那个窗口的大小和位置将要被改变时，来调用setwindowpos函数或其它窗口管理函数<br />
            <br />
            _WM_WINDOWPOSCHANGED = 0x0047;<br />
            发送此消息给那个窗口的大小和位置已经被改变时，来调用setwindowpos函数或其它窗口管理函数<br />
            <br />
            _WM_POWER = 0x0048;（适用于16位的windows）<br />
            当系统将要进入暂停状态时发送此消息<br />
            <br />
            _WM_COPYDATA = 0x004A;<br />
            当一个应用程序传递数据给另一个应用程序时发送此消息<br />
            <br />
            _WM_CANCELJOURNAL = 0x004B;<br />
            当某个用户取消程序日志激活状态，提交此消息给程序<br />
            <br />
            _WM_NOTIFY = 0x004E;<br />
            当某个控件的某个事件已经发生或这个控件需要得到一些信息时，发送此消息给它的父窗口<br />
            <br />
            _WM_INPUTLANGCHANGEREQUEST = 0x0050;<br />
            当用户选择某种输入语言，或输入语言的热键改变<br />
            <br />
            _WM_INPUTLANGCHANGE = 0x0051;<br />
            当平台现场已经被改变后发送此消息给受影响的最顶级窗口<br />
            <br />
            _WM_TCARD = 0x0052;<br />
            当程序已经初始化windows帮助例程时发送此消息给应用程序<br />
            <br />
            _WM_HELP = 0x0053;<br />
            此消息显示用户按下了F1，如果某个菜单是激活的，就发送此消息个此窗口关联的菜单，否则就发送给有焦点的窗口，如果当前都没有焦点，就把此消息发送给当前激活的窗口<br />
            <br />
            _WM_USERCHANGED = 0x0054;<br />
            当用户已经登入或退出后发送此消息给所有的窗口，当用户登入或退出时系统更新用户的具体设置信息，在用户更新设置时系统马上发送此消息；<br />
            <br />
            _WM_NOTIFYFORMAT = 0x0055;<br />
            公用控件，自定义控件和他们的父窗口通过此消息来判断控件是使用ANSI还是UNICODE结构在_WM_NOTIFY消息，使用此控件能使某个控件与它的父控件之间进行相互通信<br />
            <br />
            _WM_CONTEXTMENU = 0x007B;<br />
            当用户某个窗口中点击了一下右键就发送此消息给这个窗口<br />
            <br />
            _WM_STYLECHANGING = 0x007C;<br />
            当调用SETWINDOWLONG函数将要改变一个或多个 窗口的风格时发送此消息给那个窗口<br />
            <br />
            _WM_STYLECHANGED = 0x007D;<br />
            当调用SETWINDOWLONG函数一个或多个 窗口的风格后发送此消息给那个窗口<br />
            <br />
            _WM_DISPLAYCHANGE = 0x007E;<br />
            当显示器的分辨率改变后发送此消息给所有的窗口<br />
            <br />
            _WM_GETICON = 0x007F;<br />
            此消息发送给某个窗口来返回与某个窗口有关连的大图标或小图标的句柄；<br />
            <br />
            _WM_SETICON = 0x0080;<br />
            程序发送此消息让一个新的大图标或小图标与某个窗口关联；<br />
            <br />
            _WM_NCCREATE = 0x0081;<br />
            当某个窗口第一次被创建时，此消息在_WM_CREATE消息发送前发送；<br />
            <br />
            _WM_NCDESTROY = 0x0082;<br />
            此消息通知某个窗口，非客户区正在销毁<br />
            <br />
            _WM_NCCALCSIZE = 0x0083;<br />
            当某个窗口的客户区域必须被核算时发送此消息<br />
            <br />
            _WM_NCHITTEST = 0x0084;//移动鼠标，按住或释放鼠标时发生<br />
            <br />
            _WM_NCPAINT = 0x0085;<br />
            程序发送此消息给某个窗口当它（窗口）的框架必须被绘制时；<br />
            <br />
            _WM_NCACTIVATE = 0x0086;<br />
            此消息发送给某个窗口 仅当它的非客户区需要被改变来显示是激活还是非激活状态；<br />
            <br />
            _WM_GETDLGCODE = 0x0087;<br />
            发送此消息给某个与对话框程序关联的控件，widdows控制方位键和TAB键使输入进入此控件 
            通过响应_WM_GETDLGCODE消息，应用程序可以把他当成一个特殊的输入控件并能处理它<br />
            <br />
            _WM_NCMOUSEMOVE = 0x00A0;<br />
            当光标在一个窗口的非客户区内移动时发送此消息给这个窗口 //非客户区为：窗体的标题栏及窗 
            <br />
            的边框体<br />
            <br />
            _WM_NCLBUTTONDOWN = 0x00A1;<br />
            当光标在一个窗口的非客户区同时按下鼠标左键时提交此消息<br />
            <br />
            _WM_NCLBUTTONUP = 0x00A2;<br />
            当用户释放鼠标左键同时光标某个窗口在非客户区十发送此消息；<br />
            <br />
            _WM_NCLBUTTONDBLCLK = 0x00A3;<br />
            当用户双击鼠标左键同时光标某个窗口在非客户区十发送此消息<br />
            <br />
            _WM_NCRBUTTONDOWN = 0x00A4;<br />
            当用户按下鼠标右键同时光标又在窗口的非客户区时发送此消息<br />
            <br />
            _WM_NCRBUTTONUP = 0x00A5;<br />
            当用户释放鼠标右键同时光标又在窗口的非客户区时发送此消息<br />
            <br />
            _WM_NCRBUTTONDBLCLK = 0x00A6;<br />
            当用户双击鼠标右键同时光标某个窗口在非客户区十发送此消息<br />
            <br />
            _WM_NCMBUTTONDOWN = 0x00A7;<br />
            当用户按下鼠标中键同时光标又在窗口的非客户区时发送此消息<br />
            <br />
            _WM_NCMBUTTONUP = 0x00A8;<br />
            当用户释放鼠标中键同时光标又在窗口的非客户区时发送此消息<br />
            <br />
            _WM_NCMBUTTONDBLCLK = 0x00A9;<br />
            当用户双击鼠标中键同时光标又在窗口的非客户区时发送此消息<br />
            <br />
            _WM_KEYFIRST = 0x0100;<br />
            _WM_KEYDOWN = 0x0100;
            <br />
            //按下一个键<br />
            <br />
            _WM_KEYUP = 0x0101;
            <br />
            //释放一个键<br />
            <br />
            _WM_CHAR = 0x0102;
            <br />
            //按下某键，并已发出_WM_KEYDOWN， _WM_KEYUP消息<br />
            <br />
            _WM_DEADCHAR = 0x0103;<br />
            当用translatemessage函数翻译_WM_KEYUP消息时发送此消息给拥有焦点的窗口<br />
            <br />
            _WM_SYSKEYDOWN = 0x0104;<br />
            当用户按住ALT键同时按下其它键时提交此消息给拥有焦点的窗口；<br />
            <br />
            _WM_SYSKEYUP = 0x0105;<br />
            当用户释放一个键同时ALT 键还按着时提交此消息给拥有焦点的窗口<br />
            <br />
            _WM_SYSCHAR = 0x0106;<br />
            当_WM_SYSKEYDOWN消息被TRANSLATEMESSAGE函数翻译后提交此消息给拥有焦点的窗口<br />
            <br />
            _WM_SYSDEADCHAR = 0x0107;<br />
            当_WM_SYSKEYDOWN消息被TRANSLATEMESSAGE函数翻译后发送此消息给拥有焦点的窗口<br />
            <br />
            _WM_KEYLAST = 0x0108;<br />
            _WM_INITDIALOG = 0x0110;<br />
            在一个对话框程序被显示前发送此消息给它，通常用此消息初始化控件和执行其它任务<br />
            <br />
            _WM_COMMAND = 0x0111;<br />
            当用户选择一条菜单命令项或当某个控件发送一条消息给它的父窗口，一个快捷键被翻译<br />
            <br />
            _WM_SYSCOMMAND = 0x0112;<br />
            当用户选择窗口菜单的一条命令或当用户选择最大化或最小化时那个窗口会收到此消息<br />
            <br />
            _WM_TIMER = 0x0113; //发生了定时器事件<br />
            _WM_HSCROLL = 0x0114;<br />
            当一个窗口标准水平滚动条产生一个滚动事件时发送此消息给那个窗口，也发送给拥有它的控件<br />
            <br />
            _WM_VSCROLL = 0x0115;<br />
            当一个窗口标准垂直滚动条产生一个滚动事件时发送此消息给那个窗口也，发送给拥有它的控件 
            <br />
            <br />
            _WM_INITMENU = 0x0116;<br />
            当一个菜单将要被激活时发送此消息，它发生在用户菜单条中的某项或按下某个菜单键，它允许程序在显示前更改菜单<br />
            <br />
            _WM_INITMENUPOPUP = 0x0117;<br />
            当一个下拉菜单或子菜单将要被激活时发送此消息，它允许程序在它显示前更改菜单，而不要改变全部 
            <br />
            <br />
            _WM_MENUSELECT = 0x011F;<br />
            当用户选择一条菜单项时发送此消息给菜单的所有者（一般是窗口）<br />
            <br />
            _WM_MENUCHAR = 0x0120;<br />
            当菜单已被激活用户按下了某个键（不同于加速键），发送此消息给菜单的所有者；<br />
            <br />
            _WM_ENTERIDLE = 0x0121;<br />
            当一个模态对话框或菜单进入空载状态时发送此消息给它的所有者，一个模态对话框或菜单进入空载状态就是在处理完一条或几条先前的消息后没有消息它的列队中等待<br />
            <br />
            _WM_MENURBUTTONUP = 0x0122;<br />
            _WM_MENUDRAG = 0x0123;<br />
            _WM_MENUGETOBJECT = 0x0124;<br />
            _WM_UNINITMENUPOPUP = 0x0125;<br />
            _WM_MENUCOMMAND = 0x0126;<br />
            _WM_CHANGEUISTATE = 0x0127;<br />
            _WM_UPDATEUISTATE = 0x0128;<br />
            _WM_QUERYUISTATE = 0x0129;
            <br />
            _WM_CTLCOLORMSGBOX = 0x0132;<br />
            在windows绘制消息框前发送此消息给消息框的所有者窗口，通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置消息框的文本和背景颜色<br />
            <br />
            _WM_CTLCOLOREDIT = 0x0133;<br />
            当一个编辑型控件将要被绘制时发送此消息给它的父窗口；通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置编辑框的文本和背景颜色<br />
            <br />
            _WM_CTLCOLORLISTBOX = 0x0134;<br />
            当一个列表框控件将要被绘制前发送此消息给它的父窗口；通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置列表框的文本和背景颜色 
            <br />
            <br />
            _WM_CTLCOLORBTN = 0x0135;<br />
            当一个按钮控件将要被绘制时发送此消息给它的父窗口；通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置按纽的文本和背景颜色<br />
            <br />
            _WM_CTLCOLORDLG = 0x0136;<br />
            当一个对话框控件将要被绘制前发送此消息给它的父窗口；通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置对话框的文本背景颜色<br />
            <br />
            _WM_CTLCOLORSCROLLBAR= 0x0137;<br />
            当一个滚动条控件将要被绘制时发送此消息给它的父窗口；通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置滚动条的背景颜色<br />
            <br />
            _WM_CTLCOLORSTATIC = 0x0138;
            <br />
            当一个静态控件将要被绘制时发送此消息给它的父窗口；通过响应这条消息，所有者窗口可以通过使用给定的相关显示设备的句柄来设置静态控件的文本和背景颜色<br />
            <br />
            _WM_MOUSEFIRST = 0x0200;<br />
            _WM_MOUSEMOVE = 0x0200;
            <br />
            // 移动鼠标<br />
            <br />
            _WM_LBUTTONDOWN = 0x0201;
            <br />
            //按下鼠标左键<br />
            <br />
            _WM_LBUTTONUP = 0x0202;
            <br />
            //释放鼠标左键<br />
            <br />
            _WM_LBUTTONDBLCLK = 0x0203;<br />
            //双击鼠标左键<br />
            <br />
            _WM_RBUTTONDOWN = 0x0204;<br />
            //按下鼠标右键<br />
            <br />
            _WM_RBUTTONUP = 0x0205;<br />
            //释放鼠标右键<br />
            <br />
            _WM_RBUTTONDBLCLK = 0x0206;
            <br />
            //双击鼠标右键<br />
            <br />
            _WM_MBUTTONDOWN = 0x0207;
            <br />
            //按下鼠标中键 
            <br />
            <br />
            _WM_MBUTTONUP = 0x0208;
            <br />
            //释放鼠标中键<br />
            <br />
            _WM_MBUTTONDBLCLK = 0x0209;
            <br />
            //双击鼠标中键<br />
            <br />
            _WM_MOUSEWHEEL = 0x020A;<br />
            当鼠标轮子转动时发送此消息个当前有焦点的控件<br />
            <br />
            _WM_MOUSELAST = 0x020A;<br />
            _WM_PARENTNOTIFY = 0x0210;<br />
            当MDI子窗口被创建或被销毁，或用户按了一下鼠标键而光标在子窗口上时发送此消息给它的父窗口<br />
            <br />
            _WM_ENTERMENULOOP = 0x0211;<br />
            发送此消息通知应用程序的主窗口that已经进入了菜单循环模式<br />
            <br />
            _WM_EXITMENULOOP = 0x0212;<br />
            发送此消息通知应用程序的主窗口that已退出了菜单循环模式<br />
            <br />
            _WM_NEXTMENU = 0x0213;<br />
            _WM_SIZING = 532;<br />
            当用户正在调整窗口大小时发送此消息给窗口；通过此消息应用程序可以监视窗口大小和位置也可以修改他们<br />
            <br />
            _WM_CAPTURECHANGED = 533;<br />
            发送此消息 给窗口当它失去捕获的鼠标时；<br />
            <br />
            _WM_MOVING = 534;<br />
            当用户在移动窗口时发送此消息，通过此消息应用程序可以监视窗口大小和位置也可以修改他们；<br />
            <br />
            _WM_POWERBROADCAST = 536;<br />
            此消息发送给应用程序来通知它有关电源管理事件；<br />
            <br />
            _WM_DEVICECHANGE = 537;<br />
            当设备的硬件配置改变时发送此消息给应用程序或设备驱动程序<br />
            <br />
            _WM_IME_STARTCOMPOSITION = 0x010D;<br />
            _WM_IME_ENDCOMPOSITION = 0x010E;<br />
            _WM_IME_COMPOSITION = 0x010F;<br />
            _WM_IME_KEYLAST = 0x010F;<br />
            _WM_IME_SETCONTEXT = 0x0281;<br />
            _WM_IME_NOTIFY = 0x0282;<br />
            _WM_IME_CONTROL = 0x0283;<br />
            _WM_IME_COMPOSITIONFULL = 0x0284;<br />
            _WM_IME_SELECT = 0x0285;<br />
            _WM_IME_CHAR = 0x0286;<br />
            _WM_IME_REQUEST = 0x0288;<br />
            _WM_IME_KEYDOWN = 0x0290;<br />
            _WM_IME_KEYUP = 0x0291;<br />
            _WM_MDICREATE = 0x0220;<br />
            应用程序发送此消息给多文档的客户窗口来创建一个MDI 子窗口<br />
            <br />
            _WM_MDIDESTROY = 0x0221;<br />
            应用程序发送此消息给多文档的客户窗口来关闭一个MDI 子窗口<br />
            <br />
            _WM_MDIACTIVATE = 0x0222;<br />
            应用程序发送此消息给多文档的客户窗口通知客户窗口激活另一个MDI子窗口，当客户窗口收到此消息后，它发出_WM_MDIACTIVE消息给MDI子窗口（未激活）激活它；<br />
            <br />
            _WM_MDIRESTORE = 0x0223;<br />
            程序 发送此消息给MDI客户窗口让子窗口从最大最小化恢复到原来大小<br />
            <br />
            _WM_MDINEXT = 0x0224;<br />
            程序 发送此消息给MDI客户窗口激活下一个或前一个窗口<br />
            <br />
            _WM_MDIMAXIMIZE = 0x0225;<br />
            程序发送此消息给MDI客户窗口来最大化一个MDI子窗口；<br />
            <br />
            _WM_MDITILE = 0x0226;<br />
            程序 发送此消息给MDI客户窗口以平铺方式重新排列所有MDI子窗口<br />
            <br />
            _WM_MDICASCADE = 0x0227;<br />
            程序 发送此消息给MDI客户窗口以层叠方式重新排列所有MDI子窗口<br />
            <br />
            _WM_MDIICONARRANGE = 0x0228;<br />
            程序 发送此消息给MDI客户窗口重新排列所有最小化的MDI子窗口<br />
            <br />
            _WM_MDIGETACTIVE = 0x0229;<br />
            程序 发送此消息给MDI客户窗口来找到激活的子窗口的句柄<br />
            <br />
            _WM_MDISETMENU = 0x0230;<br />
            程序 发送此消息给MDI客户窗口用MDI菜单代替子窗口的菜单<br />
            <br />
            _WM_ENTERSIZEMOVE = 0x0231;<br />
            _WM_EXITSIZEMOVE = 0x0232;<br />
            _WM_DROPFILES = 0x0233;<br />
            _WM_MDIREFRESHMENU = 0x0234;<br />
            _WM_MOUSEHOVER = 0x02A1;<br />
            _WM_MOUSELEAVE = 0x02A3;<br />
            _WM_CUT = 0x0300;<br />
            程序发送此消息给一个编辑框或combobox来删除当前选择的文本<br />
            <br />
            _WM_COPY = 0x0301;<br />
            程序发送此消息给一个编辑框或combobox来复制当前选择的文本到剪贴板<br />
            <br />
            _WM_PASTE = 0x0302;<br />
            程序发送此消息给editcontrol或combobox从剪贴板中得到数据<br />
            <br />
            _WM_CLEAR = 0x0303;<br />
            程序发送此消息给editcontrol或combobox清除当前选择的内容；<br />
            <br />
            __WM_UNDO = 0x0304;<br />
            程序发送此消息给editcontrol或combobox撤消最后一次操作<br />
            <br />
            _WM_RENDERFORMAT = 0x0305；<br />
            _WM_RENDERALLFORMATS = 0x0306;<br />
            _WM_DESTROYCLIPBOARD = 0x0307;<br />
            当调用ENPTYCLIPBOARD函数时 发送此消息给剪贴板的所有者<br />
            <br />
            _WM_DRAWCLIPBOARD = 0x0308;<br />
            当剪贴板的内容变化时发送此消息给剪贴板观察链的第一个窗口；它允许用剪贴板观察窗口来<br />
            显示剪贴板的新内容；<br />
            <br />
            _WM_PAINTCLIPBOARD = 0x0309;<br />
            当剪贴板包含CF_OWNERDIPLAY格式的数据并且剪贴板观察窗口的客户区需要重画；<br />
            <br />
            _WM_VSCROLLCLIPBOARD = 0x030A;<br />
            _WM_SIZECLIPBOARD = 0x030B;<br />
            当剪贴板包含CF_OWNERDIPLAY格式的数据并且剪贴板观察窗口的客户区域的大小已经改变是此消息通过剪贴板观察窗口发送给剪贴板的所有者；<br />
            <br />
            _WM_ASKCBFORMATNAME = 0x030C;<br />
            通过剪贴板观察窗口发送此消息给剪贴板的所有者来请求一个CF_OWNERDISPLAY格式的剪贴板的名字<br />
            <br />
            _WM_CHANGECBCHAIN = 0x030D;<br />
            当一个窗口从剪贴板观察链中移去时发送此消息给剪贴板观察链的第一个窗口；<br />
            <br />
            _WM_HSCROLLCLIPBOARD = 0x030E;
            <br />
            此消息通过一个剪贴板观察窗口发送给剪贴板的所有者 
            ；它发生在当剪贴板包含CFOWNERDISPALY格式的数据并且有个事件在剪贴板观察窗的水平滚动条上；所有者应滚动剪贴板图象并更新滚动条的值；<br />
            <br />
            _WM_QUERYNEWPALETTE = 0x030F;<br />
            此消息发送给将要收到焦点的窗口，此消息能使窗口在收到焦点时同时有机会实现他的逻辑调色板<br />
            <br />
            _WM_PALETTEISCHANGING= 0x0310;<br />
            当一个应用程序正要实现它的逻辑调色板时发此消息通知所有的应用程序<br />
            <br />
            _WM_PALETTECHANGED = 0x0311;<br />
            此消息在一个拥有焦点的窗口实现它的逻辑调色板后发送此消息给所有顶级并重叠的窗口，以此来改变系统调色板 
            <br />
            <br />
            _WM_HOTKEY = 0x0312;<br />
            当用户按下由REGISTERHOTKEY函数注册的热键时提交此消息<br />
            <br />
            _WM_PRINT = 791;<br />
            应用程序发送此消息仅当WINDOWS或其它应用程序发出一个请求要求绘制一个应用程序的一部分；<br />
            <br />
            _WM_PRINTCLIENT = 792;<br />
            _WM_HANDHELDFIRST = 856;<br />
            _WM_HANDHELDLAST = 863;<br />
            _WM_PENWINFIRST = 0x0380;<br />
            _WM_PENWINLAST = 0x038F;<br />
            _WM_COALESCE_FIRST = 0x0390;<br />
            _WM_COALESCE_LAST = 0x039F;<br />
            _WM_DDE_FIRST = 0x03E0;<br />
            _WM_DDE_INITIATE = _WM_DDE_FIRST + 0;<br />
            一个DDE客户程序提交此消息开始一个与服务器程序的会话来响应那个指定的程序和主题名；<br />
            <br />
            _WM_DDE_TERMINATE = _WM_DDE_FIRST + 1;<br />
            一个DDE应用程序（无论是客户还是服务器）提交此消息来终止一个会话；<br />
            <br />
            _WM_DDE_ADVISE = _WM_DDE_FIRST + 2;<br />
            一个DDE客户程序提交此消息给一个DDE服务程序来请求服务器每当数据项改变时更新它<br />
            <br />
            _WM_DDE_UNADVISE = _WM_DDE_FIRST + 3;<br />
            一个DDE客户程序通过此消息通知一个DDE服务程序不更新指定的项或一个特殊的剪贴板格式的项<br />
            <br />
            _WM_DDE_ACK = _WM_DDE_FIRST + 4;<br />
            此消息通知一个DDE（动态数据交换）程序已收到并正在处理_WM_DDE_POKE,
            <br />
            <br />
            _WM_DDE_EXECUTE, _WM_DDE_DATA, _WM_DDE_ADVISE, _WM_DDE_UNADVISE, or 
            _WM_DDE_INITIAT消息<br />
            _WM_DDE_DATA = _WM_DDE_FIRST + 5;<br />
            一个DDE服务程序提交此消息给DDE客户程序来传递个一数据项给客户或通知客户的一条可用数据项<br />
            <br />
            _WM_DDE_REQUEST = _WM_DDE_FIRST + 6;<br />
            一个DDE客户程序提交此消息给一个DDE服务程序来请求一个数据项的值；<br />
            <br />
            _WM_DDE_POKE = _WM_DDE_FIRST + 7;<br />
            一个DDE客户程序提交此消息给一个DDE服务程序，客户使用此消息来请求服务器接收一个未经同意的数据项；服务器通过答复_WM_DDE_ACK消息提示是否它接收这个数据项；<br />
            <br />
            _WM_DDE_EXECUTE = _WM_DDE_FIRST + 8;<br />
            一个DDE客户程序提交此消息给一个DDE服务程序来发送一个字符串给服务器让它象串行命令一样被处理，服务器通过提交_WM_DDE_ACK消息来作回应；<br />
            <br />
            _WM_DDE_LAST = _WM_DDE_FIRST + 8;<br />
            _WM_APP = 0x8000;<br />
            _WM_USER = 0x0400;一般自定义的消息应当大于0x400<br />
            <br />
            /////////////////////////////////////////////////////////////////////<br />
            通知消息(Notification message)是指这样一种消息，一个窗口内的子控件发生了一些事情，需要通知父窗口。<br />
            通知消息只适用于标准的窗口控件如按钮、列表框、组合框、编辑框，以及Windows 95公共控件如树状视图、列表视图等。例如，单击或双击一个控件、<br />
            在控件中选择部分文本、操作控件的滚动条都会产生通知消息。 
            <br />
            <br />
            <p>通知消息基于静态语言的局限性而设计出来。但实际上在aardio语言中动态添加回调函数非常简单。<br />
              因此你可以为控件指定onnotify回调函数以接收通知消息。这在传统的编程语言中是非常繁琐复杂的操作。<br />
                <br />
            <br />
            <b>按扭</b><br />
            _BN_CLICKED 用户单击了按钮<br />
            _BN_DISABLE 按钮被禁止<br />
            _BN_DOUBLECLICKED 用户双击了按钮<br />
            _BN_HILITE 用户加亮了按钮<br />
            _BN_PAINT 按钮应当重画<br />
            _BN_UNHILITE 加亮应当去掉<br />
            <br />
            <b>组合框</b><br />
            _CBN_CLOSEUP 组合框的列表框被关闭<br />
            _CBN_DBLCLK 用户双击了一个字符串<br />
            _CBN_DROPDOWN 组合框的列表框被拉出<br />
            _CBN_EDITCHANGE 用户修改了编辑框中的文本<br />
            _CBN_EDITUPDATE 编辑框内的文本即将更新<br />
            _CBN_ERRSPACE 组合框内存不足<br />
            _CBN_KILLFOCUS 组合框失去输入焦点<br />
            _CBN_SELCHANGE 在组合框中选择了一项<br />
            _CBN_SELENDCANCEL 用户的选择应当被取消<br />
            _CBN_SELENDOK 用户的选择是合法的<br />
            _CBN_SETFOCUS 组合框获得输入焦点<br />
            <br />
            <b>编辑框</b><br />
            _EN_CHANGE编辑框中的文本己更新<br />
            _EN_ERRSPACE编辑框内存不足<br />
            _EN_HSCROLL用户点击了水平滚动条<br />
            _EN_KILLFOCUS编辑框正在失去输入焦点<br />
            _EN_MAXTEXT插入的内容被截断<br />
            _EN_SETFOCUS编辑框获得输入焦点<br />
            _EN_UPDATE编辑框中的文本将要更新<br />
            _EN_VSCROLL用户点击了垂直滚动条消息含义<br />
            <br />
            <b>列表框</b><br />
            _LBN_DBLCLK用户双击了一项<br />
            _LBN_ERRSPACE列表框内存不够<br />
            _LBN_KILLFOCUS列表框正在失去输入焦点<br />
            _LBN_SELCANCEL选择被取消<br />
            _LBN_SELCHANGE选择了另一项<br />
            _LBN_SETFOCUS列表框获得输入焦点<br />
            <br />
            </p>
            <table style="WIDTH: auto">
              <tr>
                    <td style="BORDER-BOTTOM-STYLE: none; BORDER-RIGHT-STYLE: none; BORDER-TOP-STYLE: none; BORDER-LEFT-STYLE: none">
                        <div class="quote">
                            <blockquote>
                                <p><br />
                                  <font color="#008000">/*<br />
                                  <br />
                                  了解消息可以做很多有趣的事，例如我们可以不要标题栏（在窗体属性中将text属性清空），不要边框。<br />
                                  自已用控件来模拟windows的标题栏以及边框，可以用图片控件做出漂亮的无边框窗体。<br />
                                  <br />
                                  在控件的的消息回调中拦截 _WM_LBUTTONDOWN<br />
                                  */</font><font color="#000000"><br />
                                  import win;<br />
                                  <br />
                                  </font><font color="#008000">//一.模拟标题栏<br />
                                  </font><font color="#000000">
                                  <br />
                                  ::PostMessage(winform.hwnd, 0xA1/*_WM_NCLBUTTONDOWN*/ , 0x2/*_HTCAPTION*/, 0) </font><font 
                                    color="#000000"><br />
                                  <br />
                                  </font><font color="#008000">//二、模拟边框<br />
                                  </font><font color="#000000">
                                  <br />
                                  </font><font color="#008000">//上下左右8个方向调整窗体大小<br />
                                  </font><font color="#000000">
                                  <br />
                                  ::SendMessageInt(winform.hwnd, 0xA1</font><font color="#008000">/*_WM_NCLBUTTONDOWN*/</font><font 
                                    color="#000000">, 0xC</font><font color="#008000">/*_HTTOP*/</font><font 
                                    color="#000000">, 0) </font><font color="#008000">//上边<br />
                                  </font><font color="#000000">::SendMessageInt(winform.hwnd, 0xA1</font><font 
                                    color="#008000">/*_WM_NCLBUTTONDOWN*/</font><font color="#000000">, 0xF</font><font 
                                    color="#008000">/*_HTBOTTOM*/</font><font color="#000000">, 0) </font>
                                  <font color="#008000">//下边<br />
                                  </font><font color="#000000">::SendMessageInt(winform.hwnd, 0xA1</font><font 
                                    color="#008000">/*_WM_NCLBUTTONDOWN*/</font><font color="#000000">, 0xA</font><font 
                                    color="#008000">/*_HTLEFT*/</font><font color="#000000">, 0 );</font><font 
                                    color="#008000">//左边<br />
                                  </font><font color="#000000">::SendMessageInt(winform.hwnd, 0xA1</font><font 
                                    color="#008000">/*_WM_NCLBUTTONDOWN*/</font><font color="#000000">, 0xB</font><font 
                                    color="#008000">/*_HTRIGHT*/</font><font color="#000000">, 0);</font><font 
                                    color="#008000">//右边<br />
                                  </font><font color="#000000">::SendMessageInt(winform.hwnd, 0xA1</font><font 
                                    color="#008000">/*_WM_NCLBUTTONDOWN*/</font><font color="#000000">, 0xD</font><font 
                                    color="#008000">/*_HTTOPLEFT*/</font><font color="#000000">, 0);</font><font 
                                    color="#008000">//左上角<br />
                                  </font><font color="#000000">::SendMessageInt(winform.hwnd, 0xA1</font><font 
                                    color="#008000">/*_WM_NCLBUTTONDOWN*/</font><font color="#000000">, 0x10</font><font 
                                    color="#008000">/*_HTBOTTOMLEFT*/</font><font color="#000000">, 0 );</font><font 
                                    color="#008000">//左下角<br />
                                  </font><font color="#000000">::SendMessageInt(winform.hwnd, 0xA1</font><font 
                                    color="#008000">/*_WM_NCLBUTTONDOWN*/</font><font color="#000000">, 0xE</font><font 
                                    color="#008000">/*_HTTOPRIGHT*/</font><font color="#000000">, 0 );</font><font 
                                    color="#008000">//右上角<br />
                                  </font><font color="#000000">::SendMessageInt(winform.hwnd, 0xA1</font><font 
                                    color="#008000">/*_WM_NCLBUTTONDOWN*/</font><font color="#000000">, 0x11</font><font 
                                    color="#008000">/*_HTBOTTOMRIGHT*/</font><font color="#000000">, 0);</font><font 
                                    color="#008000">//右下角<br />
                                  </font><font color="#000000">
                                  <br />
                                  </font><font color="#008000">//三.最大化最小化窗体(和上面调用方法一样,只有sendmessage方法参数不一样)<br />
                                  </font><font color="#000000">
                                  <br />
                                  </font><font color="#008000">//1.模拟窗体最小化<br />
                                  </font><font color="#000000">::PostMessage(winform.hwnd,  0x112/*_WM_SYSCOMMAND*/,0xF020/*_SC_MINIMIZE*/, 0); <br />
                                  <br />
                                  </font><font color="#008000">//2.模拟窗体最大化<br />
                                  </font><font color="#000000">::PostMessage(winform.hwnd,  0x112/*_WM_SYSCOMMAND*/, 0xF030/*_SC_MAXIMIZE*/,0);<br />
                                  <br />
                                  </font><font color="#008000">//3.模拟窗体最大化后还原<br />
                                  </font><font color="#000000">::PostMessage(winform.hwnd,  0x112/*_WM_SYSCOMMAND*/, 0xF120/*_SC_RESTORE*/, 0);</font>                                </p>
                                <p> //自动判断最大化与还原<br />
                                  max_restore = function(){ <br />
if(::IsZoomed(winform.hwnd) ) <br />
::PostMessage(winform.hwnd,  0x112/*_WM_SYSCOMMAND*/, 0xF120/*_SC_RESTORE*/, 0);<br />
else <br />
::PostMessage(winform.hwnd,  0x112/*_WM_SYSCOMMAND*/, 0xF030/*_SC_MAXIMIZE*/,0);<br />} </p>
                                <p><br />
                                </p>
                            </blockquote>
                        </div>
                    </td>
                </tr>
            </table>
        </div>
 
 

    </div>
    <a name="message_api" />
    <p style="font-family: 新宋体">
        使用 import win; 语句导入windows支持库,在这个库中定义了下面的消息API函数.<br /> 
        ::PostMessage&nbsp;=&nbsp;u.api(<font color="#800000">&quot;PostMessageA&quot;</font><font 
            color="#000000">,</font><font color="#800000">&quot;int(int&nbsp;hWnd,INT&nbsp;msg,int&nbsp;wParam,int&nbsp;lParam)&quot;</font><font 
            color="#000000">)<br />
        ::PostThreadMessage&nbsp;=&nbsp;u.api(</font><font color="#800000">&quot;PostThreadMessageA&quot;</font><font 
            color="#000000">,</font><font color="#800000">&quot;int(int&nbsp;idThread,INT&nbsp;msg,int&nbsp;wParam,int&nbsp;lParam)&quot;</font><font 
            color="#000000">);&nbsp;<br />
        ::SendMessage&nbsp;=&nbsp;u.api(</font><font color="#800000">&quot;SendMessageA&quot;</font><font 
            color="#000000">,</font><font color="#800000">&quot;int(int&nbsp;hWnd,INT&nbsp;msg,pointer&nbsp;wParam,pointer&nbsp;lParam)&quot;</font><font 
            color="#000000">)<br />
        ::SendMessageInt&nbsp;=&nbsp;u.api(</font><font color="#800000">&quot;SendMessageA&quot;</font><font 
            color="#000000">,</font><font color="#800000">&quot;int(int&nbsp;hWnd,INT&nbsp;msg,int&nbsp;wParam,int&nbsp;lParam)&quot;</font><font 
            color="#000000">)<br />
        ::SendMessageByInt&nbsp;=&nbsp;u.api(</font><font color="#800000">&quot;SendMessageA&quot;</font><font 
            color="#000000">,</font><font color="#800000">&quot;int(int&nbsp;hWnd,INT&nbsp;msg,int&nbsp;&amp;wParam,int&nbsp;&amp;lParam)&quot;</font><font 
            color="#000000">)<br />
        ::SendMessageByString&nbsp;=&nbsp;u.api(</font><font color="#800000">&quot;SendMessageA&quot;</font><font 
            color="#000000">,</font><font color="#800000">&quot;int(int,INT,int,string&nbsp;&amp;lParam)&quot;</font><font 
            color="#000000">)<br />
        ::SendMessageByStr&nbsp;=&nbsp;u.api(</font><font color="#800000">&quot;SendMessageA&quot;</font><font 
            color="#000000">,</font><font color="#800000">&quot;int(int,INT,int,str&nbsp;&amp;lParam)&quot;</font><font 
            color="#000000">)<br />
        ::SendMessageByStruct&nbsp;=&nbsp;u.api(</font><font color="#800000">&quot;SendMessageA&quot;</font><font 
            color="#000000">,</font><font color="#800000">&quot;int(int,INT,int,struct&nbsp;&amp;lParam)&quot;</font><font 
            color="#000000">)&nbsp;<br />
        ::SendMessageTimeout&nbsp;=&nbsp;u.api(</font><font color="#800000">&quot;SendMessageTimeoutA&quot;</font><font 
            color="#000000">,</font><font color="#800000">&quot;int(int&nbsp;hwnd,INT&nbsp;msg,pointer&nbsp;wParam,pointer&nbsp;lParam,INT&nbsp;flags,INT&nbsp;timeout,int&nbsp;&amp;&nbsp;resultult)&quot;</font><font 
            color="#000000">)&nbsp;<br />
        </font>
    </p>
    <p>
        PostMessage系列函数只负责将消息放到消息队列中然后直接返回,消息由win.loopMessage()处理. <br />
        工作线程如果向UI线程消息队列快速发送大量的消息,导至消息队列大小超过系统限制,会导致后续消息丢失,无法正常响应用户操作.<br /> 
    </p>
    <p>
        SendMessage系列函数调用窗口回调函数,并等待直到获取返回代码,消息不会放入队列中,即不会被 win.loopMessage() 处理 <br />
        在多线程中，如果多个线程都频繁的调用SendMessage系列函数,因为该函数会在相同的GUI线程中阻塞处理, 这会导致多线程实际上失去并发执行的效果.</p>
    <p>
        &nbsp;</p>
 
 

</body>
</html>
