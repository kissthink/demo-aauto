//picture 图像
namespace com.picture;

import com; 
import win;
import gdi
import win.guid;
import win.ole;
 
IID_IPicture = win.guid( 2079852928, 48946, 4122, { 139;187;0;170;0;48;12;171} )

OleLoadPicture = ::Oleaut32.api("OleLoadPicture","int(pointer lpStream,int lSize,int fRunmode,struct riid,pointer &lpIPicture)")
OleSavePictureFile = Oleaut32.api("OleSavePictureFile","int(pointer pDisp,string szFilePath)") 
OleCreatePictureIndirect = Oleaut32.api("OleCreatePictureIndirect","int(struct lpPictDesc, struct riid, bool fOwn, pointer & lplpvObj)")

var PICTDESC = class {
    INT cbSizeofstruct;
    INT picType;
    union desc = {
        struct bmp = {
            pointer hbitmap;        // Bitmap
            pointer hpal;           // Accompanying palette
        } 

        struct wmf = {
            pointer hmeta;          // Metafile
            int xExt;
            int yExt;           // Extent
        } 

        struct icon ={
            pointer hicon;              // Icon
        } ;
 
        struct emf = {
            int hemf;        // Enhanced Metafile
        } 
    };

}  

/*封装IPicture{{*/
	var copyHandle = function(width=0,height=0){ 
		var flag = 0x4/*_LR_COPYRETURNORG*/;
		if( width || height ) flag = 0;
		if( owner.Type ==  3 )
			return  ::CopyImage( owner.Handle, 0x1/*_IMAGE_ICON*/, width, height, flag) , 0x1/*_IMAGE_ICON*/;
  		else if( owner.Type ==  1 )
  	  		return  ::CopyImage(  owner.Handle, 0/*_IMAGE_BITMAP*/, width, height, flag) , 0/*_IMAGE_BITMAP*/;
	}
	var save = function( filepath ){
		var bstrPath = ::SysAllocString( ..string.toUnicode( ..io.fullpath( filepath) ) ); 
		var p = ..com.GetPointer( owner );   
		OleSavePictureFile( p , bstrPath) ;  
		..com.Release(p)
		::SysFreeString( bstrPath );
	}
	var wrap = function(ipicture){
		ipicture.Save = save
		ipicture.CopyHandle = copyHandle
		ipicture[["_isComPicture"]] = true;
		ipicture[["Handle"]] = topointer( ipicture.Handle );
		return ipicture;
	}
/*}}*/

load = function(strfile){  
    var bin = "";
    var len = #strfile;
    
    if(!len) return null,"无效参数";
    elseif( len < 0x104/*::_MAX_PATH*/ ){ //是文件路径吗？
	    bin = ..string.load(  strfile ) //尝试载入图像文件
	    if( !bin ) bin = strfile;
    }
	else{
	    bin = strfile;
	}
	
	len = #bin;
	if(!len) return null,"图像数据为空"; 
	
	var hImageMemory = ::GlobalAlloc( 0x2 /*_GMEM_MOVEABLE*/, len); 
	pImageMemory = ::GlobalLock(hImageMemory); 
	::CopyMemory(pImageMemory,bin,len);
	::GlobalUnlock(hImageMemory); 
 	
	var re,pIStream,pIPicture ;
	re,pIStream = ::CreateStreamOnHGlobal(hImageMemory,true/*GlobalFree*/,pIStream) 
	if( re ){
		::GlobalFree(hImageMemory); 
		return null,..lasterr() 
	}
	
	re,pIPicture =  OleLoadPicture(pIStream, len, 0, IID_IPicture, pIPicture  );
	..com.Release(pIStream);
		
	if(re) return null,..lasterr() 
	var pic = ..com.QueryObject( pIPicture )
	..com.Release(pIPicture)
 	
 	wrap(pic);
	return  pic; 
}

loadBitmap = function(path){
	var p,e = ..com.picture.load(path);
	if(!p) return e;
	var h =  topointer(p.CopyHandle());
     ..com.Release(p); 
    return h; 
};

fromBitmap = function(hBmp,fOwn=true,picType=0x1/*_PICTYPE_BITMAP*/){
	var picdesc = PICTDESC()
	picdesc.cbSizeofstruct = ..raw.sizeof( picdesc );
	picdesc.desc.bmp.hbitmap = hBmp;
	picdesc.picType = picType;
	  
	var re ,pIPicture  = OleCreatePictureIndirect( picdesc, IID_IPicture, fOwn );  
	var pic = ..com.QueryObject( pIPicture  ,IID_IPicture ) //将一个 C指针转换为com object 
	..com.Release(pIPicture)  
	return wrap(pic); 
}

fromIcon = function(hIcon,fOwn=true){
	return fromBitmap(hIcon,fOwn,0x3/*_PICTYPE_ICON*/);
}

printClient = function(hwnd,x,y,w,h){
	return printWindow(hwnd,x,y,w,h,true);
}

printWindow = function(hwnd,x=0,y=0,w,h,clientOnly) {
 
	if( hwnd===null ) hwnd =  ..win.getDesktop();
	if( ..win.isIconic(hwnd)  || ( !win.isVisible(hwnd) ) ) 
		..win.show(hwnd, 0x4/*_SW_SHOWNOACTIVATE*/);

 	var picture; 
	gdi.windowBuffer( hwnd,
		function( hdc,hMemDc,hMemBitmap,width,height ){
			::PrintWindow( hwnd,hMemDc,0)
			
			if( x : y : w : h : clientOnly ){  
				if( clientOnly ){ 
					var left,top,width,height = ..win.getClientPos(hwnd);
					x = x + left;
					y = y + top; 
				} 
				width = w:( width - x)
				height = h:( height - y)  
				 
				..gdi.doubleBuffer( hMemDc,width,height,
					function( hdc,hMemDc,hMemBitmap ){
						::BitBlt( hMemDc , 0, 0,width,height, hdc, x, y,0xCC0020/*_SRCCOPY*/ | 0x40000000/*_CAPTUREBLT*/) 
		 				picture = fromBitmap(hMemBitmap);
		 				return true/*borrowBitmap*/;
					}
				)  
			}  
  			else {
  				picture = fromBitmap(hMemBitmap);
  				return true/*borrowBitmap*/;
  			} 
		} 
	) 
	return picture; 
} 

snapClient = function(hwnd,x,y,w,h){
	return snap(hwnd,x,y,w,h,true);
}

snap = function(hwnd,x=0,y=0,w,h,clientOnly)   {
 
	if( hwnd===null ) hwnd =  ..win.getDesktop(); 
	..win.showForeground(hwnd);
	 
	var picture;
	if(clientOnly){
		var hdc = ::GetDC(hwnd);
		var rc = ..win.getClientRect(hwnd);
		if(!w) w = rc.right - rc.left - x;
		if(!h) h = rc.bottom - rc.top - y;
		var hBmp = ..gdi.doubleBuffer( hdc,w,h,
		    function( hdc,hMemDc,hMemBitmap ){ 
		        ::BitBlt( hMemDc , 0, 0,w,h, hdc, x, y,0xCC0020/*_SRCCOPY*/ | 0x40000000/*_CAPTUREBLT*/)
		        picture = fromBitmap(hMemBitmap);
	      		return true/*borrowBitmap*/;
		    }
		)
		::ReleaseDC(hwnd, hdc)
	}
	else {
		var hdc = ::GetWindowDC(hwnd);
		var rc = ..win.getRect(hwnd,true);
		if(!w) w = rc.right - rc.left - x;
		if(!h) h = rc.bottom - rc.top - y;
		var hBmp = ..gdi.doubleBuffer( hdc,w,h,
		    function( hdc,hMemDc,hMemBitmap ){ 
		         ::BitBlt( hMemDc , 0, 0,w,h, hdc, x, y,0xCC0020/*_SRCCOPY*/ | 0x40000000/*_CAPTUREBLT*/)
		        picture = fromBitmap(hMemBitmap);
	      		return true/*borrowBitmap*/;
		    }
		)
		::ReleaseDC(hwnd, hdc)
	} 
  
	return picture;
} 

self.type = {
	none = 0;
	uninitialized = -1;
	bitmap = 1;
	metafile = 2;
	icon = 3;
	enhmetafile = 4;
}


 
/**intellisense(com.picture) 
load(__/*请输入文件路径*/) =  载入图像并返回IPicture对象\n返回值是一个COM对象
snap(.(窗口句柄,左坐标,顶坐标,宽,高) = 前台抓取窗口图象并返回IPicture对象 \n所有参数都是可选参数
snapClient(.(窗口句柄,左坐标,顶坐标,宽,高) = 前台抓取窗口客户区图像并返回IPicture对象 \n所有参数都是可选参数
printWindow(.(窗口句柄,左坐标,顶坐标,宽,高) = 后台抓取窗口图象并返回IPicture对象\n所有参数都是可选参数
printClient(.(窗口句柄,左坐标,顶坐标,宽,高) = 后台抓取窗口客户区图像并返回IPicture对象 \n所有参数都是可选参数
loadBitmap(__/*请输入文件路径*/) = 载入图像并返回位图句柄
fromBitmap(__/*位图句柄*/) = 自位置句柄返回IPicture对象
fromIcon(__/*图标句柄*/) = 从图标句柄返回IPicture对象
fromBitmap(__/*位图句柄*/,false) = 自位置句柄返回IPicture对象\n不负责销毁位图
fromIcon(__/*图标句柄*/,false) = 从图标句柄返回IPicture对象\n不负责销毁位图
IID_IPicture = IPicture IID;
end intellisense**/
 
/**intellisense()  
!ipicture.Handle = 位图句柄
!ipicture._isComPicture = 该值为真
!ipicture.Type = 图片类型\n参考com.picture.type成员
!ipicture.Save(__/*文件路径*/) = 保存图片到文件 
!ipicture.CopyHandle(.(宽度,高度) = 复制新的位图并返回位图句柄,位图类型(_IMAGE_BITMAP 或 _IMAGE_ICON)\n可选指定宽度、高度
com.picture.snap() = !ipicture.
com.picture.snapClient() = !ipicture.
com.picture.printWindow() = !ipicture.
com.picture.printClient() = !ipicture.
com.picture.load() = !ipicture.
com.picture.snap() = !ipicture.
com.picture.load() = !ipicture.
com.picture.fromBitmap() = !ipicture.
com.picture.fromIcon() = !ipicture.
end intellisense**/ 

/**intellisense()
_PICTYPE_UNINITIALIZED=@0xFFFFFFFF/*_PICTYPE_UNINITIALIZED*/
_PICTYPE_NONE=@0x0/*_PICTYPE_NONE*/
_PICTYPE_BITMAP=@0x1/*_PICTYPE_BITMAP*/
_PICTYPE_METAFILE=@0x2/*_PICTYPE_METAFILE*/
_PICTYPE_ICON=@0x3/*_PICTYPE_ICON*/
_PICTYPE_ENHMETAFILE=@0x4/*_PICTYPE_ENHMETAFILE*/
end intellisense**/