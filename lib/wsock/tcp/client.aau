//client 客户端
import wsock; 
import wsock.err;
namespace wsock.tcp

class client {

	ctor(bufferSize = 1024,hSocket){ 
		if(! ..wsock.open() ){ 
			error( ( ..wsock.err.lasterr() ),2 ) 
		}
		 
		if(!hSocket) hSocket= ..wsock.socket(0x2/*_AF_INET*/,0x1/*_SOCK_STREAM 建立流式套接口*/,0x6/*_IPPROTO_TCP*/ )
		if( hSocket = _INVALID_SOCKET ){ 
			wsock.close() //关闭wsock
			return null,wsock.err.lasterr();
		} 
		this._handle = hSocket; 
		this.bufferSize = bufferSize : 1024;
		
		..table.gc(this,"close"); 
	};
	asyncSelect = function(event,userMsgId,hwnd){
		var err = ..wsock.WSAAsyncSelect(hSocket : this.lastSelectSocket, hwnd : this.lastSelectHwnd
			,userMsgId === null ? this.lastSelectMessageId : userMsgId, event);
			 
		if( err == -1/*_SOCKET_ERROR*/ ) return false,err;
		 
		if(hSocket)this.lastSelectSocket = hSocket;
		if(userMsgId)this.lastSelectMessageId = userMsgId;
		if(hwnd)this.lastSelectHwnd = hwnd;
		return true;
	}; 
	bind = function(ip,port){
		var service = ..wsock.sockaddr_in( ip,port : 0 ); 
		service.sin_family = 0x2/*_AF_INET*/ 
		if ..wsock.bind( hSocket,service,..raw.sizeof(service)) =-1/*_SOCKET_ERROR*/	{ 
			return null, ..wsock.err.lasterr() ;
		} 
		return true;
	}; 
	connect = function(ip,port){
		if(!ip && port) error("请指定IP或端口地址",2);
		var service = ..wsock.sockaddr_in( ip,port );
		if(!service) return;
		service.sin_family = 0x2/*_AF_INET*/
		
		if ..wsock.connect( hSocket,service,..raw.sizeof(service)) =-1/*_SOCKET_ERROR*/	{  
			return null,"连接服务端失败"
		} 
		return true;
	};
	getSocketError = function(){
		var r,e = ..wsock.getsockoptByInt(hSocket, 0xFFFF/*_SOL_SOCKET*/, 0x1007/*_SO_ERROR*/,0,4);
		if( r != -1/*_SOCKET_ERROR*/ ) 	return e; 		
	};
	connectTimeout = function(ip,port,timeout){
		if(!ip && port) error("请指定IP或端口地址",2);
		if( !timeout ) return this.connect(ip,port); 
		
		var service = ..wsock.sockaddr_in( ip,port );
		if(!service) return;
		service.sin_family = 0x2/*_AF_INET*/
		
		..wsock.ioctlsocket(hSocket,0x8004667E/*_FIONBIO*/,1); 
		var states = ..wsock.connect(hSocket,service,..raw.sizeof(service)); 
		if( states == -1/*_SOCKET_ERROR*/){
			var connected;
			var writefds = ..wsock.fd_set().set(hSocket);  
			if( 0 < ..wsock.select(0,,writefds,,timeout )  ){
				connected = ( 0 == this.getSocketError() ); 
			}
			..wsock.ioctlsocket(hSocket,0x8004667E/*_FIONBIO*/,0);
			return connected;
		}
		return true; 
	}; 
	eachRead = function(sizeMax){
		var recvbuf,reads;
		return function(){
			var bufSize = this.bufferSize;
			if( sizeMax !==  null ){
				if( sizeMax < bufSize ){
					bufSize = sizeMax;
				}
				if(!bufSize) return;
			}
			
        	var reads,recvbuf = ..wsock.recv( hSocket,bufSize,bufSize,0);
        	if( reads>0 ) {   
				if(reads<bufSize){ 
					recvbuf = ..string.left(recvbuf,reads)
					return recvbuf,reads,sizeMax; //缓冲区没读满，也是读完了
				}
				if( sizeMax !== null  ) { 
					sizeMax -= bufSize;
					if( ! sizeMax ) return recvbuf,reads,0;
					if( sizeMax < bufSize ) bufSize = sizeMax; 
				}
				return recvbuf,reads,sizeMax
			}  
		} 
	}; 
	read = function(len){ 
		if( len === null ){
			var s =  this.readTo('\r\n');
			if(#s) return ..string.left(s,-3); 
			return; 
		}
		
		if( len[["_struct"]] ){
			var s = len;
			var l =  ..raw.sizeof(s);
			var r = this.read(l);
			if(r && #r == l ) return ..raw.convert(r,s);
			return;
		}
		if( len == -1) len = null;
		var tab = {}
		for(str,size in this.eachRead(len) ){ 
			..table.push(tab,str);
		} 
		return ..string.join(tab);
	};
	readTo = function(ends){  
		if( type(ends)!="string" || (!#ends) ) error("参数错误",2);
		var lends = #ends; 
		var bytes = {} 
		var recv = ..wsock.recv;
		var push = ..table.push;
		while( 
			var reads,byte ;
			reads,byte = recv( hSocket,1,1,0);
			reads > 0
		) {    
			push(bytes,byte); 
			if( byte == ends[[lends]]){ 
				var l = #bytes;
				for(i=lends-1;1;-1){ 
					if( ends[[i]] != bytes[l-lends + i ] ){ 
						continue 2;
					} 
				}
				..table.pop(bytes,lends);
				return ..string.join(bytes); 
			}  
		}
	}; 
	readAll = function(){
		var tab = {}
		for(str,size in this.eachRead() ){ 
			..table.push(tab,str);
		} 
		return ..string.join(tab);
	};
	readBuffer = function(buffer,l){
		var m = #buffer;
		if( !l ) l = m;
		elseif( l > m ) l = m;
		elseif( l < 0 ) return;
		var readSize = ::Ws2_32.recv( hSocket,buffer,l,0); 
		if(readSize>0) return readSize;
	}
	writeBuffer = function(str,len){;
		var max = #str; 
		if( !len )
			len = max;
		else 
			len = ..math.min(max,len); 
			
		var step = ..math.min(this.bufferSize,len );
		var safePtr = ..raw.convert( { pointer p = str } ,{ pointer p }).p; 
		
		for(pos=0;len;step){ 
			if( ..wsock.send( hSocket,topointer(safePtr,pos), pos+step <= len ? step : len % step ,0)==-1 ){  
				return null,"tcp客户端发送数据错误";
			}
		}; 
		
		return true;
	};
	write = function(s,...){
		var st = type(s);
		if( st != "string"  ){
			if( st == "number") s = tostring(s);
			elseif( s[["_struct"]]) s = ..raw.malloc(s); 
			else error("参数类型错误",2);
		}
				
		var r,e = this.writeBuffer( s );
		if( !... || !r ) return r,e;
		return this.write(...);
	};
	recv = function(size){
		size := 1024;
		var reads,recvbuf = ..wsock.recv( hSocket,size,size,0);
        if( reads>0 ) {   
			if(reads<size) recvbuf = ..string.left(recvbuf,reads);
			return recvbuf; 
		}  
	};
	send = function(s,len,flag){
		var bytes = ..wsock.send(hSocket,s,len : #s,flag : 0 );
		if( bytes == -1/*_SOCKET_ERROR*/ ) return null;
		return bytes;
	};
	setTimeouts = function(send=30000,receive=30000){
		return ( ..wsock.setsockoptByInt(hSocket,0xFFFF/*_SOL_SOCKET*/,0x1005/*_SO_SNDTIMEO*/,send,4) == 0 )
			&& ( ..wsock.setsockoptByInt(hSocket,0xFFFF/*_SOL_SOCKET*/,0x1006/*_SO_RCVTIMEO*/,receive,4)  == 0 ) 
	}; 
	getLocalIp = function(){ 
	    var addr = ..wsock.sockaddr_in();  
    	var addrLen = ..raw.sizeof(addr);  
    	if ( 0 == ..wsock.getsockname(hSocket, addr,addrLen))   {  
        	return tostring(addr.sin_addr),::Ws2_32.ntohs( addr.sin_port );  
    	}  
    };
    getRemoteIp = function(){ 
	    var addr = ..wsock.sockaddr_in();  
    	var addrLen = ..raw.sizeof(addr);  
    	if ( 0 == ..wsock.getpeername(hSocket, addr,addrLen))   {  
        	return tostring(addr.sin_addr),::Ws2_32.ntohs( addr.sin_port );  
    	}  
    };
    flush = function(){};
	close = function(){
		if( hSocket ){ 
			..wsock.closesocket(hSocket)
			..wsock.close();
			hSocket = null;
		}  
	}
}

/**intellisense()
wsock.tcp.client = TCP客户端支持库
wsock.tcp.client(.(缓冲区大小,套接字) = 创建TCP客户端,\n套接字为空则创建套接字,\n缓冲区大小为可选参数,默认为1KB
?.tcp.client = !stdtcpclient.
!stdtcpclient._handle = 套接字句柄
!stdtcpclient.getSocketError() = 获取并同时清除套接字错误代码
!stdtcpclient.connectTimeout(.(IP或域名,端口号,超时秒数) = 创建连接\n成功返回true
!stdtcpclient.bind(.(IP,端口) = 绑定IP端口
!stdtcpclient.connect(.(IP或域名,端口号) = 创建连接\n成功返回true
!stdtcpclient.eachRead = @for(str,readSize,remainSize in ??.eachRead(__/*可选指定最大长度*/) ){ 
	
} 
!stdtcpclient.readTo( = 读取直到以指定的字符串结束
!stdtcpclient.readTo(.('结束串') = 读取直到以指定的字符串结束,返回值不包含结束串,\n该函数每次仅读取一个字节,效率较低
!stdtcpclient.read(.(读取长度) = 读取数据\n参数可以指定长度,也可以使用接收数据的结构体作为参数\n参数为-1表示读到尾部,无参数表示读取一行,\n使用CRLF回车换行符分行
!stdtcpclient.readAll() =  接收全部数据\n该函数读取直至连接关闭,应慎用该函数防止服务器保持连接无法返回
!stdtcpclient.writeBuffer(.(数据,长度) = 发送数据,\n参数@1应为raw.malloc分配的内存数据,\n可选使用参数2指定长度\n成功返回true
!stdtcpclient.readBuffer(.(数据,长度) = 读取数据,\n参数@1应为raw.malloc分配的内存数据\n可选指定读取长度,成功返回读取长度,失败返回null
!stdtcpclient.write(.(->->->) = 发送数据,\n支持任意多个字符串参数\n成功返回true
!stdtcpclient.close() = 关闭TCP客户端\n如果未显式调用此函数\n在对象析构时,将会自动调用.
!stdtcpclient.setTimeouts(.(发送超时,接收超时) = 设置超时,以亳秒为单位(1秒为1000毫秒)
!stdtcpclient.getLocalIp() = 返回连接的本地IP,端口号
!stdtcpclient.getRemoteIp() = 返回连接的远程IP,端口号
!stdtcpclient.asyncSelect(.(event,userMsgId,hwnd) = 检测到由event参数指明的网络事件后,\n向hwnd指定句柄的窗口发送userMsgId消息,\n第二次调用此函数可省略句柄以及消息ID
!stdtcpclient.recv(.(size) = 单次接收数据包
!stdtcpclient.send(.(数据,长度) = 单次发送数据包
!stdtcpclient.flush() = 兼容aardio标准流接口
end intellisense**/