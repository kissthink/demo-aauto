//memory 全局堆内存
namespace raw;

class memory{
	ctor( size,defVal,flag = 0x42/*_GHND*/,gc){
		size = size + ( 16 - ( size % 16 )  ); //must be multiple of 16 bytes
		var m_hMem = ::GlobalAlloc(size,flag);
		var m_flag = flag;
		if(!m_hMem) return null,..lasterr()
		
		if( defVal ){
			var p = ::GlobalLock( m_hMem );
			if( defVal[["_struct"]] ){
				var len = ..raw.sizeof(defVal);
				::CopyMemoryByStruct(p,defVal,..math.min(len,size )  );
			}
			else {
				var len = #defVal;
				::CopyMemory(p,defVal,..math.min(len,size ) );
			}
				
			::GlobalUnlock( m_hMem )
		}
		
		if( gc ) ..table.gc(this,"free")
	};
	realloc = function(size,flag){
		size = size + ( 16 - ( size % 16 )  )
		
		if( flag === null ) 
			flag = m_flag;
		else 
			m_flag = flag;
			
		m_hMem = ::GlobalReAlloc( m_hMem,size,flag );
		
		if(!m_hMem) return null,..lasterr()
		return this;
	}
	lockPointer = function(){
		return ::GlobalLock( m_hMem );
	}
	unLockPointer = function(){
		return ::GlobalUnlock( m_hMem );
	}
	size  = function(){
		return ::GlobalSize( m_hMem );
	}
	free = function(){
		if(m_hMem){
			::GlobalFree( m_hMem )
			m_hMem = null;
		}
	} 
	@{ _topointer = m_hMem }
}

var memory = memory;
 
namespace memory{
	allocPointer = function(size,defVal,gc=true){
		return memory(size,defVal,0x40/*_GPTR*/,gc )
	}
	allocHandle = function(size,defVal,gc){
		return memory(size,defVal,0x42/*_GHND*/,gc )
	} 
}

/**intellisense(raw)
memory.allocPointer(.(内存大小,填充数据) = 分配内存并返回指针\n无需lock即可直接使用指针,\n可选使用结构体或字符串等指定默认填充数据\n可选使用参数3指定是否自动析构,默认值为true
memory.allocHandle(.(内存大小,填充数据) = 分配全局堆内存并返回句柄,\n可选使用结构体或字符串等指定默认填充数据
memory(.(内存大小,填充数据) = 分配全局堆内存并返回句柄,\n可选使用结构体或字符串等指定默认填充数据
memory.allocPointer() = !raw_memory.
memory.allocHandle() = !raw_memory.
memory() = !raw_memory.
end intellisense**/

/**intellisense(!raw_memory) 
realloc(.(内存大小) = 调整内存大小,\n内存指针只能缩小,而内存句柄可以任意调整大小
realloc() = !raw_memory.
lockPointer() = 返回可用内存指针
unLockPointer() = 释放内存指针
size() = 返回内存大小
free() = 释放内存
end intellisense**/