//graphics 画板对象
import gdip.bitmap;
namespace gdip 
 
class graphics {
	 
	ctor(arg){
		 
		if(type(arg)==type.pointer)
			this.pGraphics = gdip.assert2(gdip.CreateFromHDC(arg) );
		else{
			if(type(arg)!=type.table) {
				error("无效参数",2)
			}
			if(arg.hwnd){
				this.pGraphics = gdip.assert2(gdip.CreateFromHWND(arg.hwnd) );
				this._hwnd = arg.hwnd;
			}
			else if(arg.hdc) {
				this.pGraphics = gdip.assert2(gdip.CreateFromHDC(arg.hdc) );
				this._hdc = arg.hdc;
			}
			else if(arg.pImage) {
				this.pGraphics = gdip.assert2( gdip.GetImageGraphicsContext( arg.pImage ) ); 
				this._image = arg;
			}
		}
		
		if(!this.pGraphics) error("无效参数)",2) 
		 ..table.gc(this,"delete");	
	}
	 
	@_metaProperty//元表指向属性表
}
 

namespace graphics { 

	self.gdip = ..gdip;
	var gdip = gdip;
	
	fromHdc = function(hdc){
		return gdip.graphics( hdc = hdc ) 
	}
	
	fromHwnd = function(hwnd){
		return gdip.graphics( hwnd = hwnd ) 
	}
	
	fromImage = function(image){
		return gdip.graphics(image)	 
	}   
	
	_metaProperty = ..util.metaProperty(
	 
	 	interpolationMode = {
			_get = function(){ 
				return gdip.assert2( gdip.GetInterpolationMode(owner[["pGraphics"]], 0) ); 
			} 
			_set = function(v){ 
				gdip.assert2( gdip.SetInterpolationMode(owner[["pGraphics"]], v) ); 
			}  	
		}; 
	 	compositingQuality = {
			_get = function(){ 
				return gdip.assert2( gdip.GetCompositingQuality(owner[["pGraphics"]], 0) ); 
			} 
			_set = function(v){ 
				gdip.assert2( gdip.SetCompositingQuality(owner[["pGraphics"]], v) ); 
			}  	
		}; 
		smoothingMode = {
			_get = function(){ 
				return gdip.assert2( gdip.GetSmoothingMode(owner[["pGraphics"]], 0) ); 
			} 
			_set = function(v){ 
				gdip.assert2( gdip.SetSmoothingMode(owner[["pGraphics"]], v) ); 
			}  	
		}; 
		textRenderingHint = {
			_get = function(){ 
				return gdip.assert2( gdip.GetTextRenderingHint(owner[["pGraphics"]], 0) ); 
			} 
			_set = function(v){ 
				gdip.assert2( gdip.SetTextRenderingHint(owner[["pGraphics"]], v) ); 
			}  	
		};  
		clear = function(argb){
			gdip.assert2( gdip.GraphicsClear(owner[["pGraphics"]],argb) );
			return owner;
		};
		rotate = function(angle,order){
			gdip.assert2( gdip.RotateWorldTransform(owner[["pGraphics"]],angle,order) );
			return owner;
		};
		translate = function(dx,dy,order){
			gdip.assert2( gdip.TranslateWorldTransform(owner[["pGraphics"]],dx,dy,order) );
			return owner;
		};
		setClipRect = function(x, y,width,height,combineMd){
			gdip.assert2( gdip.SetClipRect(owner[["pGraphics"]],x, y,width,height,combineMd : 0/*_GdipCombineModeReplace*/ ) );
			return owner;
		};
		setClipPath = function(path,combineMd){
			if(!path[["pPath"]]) error("参数@1类型错误",2);
			gdip.assert2( gdip.SetClipPath(owner[["pGraphics"]],path[["pPath"]],combineMd : 0/*_GdipCombineModeReplace*/) );
			return owner;
		};
		resetClip = function(){
			gdip.assert2( gdip.ResetClip(owner[["pGraphics"]]) );
			return owner;
		};
		fillPath = function(brush, path){
			gdip.assert2( gdip.FillPath(owner[["pGraphics"]], brush, path) ); 
			return owner;
		} ;
		drawPath = function(pen, strPath){
			gdip.assert2( gdip.DrawPath(owner[["pGraphics"]], pen, strPath) ); 
			return owner;
		};
		measureString = function( str, thefont, layoutRect,stringFormat){ 
			var e,bound,codepoints,lines = gdip.MeasureString(owner[["pGraphics"]], ..string.toUnicode(str),-1, thefont, layoutRect,stringFormat,::RECTF(),0,0); 
			if(e) return null,..gdip.errMsg[e]
			return bound,codepoints,lines;
		};
		drawString = function( str, thefont, layoutRect,stringFormat,brush){
			gdip.assert2( gdip.DrawString(owner[["pGraphics"]], ..string.toUnicode(str),-1, thefont, layoutRect,stringFormat,brush) ); 
			return owner;
		}; 
		drawLine = function( pen,x1,y1,x2,y2){
			gdip.assert2( gdip.DrawLine(owner[["pGraphics"]], pen,x1,y1,x2,y2 ) ); 
			return owner;
		}; 
		drawRectangle = function( pen,x1,y1,width,height){
			gdip.assert2( gdip.DrawRectangle(owner[["pGraphics"]], pen,x1,y1,width,height) ); 
			return owner;
			return owner;
		}; 
		fillRectangle = function( brush,x1,y1,width,height){
			gdip.assert2( gdip.FillRectangle(owner[["pGraphics"]], brush,x1,y1,width,height) ); 
			return owner;
		}; 
		fillEllipse = function( brush,x1,y1,width,height){
			gdip.assert2( gdip.FillEllipse(owner[["pGraphics"]], brush,x1,y1,width,height) ); 
			return owner;
		};  
		drawImage = function( img,x1=0,y1=0 ){
			gdip.assert2( gdip.DrawImage(owner[["pGraphics"]], img,x1,y1) ); 
			return owner;
		}; 
		drawImageRect = function( img,x1,y1,width,height){
			gdip.assert2( gdip.DrawImageRect(owner[["pGraphics"]], img,x1,y1,width,height) ); 
			return owner;
		}; 
		drawImageRectRect = function( img ,dstX,dstY,dstWidth,dstHeight,srcx,srcy,srcwidth,srcheight,srcUnit=2/*UnitPixel*/,imageAttributes,callback,callbackData){
			gdip.assert2( gdip.DrawImageRectRect(owner[["pGraphics"]], img,dstX,dstY,dstWidth,dstHeight,srcx,srcy,srcwidth,srcheight,srcUnit,imageAttributes ,callback,callbackData) ); 
			return owner;
		} ; 
		drawImagePointRect = function( img ,dstX,dstY,srcx,srcy,srcwidth,srcheight,srcUnit=2/*UnitPixel*/){
			gdip.assert2( gdip.DrawImagePointRect(owner[["pGraphics"]], img ,dstX,dstY,srcx,srcy,srcwidth,srcheight,srcUnit  ) ); 
			return owner;
		};  
		drawImageStrech = function( img,rc ){
			gdip.DrawImageRect(owner[["pGraphics"]],img, rc.left, rc.top, rc.right-rc.left, rc.bottom-rc.top);
			return owner;
		};
		drawImageScale = function( img,rc ){
			var pImg = img[["pImage"]];
			if( !pImg ) error("参数@1类型错误",2);
			
			var cxSrc = img.width;
			var cySrc = img.height; 
			var cxDst,cyDst = rc.right - rc.left,rc.bottom-rc.top; 
			var w,h = cxDst,cyDst; 
			if ( cxDst / cxSrc < cyDst / cySrc ) {
				h = cxDst * cySrc / cxSrc;
			}
			else {
				w = cyDst * cxSrc / cySrc;
			}
			
			gdip.DrawImageRect(owner[["pGraphics"]],pImg, rc.left + ( ( cxDst - w ) /2 ) , rc.top+ ( (cyDst - h) /2 ), w, h);
			return owner;
		};
		drawImageCenter = function( img,rc ){ 
			var pImg = img[["pImage"]];
			if( !pImg ) error("参数@1类型错误",2); 
			
			var x,y,xDst,yDst = 0,0,rc.left,rc.top;
			var cx,cy = rc.right - rc.left,rc.bottom-rc.top;  
			var cxSrc,cySrc = img.width,img.height; 
 
			if( cxSrc > cx ){
				x = ( cxSrc - cx  ) /2; 
				cxSrc = cx;
			}
			else {
				xDst = xDst + ( cx - cxSrc ) /2 ; 
			}
			if( cySrc > cy ){
				y = ( cySrc - cy  ) /2;
				cySrc = cy;
			}
			else {
				yDst = yDst + ( cy - cySrc ) /2 ; 
			} 

			gdip.DrawImageRectRect( owner[["pGraphics"]], pImg, xDst,yDst,cxSrc,cySrc,x,y,cxSrc,cySrc, 2); 
			return owner;
		};
		drawBitmapTile = function( bmp,rc ){ 
			var pBmp = bmp[["pBitmap"]];
			if( !pBmp ) error("参数@1类型错误",2); 
			var pGrp = owner[["pGraphics"]];
			
			var e,cache = gdip.CreateCachedBitmap(pBmp,pGrp);
			if( e ) return null,gdip.errMsg[e];
			
			var cx,cy = rc.right - rc.left,rc.bottom-rc.top;  
			var cxSrc,cySrc = bmp.width,bmp.height; 
			
			owner.setClipRect(rc.left,rc.top,cx,cy,1/*_GdipCombineModeIntersect*/)
			var draw = gdip.DrawCachedBitmap;
			for(x=rc.left;rc.right;cxSrc){ 
				for(y=rc.top;rc.bottom;cySrc){  
					draw(pGrp,cache,x,y);
				}
			} 
			gdip.DeleteCachedBitmap(cache)
			owner.resetClip();
			return owner;
		}; 
		drawBitmapRepeatX = function( bmp,rc,t,r,b,l ){ 
			var pBmp = bmp[["pBitmap"]];
			if( !pBmp ) error("参数@1类型错误",2); 
			var pGrp = owner[["pGraphics"]];
			
			var e,cache = gdip.CreateCachedBitmap(pBmp,pGrp);
			if( e ) return null,gdip.errMsg[e]; 
		  	
		  	var cxSrc,cySrc = bmp.width,bmp.height; 
			if(r) { rc.right = rc.right - r };
			if(l) rc.left =  rc.left + l; 
			if(b) { rc.bottom = rc.bottom - b; rc.top = rc.bottom - cySrc; }
			else if(t) rc.top = rc.top + t; 
			
			var cx,cy = rc.right - rc.left,rc.bottom-rc.top;   
			owner.setClipRect(rc.left,rc.top,cx,cy,1/*_GdipCombineModeIntersect*/)
			var draw = gdip.DrawCachedBitmap;
			
			var y = rc.top;
			for(x=rc.left;rc.right;cxSrc){ 
				draw(pGrp,cache,x,y);
			} 
			gdip.DeleteCachedBitmap(cache)
			owner.resetClip();
			return owner;
		};
		drawBitmapRepeatY = function( bmp,rc,t,r,b,l ){ 
			var pBmp = bmp[["pBitmap"]];
			if( !pBmp ) error("参数@1类型错误",2); 
			var pGrp = owner[["pGraphics"]];
			
			var e,cache = gdip.CreateCachedBitmap(pBmp,pGrp);
			if( e ) return null,gdip.errMsg[e];
			 
			var cxSrc,cySrc = bmp.width,bmp.height; 
			if(r) { rc.right = rc.right - r; rc.left = rc.right - cxSrc; }
			else if(l) rc.left =  rc.left + l;
			if(b) { rc.bottom = rc.bottom - b; }
			if(t) rc.top = rc.top + t;
						
			var cx,cy = rc.right - rc.left,rc.bottom-rc.top; 
			//
			owner.setClipRect(rc.left,rc.top,cx,cy,1/*_GdipCombineModeIntersect*/)
			var draw = gdip.DrawCachedBitmap;
			
			var x = rc.left;
			for(y=rc.top;rc.bottom;cySrc){  
				draw(pGrp,cache,x,y);
			}
			gdip.DeleteCachedBitmap(cache)
			owner.resetClip();
			return owner;
		};
		drawImagePoint= function( bmp,rc,x=0,y=0){
			var pGrp = owner[["pGraphics"]];
			var pBmp = bmp[["pImage"]];
			if( !pBmp ) error("参数@1类型错误",2); 
			var cxSrc = bmp.width;
			var cySrc = bmp.height;
			var width = rc.right - rc.left;
			var height = rc.bottom - rc.top;
			if( x <= 1 ){ if( x > 0 ) { x = ( width - cxSrc ) * x } elseif(x<0) { x = ( width - cxSrc ) +x } };
			if( y <= 1 ){ if( y > 0 ){ y = ( height - cySrc ) * y } elseif(y<0) { y = ( height - cySrc ) + y  } };

			gdip.DrawImageRect(pGrp,pBmp,rc.left+x,rc.top+y,cxSrc,cySrc);
			return owner;
		}
		drawImageExpand = function(img,rc,t,r,b,l){
			var pGrp = owner[["pGraphics"]];
			var pImg = img[["pImage"]]; if(!pImg) error("参数@1类型错误",2) 
			var left,top,right,bottom = rc.left,rc.top,rc.right,rc.bottom;  
			var width = right - left;
			var height = bottom - top; 
			 
			if( r + t + b + l == 0 ){ 
				gdip.DrawImageRect(pGrp,pImg, left, top, width, height);
				return owner;
			}
			var cxSrc = img.width;
			var cySrc = img.height;
			var mCySrc = cySrc-t-b;
			var mCxSrc = cxSrc-l-r;
			var mCy = height-t-b;
			var mCx = width-l-r;
			
			//var draw = gdip.DrawImagePointRect;
			var stretch = gdip.DrawImageRectRect; 
			stretch(pGrp, pImg ,left,top,l,t,0,0,l,t,2/*UnitPixel*/);
			stretch(pGrp, pImg ,left,bottom-b,l,b,0,cySrc-b,l,b,2/*UnitPixel*/); 
			stretch(pGrp, pImg ,right - r,top,r,t,cxSrc - r,0,r,t,2/*UnitPixel*/); 
			stretch(pGrp, pImg ,right - r,bottom-b,r,b,cxSrc - r,cySrc-b,r,b,2/*UnitPixel*/); 
			stretch(pGrp, pImg ,left + l ,top, mCx,t,l,0,mCxSrc,t,2/*UnitPixel*/); 
			stretch(pGrp, pImg ,left + l ,bottom-b, mCx,b,l,cySrc-b,mCxSrc,b,2/*UnitPixel*/); 
			stretch(pGrp, pImg ,left,top+t,l,mCy,0,t,l,mCySrc,2/*UnitPixel*/); 
			stretch(pGrp, pImg ,right-r,top+t,r,mCy,cxSrc-r,t,r,mCySrc,2/*UnitPixel*/); 
			stretch(pGrp, pImg ,left + l,top+t,mCx,mCy,l,t,mCxSrc,mCySrc,2/*UnitPixel*/);
			return owner;
		};
		drawBackground = function(img,mode,rc,t,r,b,l){
			if(!img[["pImage"]]) error("参数@1类型错误",2)  
 
			select ( mode ) { 
				case "expand" { 
					owner.drawImageExpand(img,rc,t,r,b,l );
				}
				case "scale" { 
					owner.drawImageScale(img,rc );
				}
				case "strech" {
					owner.drawImageStrech(img,rc );
				}
				case "center" {
					owner.drawImageCenter(img,rc );
				}
				case "tile" {
					owner.drawBitmapTile(img,rc );
				}  
				case "repeat-x" { 
					owner.drawBitmapRepeatX(img,rc,t,r,b,l );
				}
				case "repeat-y" {
					owner.drawBitmapRepeatY(img,rc,t,r,b,l );
				} 
			} 
			return owner; 
		}; 
		createCachedBitmap = function(bmp){
			var pBmp = bmp[["pBitmap"]]; 
			var e,cache = gdip.CreateCachedBitmap(bmp,owner[["pGraphics"]]);
			if( e ) return null,gdip.errMsg[e];
			return cache;
		};
		drawCachedBitmap = function(cache,x=0,y=0){ 
			var e,cache = gdip.DrawCachedBitmap(owner[["pGraphics"]],cache,x,y);
			if( e ) return null,gdip.errMsg[e];
			return true;
		};
		deleteCachedBitmap = function(cache){ 
			var e,cache = gdip.DeleteCachedBitmap(cache);
			if( e ) return null,gdip.errMsg[e];
			return true;
		};
		fastDrawBitmap = function(bmp,x=0,y=0){
			var pGrp = owner[["pGraphics"]]
			var pBmp = bmp[["pBitmap"]]; 
			if(!pBmp) error("位图参数@1类型错误",2);
			var e,cache = gdip.CreateCachedBitmap(pBmp,pGrp);
			if( e ) return null,gdip.errMsg[e];
			gdip.DrawCachedBitmap(pGrp,cache,x,y);
			gdip.DeleteCachedBitmap(cache);
			return owner;
		}; 
		drawCurve = function(pen,...){
			var points = { ... }; 
			gdip.assert2( gdip.DrawCurve(owner[["pGraphics"]], pen ,{ float points[] = points },#points/2  ) ); 
			return owner;
		} ;
		setInterpolationMode = function( interpolation){
			gdip.assert2( gdip.SetInterpolationMode(owner[["pGraphics"]], interpolation) );
			return owner;
		};
		save = function(){
			owner.lastSaveState = gdip.assert2( gdip.SaveGraphics(owner[["pGraphics"]], 0) ); 
			return owner.lastSaveState;
		};
		restore = function( state ){
			gdip.assert2( gdip.RestoreGraphics(owner[["pGraphics"]], state : owner.lastSaveState  ) );
			return owner;
		};
		getDc = function(){
			var e,hdc = gdip.GetDC( owner[["pGraphics"]] );
			if( e ) return null,gdip.errMsg[e];
			return hdc;
		}; 
		releaseDc = function(hdc){
			gdip.ReleaseDC(owner[["pGraphics"]],hdc);
			if( e ) return null,gdip.errMsg[e];
			return true;
		}; 
		getDpi = function(){
			var pGrp = owner[["pGraphics"]] ;
			var e,x = GetDpiX(pGrp,0);
			var e,y = GetDpiX(pGrp,0);
			return x,y;
		};
		delete = function(){
			if( owner[["pGraphics"]] ){
				gdip.DeleteGraphics(owner[["pGraphics"]])
				owner[["pGraphics"]] = null;//让其他的函数都用不了 
			}
		};  
		//自动转换为API指针
		_topointer = function(){
			return owner[["pGraphics"]];
		} ;
	)   
} 

var $ = _dll; 
self.GetDC = $.api("GdipGetDC","int(PTR grph,pointer& hDC)")
self.ReleaseDC = $.api("GdipReleaseDC","int(PTR grph,POINTER hDc)")
self.FillPath = $.api("GdipFillPath","int(PTR grph,pointer Brush,pointer Path)")

/*intellisense(gdip)*/ 
CreateFromHDC = $.api("GdipCreateFromHDC","int(POINTER hDc,ptr& grph)")
CreateFromHWND = $.api("GdipCreateFromHWND","int(addr hwnd,ptr& grph)")
GetImageGraphicsContext = $.api("GdipGetImageGraphicsContext","int(PTR img,ptr& grph)")
DeleteGraphics = $.api("GdipDeleteGraphics","int(PTR grph)")
GraphicsClear = $.api("GdipGraphicsClear","int(PTR grph,int lColor)") 
SetCompositingQuality = $.api("GdipSetCompositingQuality","int(PTR grph,int q)")
GetCompositingQuality = $.api("GdipGetCompositingQuality","int(PTR grph,int& q)")
GetInterpolationMode = $.api("GdipGetInterpolationMode","int(PTR grph,int& m)") 
SetInterpolationMode = $.api("GdipSetInterpolationMode","int(PTR grph,int& m)") 
SetSmoothingMode = $.api("GdipSetSmoothingMode","int(PTR grph,int m)")
GetSmoothingMode = $.api("GdipGetSmoothingMode","int(PTR grph,struct& m)")
SetTextRenderingHint = $.api("GdipSetTextRenderingHint","int(PTR grph,int Mode)")
GetTextRenderingHint = $.api("GdipGetTextRenderingHint","int(PTR grph,struct& Mode)")
DrawLine = $.api("GdipDrawLine","int(PTR grph,pointer pen,float x1,float y1,float x2,float y2)") 
DrawRectangle = $.api("GdipDrawRectangle","int(PTR grph,pointer pen,float x,float y,float Width,float Height)")
SetInterpolationMode = $.api("GdipSetInterpolationMode","int(PTR grph,int interpolation)")
SetClipRect = $.api("GdipSetClipRect","int(PTR grph,float x,float y,float Width,float Height,int CombineMd)")
SetClipPath = $.api("GdipSetClipPath","int(PTR grph,pointer Path,int CombineMd)")
ResetClip = $.api("GdipResetClip","int(PTR grph)") 
SaveGraphics = $.api("GdipSaveGraphics","int(PTR grph,int& state)")
RestoreGraphics = $.api("GdipRestoreGraphics","int(PTR grph,int state)")
FillRectangle = $.api("GdipFillRectangle","int(PTR grph,pointer Brush,float x,float y,float Width,float Height)")
FillEllipse = $.api("GdipFillEllipse","int(PTR grph,pointer Brush,float x,float y,float Width,float Height)")
DrawCurve = $.api("GdipDrawCurve","int(PTR grph,pointer pen,struct  Points,int count)")
DrawImage = $.api("GdipDrawImage","int(PTR grph,pointer img,float x,float y)")
DrawImageRect = $.api("GdipDrawImageRect","int(PTR grph,pointer img,float x,float y,float Width,float Height)")
DrawImagePointRect = $.api("GdipDrawImagePointRect","int(PTR grph,pointer img,float x,float y,float srcx,float srcy,float srcwidth,float srcheight,int srcUnit)")
DrawImageRectRect = $.api("GdipDrawImageRectRect","int(PTR grph,pointer img,float dstX,float dstY,float dstWidth,float dstHeight,float srcx,float srcy,float srcwidth,float srcheight,int srcUnit,pointer imgattr ,pointer callback,pointer callbackData )")
CreateCachedBitmap = $.api("GdipCreateCachedBitmap","int(POINTER Bitmap,pointer Graphics,pointer& cacheBmp)")
DeleteCachedBitmap = $.api("GdipDeleteCachedBitmap","int(POINTER cacheBmp)")
DrawCachedBitmap = $.api("GdipDrawCachedBitmap","int(PTR grph,PTR cacheBmp,int x,int y)")
MeasureString = $.api("GdipMeasureString","int(PTR grph,string str,int len,pointer thefont,struct layoutRect,ptr strFmt,struct& boundingBox,int& codepoints,int& lines)")
DrawString = $.api("GdipDrawString","int(PTR grph,string str,int len,pointer thefont,struct layoutRect,ptr strFmt,pointer Brush)")
DrawPath = $.api("GdipDrawPath","int(PTR grph,pointer pen,pointer Path)")
RotateWorldTransform = $.api("GdipRotateWorldTransform","int(PTR grph,float angle,int order)")
TranslateWorldTransform = $.api("GdipTranslateWorldTransform","int(PTR grph,float dx,float dy,int order)")
GetDpiX = $.api("GdipGetDpiX","int(PTR grph,float& dpi)")
GetDpiY = $.api("GdipGetDpiY","int(PTR grph,float& dpi)")
/*end intellisense*/

/**intellisense() 
gdip.graphics.fromHwnd() = 使用指定的窗口创建画板
gdip.graphics.fromImage() = 使用gdip.image对象创建画板
gdip.graphics(.(hdc) =  使用GDI设备句柄创建画板
gdip.graphics(.(winform) = 使用窗口或控件对象创建画板
gdip.graphics(.(image) = 使用gdip.image对象创建画板
gdip.graphics(.(bitmap) = 使用gdip.bitmap对象创建画板
!gdipgraphics.compositingQuality = @.compositingQuality = _GdipCompositingQuality__ ;
!gdipgraphics.interpolationMode = @.interpolationMode = _GdipInterpolationMode__ ;
!gdipgraphics.smoothingMode = @.smoothingMode = _GdipSmoothingMode__ ;
!gdipgraphics.width = 宽度
!gdipgraphics._image = 创建画板时使用的gdip.image对象\n!gdipimage.
!gdipgraphics._hwnd = 创建画板时使用的句柄
!gdipgraphics._bitmap = 创建画板时使用的gdip.bitmap对象\n!gdipbitmap.
!gdipgraphics._hdc = 创建画板时使用的设备上下文 
gdip.graphics() = !gdipgraphics.
gdip.graphics.fromHwnd() = !gdipgraphics.
gdip.graphics.fromImage() = !gdipgraphics.
!gdipgraphics.getDpi() = 返回设备DPI\n默认为96,96
!gdipgraphics.restore(__/*状态索引*) = 恢复到指定状态,\n状态索引值由save()函数的返回值获得\n不指定参数则撤消最近一次存储状态
!gdipgraphics.save() = 存储状态,并返回状态索引( 可作为restore()函数的参数 )
!gdipgraphics.delete() = 释放图像\n此对象支持自动释放,不必手工调用此函数\n!gdipgraphics.
!gdipgraphics.setClipRect(.(左,上,右,下,选项) = 设置一块剪辑区域(限制绘图区块)\n选项默认为 _GdipCombineModeReplace
!gdipgraphics.setClipPath(.(路径对象,选项 = 设置剪切路径\n选项默认为 _GdipCombineModeReplace
!gdipgraphics.resetClip() = 取消剪辑 \n!gdipgraphics.
!gdipgraphics.setInterpolationMode() = !gdipgraphics.
!gdipgraphics.rotate() = !gdipgraphics.
!gdipgraphics.translate() = !gdipgraphics.
!gdipgraphics.setClipRect() = !gdipgraphics.
!gdipgraphics.setClipPath() = !gdipgraphics.
!gdipgraphics.drawImage() = !gdipgraphics.
!gdipgraphics.drawImageRect() = !gdipgraphics.
!gdipgraphics.drawImageRectRect() = !gdipgraphics.
!gdipgraphics.drawImagePointRect() = !gdipgraphics.
!gdipgraphics.drawImageScale() = !gdipgraphics.
!gdipgraphics.drawImageStrech() = !gdipgraphics.
!gdipgraphics.drawImageCenter() = !gdipgraphics.
!gdipgraphics.drawBitmapTile() = !gdipgraphics.
!gdipgraphics.drawImagePoint() = !gdipgraphics.
!gdipgraphics.drawImageExpand() = !gdipgraphics.
!gdipgraphics.drawBitmapRepeatY() = !gdipgraphics.
!gdipgraphics.drawBitmapRepeatX() = !gdipgraphics.
!gdipgraphics.clear() = !gdipgraphics.
!gdipgraphics.fillPath() = !gdipgraphics.
!gdipgraphics.drawPath() = !gdipgraphics. 
!gdipgraphics.drawString() = !gdipgraphics.
!gdipgraphics.drawLine() = !gdipgraphics.
!gdipgraphics.measureString() = !rectf.
!gdipgraphics.drawRectangle() = !gdipgraphics.
!gdipgraphics.fillRectangle() = !gdipgraphics.
!gdipgraphics.fillEllipse() = !gdipgraphics.
!gdipgraphics.drawBackground() = !gdipgraphics.
!gdipgraphics.fastDrawBitmap() = !gdipgraphics.
!gdipgraphics.setInterpolationMode(__/*请输入参数*/) = 设置图像缩放时的插值模式
!gdipgraphics.createCachedBitmap(.(位图对象) = 创建缓存位图
!gdipgraphics.drawCachedBitmap(.(缓存位图,x,y) = 输出缓存位图
!gdipgraphics.deleteCachedBitmap(.(缓存位图) = 删除缓存位图
!gdipgraphics.fastDrawBitmap(.(位图对象,x,y) = 快速绘图\nx,y为可选参数,默认为0\n返回自身
!gdipgraphics.rotate(10, _GdipMatrix__ ) = 旋转画布 
!gdipgraphics.translate( 水平偏移, 垂直偏移, _GdipMatrix__) = 平移画布 
!gdipgraphics.setClipRect( 左, 上, 宽, 高, _GdipCombineMode__) = 设置一块剪辑区域(限制绘图区块)
!gdipgraphics.drawImage(.(图像,左,上) = 普通画图\n注意该函数会受PNG,JPG的DPI设置影响输出大小
!gdipgraphics.drawImageRect(.(图像,左,上,宽,高) = 画图
!gdipgraphics.drawImageRectRect(.(图像, 输出左,输出上,输出宽,输出高,左,上,宽,高 ) = 将图像的找定区块输出到指定区块
!gdipgraphics.drawImagePointRect(.(图像, 输出左,输出上,左,上,宽,高 ) = 将图像的找定区块输出到指定坐标\n注意该函数会受PNG,JPG的DPI设置影响输出大小
!gdipgraphics.drawImageScale(.(图像,RECT区块) = 绘图\n保持比例缩放到合适大小
!gdipgraphics.drawImageStrech(.(图像,RECT区块) = 绘图\n拉伸图片到区块大小
!gdipgraphics.drawImageCenter(.(图像,RECT区块) = 绘图\n保持图片大小并绝对居中显示
!gdipgraphics.drawBitmapTile(.(图像,RECT区块) = 绘图\n重复平铺显示\n注意该函数会在执行时设置裁剪区域\n执行完重置裁剪区域
!gdipgraphics.drawImagePoint(.(图像,RECT区块,x,y) = 绘图\nx,y指定偏移坐标\n如果为0到1之间的值则为剩余空间百分比\n如果为负数则为右下角坐标
!gdipgraphics.drawBitmapRepeatY(.(图像,绘图RECT,上,右,下,左) = 垂直平铺\n参数@1 为gdip.bitmap对象\n最后的四个参数指定坐标\n如果指定了右坐标则忽略左坐标,\n如果指定了下坐标则忽略上坐标
!gdipgraphics.drawBitmapRepeatX(.(图像,绘图RECT,上,右,下,左) = 水平平铺\n参数@1 为gdip.bitmap对象\n最后的四个参数指定坐标\n如果指定了右坐标则忽略左坐标,\n如果指定了下坐标则忽略上坐标
!gdipgraphics.drawImageExpand( = 九宫格绘图,九宫格切图后边角四格固定,中间五格拉伸\n该函数不会严格检查参数、并忽略执行错误,调用该函数前必须保证参数正确
!gdipgraphics.drawImageExpand(.(图像,绘图RECT,上,右,下,左) = 参数@1 为gdip.image或gdip.bitmap对象\n最后的四个参数为九宫格切图坐标
!gdipgraphics.drawBackground( = 画背景图
!gdipgraphics.drawBackground(.(位图对象,模式,绘图RECT,上,右,下,左) = 支持模式expand,strech,center,scale,tile,repeat-x,repeat-y\n该函数不检查参数正确性,调用者有责任保证参数正确\n函数返回自身
!gdipgraphics.drawCurve(.(画笔,任意个坐标数值参数) = 画曲线\n可添加任意个成对的数值参数指定曲线经过的坐标点
!gdipgraphics.clear(0xFFFFFFFF__) = 用指定的颜色清空画板 
!gdipgraphics.fillPath(.(brush,path) = 填充路径  
!gdipgraphics.drawPath(.(pen,path) = 画路径 
!gdipgraphics.measureString(.(str, thefont, layoutRect,stringFormat,brush) = 计算输出文本区块\n返回boundingBox,codepointsFitted,linesFilled 
!gdipgraphics.drawString(.(str, thefont, layoutRect,stringFormat,brush) = 输出文本
!gdipgraphics.drawLine(.(pen,x1,y1,x2,y2) = 画线
!gdipgraphics.drawRectangle(.(pen,x1,y1,width,height) = 画方块
!gdipgraphics.fillRectangle(.(brush,x1,y1,width,height) = 填充方块 
!gdipgraphics.fillEllipse(.(brush,x1,y1,width,height) = 画圆形、或椭圆 
!gdipgraphics.getDc() = 返回GDI兼容设备句柄\n注意返回的句柄一定要调用releaseDc函数释放
!gdipgraphics.releaseDc(__/*hdc*/) = 释放GDI兼容设备句柄
end intellisense**/