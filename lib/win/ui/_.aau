//默认库(..win.form)
import gdi; 
import win.ui.background;
namespace win;   

class form {  
 
	ctor( tParam ) begin   
	    this.hInstance = _HINSTANSE; 
	    this._mapCommandProc = { freeId = tParam.freeId : 5000 };
        this._ctrlId = {};//控件ID映射关系
        this._ctrlHwnd = {};//控件句柄映射关系  
        this._ctrlAutoResize = {};//自动调整位置 
	    this._tTimeProc = {};
	    this._tTimeProcEntered = {};
	    this._tTimeTicks = { allocId = 1;freeId={} }; 
	    this.isDialogMessage = ..win.isDialogMessage;
	    
	    if( tParam.left === null)
			tParam.left = -1;
		if( tParam.top === null)
			tParam.top = -1; 
		
		var x = tParam.left ;
		var y = tParam.top ; 
		var cx,cy = 0,0;
		if( tParam.right &&  tParam.bottom ){
			cx = tParam.right - x;
			cy = tParam.bottom - y;   
			this._defClientRect = ::RECT( 0, 0, cx, cy);
		}  
		
		//不允许自定义控件重写的属性,请写在这段代码前面，例如cls
		if( tParam.tParam ){
			for(k,v in tParam.tParam){ 
				if(tParam[k]===null){ 
					tParam[k] = v; 
				}
			} 
		}
		else {
			tParam.id = 0;
		}
		tParam.exstyle := 0 
		tParam.style := 0
		 
		select( tParam.exmode ) { 
			case "toolwindow" { 
				tParam.exstyle |= 0x80/*_WS_EX_TOOLWINDOW*/;
			}
			case "none" {
				tParam.exstyle |= 0;
			} 
			else {
				tParam.exstyle |= 0x40000/*_WS_EX_APPWINDOW*/;
			};
		}
		
		if(tParam.composited) 
		    tParam.exstyle |= 0x2000000/*_WS_EX_COMPOSITED*/
		    
		if(tParam.acceptfiles) 
		    tParam.exstyle |= 0x10/*_WS_EX_ACCEPTFILES*/
		    
		if(tParam.frame)
		    tParam.exstyle |= 0x1/*_WS_EX_DLGMODALFRAME*/
		    
		if(tParam.cp)
		    tParam.exstyle |= 0x10000/*_WS_EX_CONTROLPARENT*/ 
        
        if(tParam.topmost) 
        	tParam.exstyle |= 0x8/*_WS_EX_TOPMOST*/
	
		select( tParam.mode ) { 
			case "child" {
				tParam.style |= 0x40000000/*_WS_CHILD*/  
			}
			case "popup" {
				tParam.style |= 0x80000000/*_WS_POPUP*/ ; 
			}  
			else  {
				tParam.style |= 0x0/*_WS_OVERLAPPED*/;
			}
		
		}  
		
		if(! (#(tParam.text)) ){
        	tParam.title = false;
        }
        
        if(tParam.title === false ) 
        	tParam.style := 0x80000000/*_WS_POPUP*/
     
        var cyborder = ::GetSystemMetrics( 0x6/*_SM_CYBORDER*/ );
		var cxborder = ::GetSystemMetrics( 0x5/*_SM_CXBORDER*/ );
		var cycaption = ::GetSystemMetrics( 0x4/*_SM_CYCAPTION*/  ) ;
        var deltitle =  ~0xC00000/*_WS_CAPTION*/;
		select( tParam.border ) { 
			case "dialog frame"{
				tParam.style |= 0x400000/*_WS_DLGFRAME*/;
				deltitle = ~0x800000/*_WS_BORDER*/; 
			}
			case "thin" {
				tParam.style |= 0x800000/*_WS_BORDER*/;
				deltitle = ~0x400000/*_WS_DLGFRAME*/; 
			}
			case "none" {
				//无边框窗口
				//取消默认的 0x0/*_WS_OVERLAPPED* 样式
				tParam.style :=   0x80000000/*_WS_POPUP*/
				tParam.style &= ~ 0x800000/*_WS_BORDER*/;
				
				tParam.title = false;
			} 
			else {
				tParam.style |= 0x40000/*_WS_SIZEBOX*/; 
			}
		} 
		
		if(tParam.title===false) {
			tParam.style &= deltitle //避免去掉标题栏时覆盖了边框设置
        	cycaption = 0; //如果没有标题栏,则要去掉标题栏的高度 
        }	
        else{ 
        	tParam.style |= 0xC00000/*_WS_CAPTION*/ 
        }  

        if(tParam.max!==false) 
        	tParam.style |= 0x10000/*_WS_MAXIMIZEBOX*/ 
        else
        	tParam.style &= ~0x10000/*_WS_MAXIMIZEBOX*/ 
        	
        if(tParam.min!==false) 
        	tParam.style |= 0x20000/*_WS_MINIMIZEBOX*/ 
        else
        	tParam.style &= ~0x20000/*_WS_MINIMIZEBOX*/ 
        	
        	
        if(tParam.sysmenu!==false) {
        	tParam.style |= 0x80000/*_WS_SYSMENU*/
        }
        else {
        	tParam.style &= ~0x80000/*_WS_SYSMENU*/
        } 
        
        if( tParam.maxmize  ){
    		tParam.style |= 0x1000000/*_WS_MAXIMIZE*/;
    	}
    	if( tParam.minmize  ){
    		tParam.style |= 0x20000000/*_WS_MINIMIZE*/
    	}  
    	
    	if( tParam.clipch ){
    		tParam.style |=  0x2000000/*_WS_CLIPCHILDREN*/;
    	}
    	 
        this@ = _metaProperty; 
	 
	    if( tParam[["hwnd"]] || tParam[["createWindowEx"]] ){
	    	this.hwnd = tParam[["hwnd"]] 
	    	if( !this.hwnd ){
	    		this.hwnd = tParam[["createWindowEx"]](tParam.exstyle,tParam.className,tParam.text,tParam.style ,
				x,y,cx,cy,tParam.parent,tParam.id/*menu*/, _HINSTANSE );
	    	}
	    	
	    	if( !this.hwnd ) return;
	    	if(!this._defClientRect){ 
	    		this._defClientRect = ..win.getClientRect(tParam.hwnd) ; 
	    	};
	    	
	    	this._defWindowProc = function(hwnd, message, wParam , lParam){
	    		return ::CallWindowProc(this._wndproc_c_prev, hwnd, message, wParam , lParam);
	    	}   
	    }
	    else{   
			if( ! tParam.className ){
				tParam.cls := "AAU_FORM" 
				tParam.className = ..win.registerFormClass( tParam.cls );
				if( !  tParam.className ){
					error("注册窗口类失败",2);
				};
					 
				this._defWindowProc = ::DefWindowProc;
			}
			else { 
				if( tParam.cls ){
					tParam.className = ..win.registerFormClass( tParam.cls,,tParam.className );
					if( !tParam.className ){
						error("注册窗口类失败",2);
					}
				}
				
				this._defWindowProc = function(hwnd, message, wParam , lParam){
	    			return ::CallWindowProc(this._wndproc_c_prev, hwnd, message, wParam , lParam);
	    		}  
			}
		 	 
        	if( tParam.bkLeft != null ){
        		this.bkLeft = tParam.bkLeft;
        		this.bkRight = tParam.bkRight;
        		this.bkTop = tParam.bkTop;
        		this.bkBottom= tParam.bkBottom;
        	}
        	
			if( ( type( tParam.parent) == "table" )   ){
				this.parent = tParam.parent;
				tParam.parent = tParam.parent.hwnd; 
			} 
			
			if( type( tParam.parent ) != "number" )
		    	tParam.parent = 0;  
	 		 
			var rcWnd = ::RECT(x, y, x+cx , y+cy );
			::User32.AdjustWindowRectEx(rcWnd, tParam.style, 0, tParam.exstyle); //client to window
			cx = rcWnd.right - rcWnd.left;
			cy = rcWnd.bottom - rcWnd.top;
			
			if(x<0){
				var sx = ::GetSystemMetrics(0x10/*_SM_CXFULLSCREEN*/) ;
				if(sx>cx){
					if(x==-1)
						x = (sx-cx)/2;
					else 
						x = (sx-cx)+x+2
				}
				else
					x = 0; 
			} 
			if(y<0){
				var sy = ::GetSystemMetrics(0x11/*_SM_CYFULLSCREEN*/) + ::GetSystemMetrics(0x4/*_SM_CYCAPTION窗口标题的高度*/);
				if(sy>cy){
					if(y==-1)
						y = (sy-cy)/2;
					else 
						y = (sy-cy) + y+2
				}
				else
					y = 0; 
			}   
			this.hwnd = createWindowEx(tParam.exstyle,tParam.className,tParam.text,tParam.style ,
				x,y,cx,cy,tParam.parent,tParam.id/*menu*/, _HINSTANSE );
			
			if(!this.hwnd)
				return null,"CreateWindowEx failed!";
			
			if(!..win.title	) ..win.title = tParam.text;  
		} 
		this[["scroll"]] = tParam.scroll; 
        
        var wndproc =  function( hwnd, message, wParam , lParam) {    
			if( this[["wndproc__"]] ) { 
				var result = this.wndproc__(  hwnd,  message, wParam , lParam );
				if( (result !== null) && ( message!=0x2/*_WM_DESTROY*/) )//用非恒等式来排除0,false等逻辑假的值
			      	return result;
			}
			var proc = _defaultProc[message]
			if( proc ){
				var result = proc(this,hwnd,message,wParam,lParam)
				if( result !== null )
					return result;
			}	
		  	
			return  this._defWindowProc(hwnd,message,wParam,lParam);
		};	
		this._wndproc_c = ..raw.tostdcall( wndproc,"addr(addr,INT,ADDR,addr)",this/*设为owner对象*/)   
		this._wndproc_c_prev = ::SetWindowPointer(this.hwnd,0xFFFFFFFC/*_GWL_WNDPROC*/, this._wndproc_c);    
        _forms[this.hwnd] = this;
         
        this.background = ..win.ui.background(this);
		if( tParam.bgcolor !== null ) this.background.setColor( tParam.bgcolor );
		if( tParam.image ) this.background.loadImage( tParam.image );
		
		..win.resetMessage();//移除_WM_QUIT消息,重置消息循环
	end; 
} 

ui.NMHDR = ::NMHDR;

_form = form;
namespace form{ 

	createWindowEx = ::CreateWindowEx;
	
	import ..win.ui.ctrl; 
	var ctrl_factory = ..win.ui.ctrl.factory
 
	//记录所有win.form对象,创建则添加此表,销毁则从表中移除 
	_forms = {}  
	getForm = function(hwnd){
		var winform = _forms[hwnd];
		while(!winform){
			hwnd = ..win.getParentOwner(hwnd);
			if(!hwnd) 
				return null; 
			winform =  _forms[hwnd]; 
		} 
		
		return winform
	}; 
 	
 	/*默认消息处理函数defaultProc{{*/
    _defaultProc = { 
       [ 0x113/*_WM_TIMER*/ ] = function(this,hwnd, message, wParam, lParam){
       		var proc = this._tTimeProc[wParam];
       		if( proc ){
       			if( this._tTimeProcEntered[wParam]  ) return;
       			
       			this._tTimeProcEntered[wParam] = true;
       			var ret = proc(hwnd,message,wParam,this._tTimeTicks[wParam] ) 
       			this._tTimeProcEntered[wParam] = null;
       			
       			if( (ret !== null) && ( ret!== true ) ){  
       				var tick = tonumber(ret)  
       				if( !tick ){ 
       					this.killtimer(wParam)//移除此定时器
       				}
       				else { 
						this.settimer(wParam,tick)//重新设定时间间隔
       				}
       			}
       		}
       }
       [ 0x4A/*_WM_COPYDATA*/ ] = function( this,hwnd,message,wParam,lParam ){
        	if(lParam && this.onCopyData ){
        		lParam = topointer(lParam);
            	var data = ..raw.convert(lParam,{ADDR dwData;INT cbData;pointer lpData});
            	var s,n = data.lpData,data.dwData;
            	if( s ){
                	s = ..raw.tostring(s,1,data.cbData);
                	if( n == 0xffffffff && s[1] == '{'# ){
                		s = eval( s );
                	}
            	}
            	return this.onCopyData( s,n );
        	}
       }
       [0xACCC/*_WM_THREAD_COMMAND*/] = function( this,hwnd,message,wParam,lParam ){
       		if( this.__onThreadCommand )  return  this.__onThreadCommand(wParam); 
       }
       [0xACCE/*_WM_THREAD_CALLBACK*/] = function( this,hwnd,message,wParam,lParam ){ 
       		if(!(wParam && lParam) ) return 0;
       		var proto = ..raw.tostring(topointer(wParam));
       		var name,_struct = ..string.match(proto,"\s*(.+?)\s*\(\s*\{\s*(.+?)\s*\}\s*\)");
       		var f = name ? this[name];
       		if(f){ 
       			return invoke(f,this,..raw.convert(topointer(lParam),{ _struct = _struct })); 
       		} 
       }
       [0xACCD/*_WM_THREAD_CALLWND*/] = function( this,hwnd,message,wParam,lParam ){ 
       		return ..thread.applyCallWnd(this,wParam,lParam)
       }
 	   [0x14/*_WM_ERASEBKGND*/] = function(this,hwnd, message, wParam, lParam){
 	   		 
 	   		if( this.onEraseBkgnd !== null ){
 	   			var ret = this.onEraseBkgnd(hwnd, message, wParam, lParam);
 	   			if( ret !== null ) return ret;
 	   		};
 
			if( this.hasBackground ){ 
				this.background.draw( topointer(wParam) ); 
				return 1;
			}  
 	   };  
 	   [0xA1/*_WM_NCLBUTTONDOWN*/] = function(this,hwnd, message, wParam, lParam){
 	   	     if( ( wParam >= 0xA/*_HTLEFT*/ && wParam <= 0x11/*_HTBOTTOMRIGHT*/ ) || wParam == 2/*_HTCAPTION*/ ){
 	   			if( ( this.disableDragFullWindow === null && this.hasBackground && ! ..win.getStyle(this.hwnd,0x2000000/*_WS_CLIPCHILDREN*/) ) 
 	   				||  this.disableDragFullWindow  ){ 
 	   				var status = { bool fullwindow}
 	   				::SystemParametersInfo(0x26/*_SPI_GETDRAGFULLWINDOWS*/,0,status,0); 
 	   				if( status.fullwindow ){
 	   					::SystemParametersInfo( 0x25/*_SPI_SETDRAGFULLWINDOWS*/,0,{},0);
 	   					if( this.onResizeBorder ) this.onResizeBorder(wParam, lParam);
 	   					var ret = this._defWindowProc(hwnd,message,wParam,lParam);
 	   					::SystemParametersInfo( 0x25/*_SPI_SETDRAGFULLWINDOWS*/,1,{},0);
 	   					return ret;
 	   				}
 	   			}
 	   			if( this.onResizeBorder ) this.onResizeBorder(wParam, lParam);
 	   		}
 	   }; 
 	   [0x18/*_WM_SHOWWINDOW*/] = function(this,hwnd, message, wParam, lParam){ 
			if( hwnd == this.hwnd){
				for(hwnd,ctrl in this._ctrlAutoResize ){  
					if( ctrl.cacheOrphanWindowRect__ ){ 
						if(!wParam){ctrl.show(false);continue;}  
						var rc = ctrl.cacheOrphanWindowRect__; 
						var l,t = ..win.toScreen(this.hwnd,rc.left,rc.top); 
						..win.setPos( hwnd,l,t,rc.width() ,rc.height() ,,0x40/*_SWP_SHOWWINDOW*/ | 0x14/*_SWP_NOACTIVATE | _SWP_NOZORDER*/ );
					}
				}
			}
	   };
 	   [0x3/*_WM_MOVE*/] = function(this,hwnd, message, wParam, lParam){ 
			if( hwnd == this.hwnd){   
				if( ..win.isIconic(hwnd) ) 	return; 
				for(hwnd,ctrl in this._ctrlAutoResize ){  
					if( ctrl.cacheOrphanWindowRect__ ){   
						var rc = ctrl.cacheOrphanWindowRect__; 
						var l,t = ..win.toScreen(this.hwnd,rc.left,rc.top); 
						..win.setPos( hwnd,l,t,rc.width() ,rc.height() ,,0x14/*_SWP_NOACTIVATE | _SWP_NOZORDER*/ );
					}
				} 
			}
	   };
	   [0x02E0/*_WM_DPICHANGED]*/] = function(this,hwnd, message, wParam, lParam){
	        if( this.onDpiChanged ){
	   	    	var dpiX,dpiY = ::HIWORD(wParam),::LOWORD(wParam);
	   	    	var rect = ..raw.convert( topointer(lParam),::RECT());
	   	    	return this.onDpiChanged(dpiX,dpiY,rect);
	   	    }
	   }
 	   [0x5/*_WM_SIZE*/] = function(this,hwnd, message, wParam, lParam){
			if( hwnd == this.hwnd){  
				if( wParam == 0x1/*_SIZE_MINIMIZED*/ ) return;
				if( ..win.isIconic(hwnd) ) return;
				   
				if( this.hasBackground ){ 
					this.background.update(); 
				}  
			
				var defDlg = this._defClientRect;
				if(!defDlg) return;
				 
				var dlg = this.getClientRect();
				this.cachClientRect = dlg; 
				
				//计算变化的比例
				var xRate = (dlg.right-dlg.left)/(defDlg.right-defDlg.left);
				var yRate = (dlg.bottom-dlg.top)/(defDlg.bottom-defDlg.top); 
				
   				var defCtrl; 
   				var l,t,r,b,w,h; //控件左,上,右,下,宽高
   				var ctrlSize = {};
   				
   				var numCtrls = 0;
   				for(hwnd,ctrl in this._ctrlAutoResize ){
   					numCtrls++;
   				}
   				hPosInfo = ::BeginDeferWindowPos(numCtrls);
   				for(hwnd,ctrl in this._ctrlAutoResize ){
   					var parent = dlg;
   					var defParent = defDlg;;
   					
   					defCtrl = ctrl._defRect;
   					w = defCtrl.right-defCtrl.left;
			    	h = defCtrl.bottom -defCtrl.top;
			    	   
   					if( ctrl[["dl"]] )
						l = defCtrl.left;
					else
						l = defCtrl.left * xRate ;
					
					if( ctrl[["dt"]] )
						t = defCtrl.top ;
					else
						t = defCtrl.top * yRate ;
					
					if( ctrl[["dr"]] ) {
						if( ctrl.parent != this ){
							 parent = ctrl.parent.getClientRect()
							 defParent = ctrl.parent._defClientRect
						} 
						r = parent.right - ( defParent.right - defCtrl.right) ;
							
						if( ctrl[["aw"]] == false ) && ( ctrl[["dl"]] == false )
							l = r  - w;
					}
					else {
						if( ctrl[["aw"]] )
							r = defCtrl.right * xRate ;
						else
							r = l+w; 
					}
		
					if( ctrl[["db"]] ) 	{
						if( (ctrl.parent != this) && ( !ctrl[["dr"]] ) ){
							 parent = ctrl.parent.getClientRect()
							 defParent = ctrl.parent._defClientRect
						}
							
						b = parent.bottom - ( defParent.bottom - defCtrl.bottom ) ;
						if( ( ctrl[["ah"]] == false ) && ( ctrl[["dt"]] == false ) )
							t  = b  - h ;
					}
					else{
						if( ctrl[["ah"]] )
							b = defCtrl.bottom * yRate ;
						else
							b = t + h;
					}   
					
					ctrlSize[ctrl.hwnd] = { cx = r - l;cy = b - t };
					if( !..win.getStyle(ctrl.hwnd,0x40000000/*_WS_CHILD*/) ){ 
						ctrl.cacheOrphanWindowRect__ = ::RECT(l,t,r,b); 
					}
					else{ 
						hPosInfo = ::DeferWindowPos(hPosInfo,ctrl.hwnd,0,..math.floor(l),t, r - l, b - t , 0x1C/*_SWP_NOACTIVATE |  _SWP_NOZORDER | _SWP_NOREDRAW*/ );
   					}
   				}
   				 
   				::EndDeferWindowPos(hPosInfo);
   				for(hwnd,ctrl in this._ctrlAutoResize ){
   					if( ctrl.cacheOrphanWindowRect__ ){
   						var rc = ctrl.cacheOrphanWindowRect__;
   						var l,t = ..win.toScreen(this.hwnd,rc.left,rc.top); 
						..win.setPos( ctrl.hwnd,l,t,rc.width() ,rc.height() ,,0x14/*_SWP_NOACTIVATE | _SWP_NOZORDER*/ ); 
						
   					}
   					if( ctrl._preadjust ){ 
						ctrl._preadjust( ctrlSize[hwnd].cx, ctrlSize[hwnd].cy );//before redraw
					} 
				}
   				this.redraw();//Z Orderd Draw
   				
   				for(hwnd,ctrl in this._ctrlAutoResize ){
   					if( ctrl._adjust ){ 
						ctrl._adjust( ctrlSize[hwnd].cx, ctrlSize[hwnd].cy );
					} 
					if( ctrl.adjust__ ){ 
						ctrl.adjust__( ctrlSize[hwnd].cx, ctrlSize[hwnd].cy );
					} 
   				}
   				if( this.toolbar[["adjust"]] )
   					this.toolbar.adjust();
   				if( this.statusbar[["adjust"]] )
   					this.statusbar.adjust();
   				  
   				
   				if( this._adjust ){  
   					this._adjust( dlg.right-dlg.left,dlg.bottom-dlg.top,wParam);
   				} 
   				if( this.adjust__ ){  
   					this.adjust__( dlg.right-dlg.left,dlg.bottom-dlg.top,wParam);
   				} 
   			}
 	   }; 
 	   [0x111/*_WM_COMMAND*/] = function(this,hwnd, message, wParam, lParam){
			var id    = ::LOWORD(wParam);
			var wmEvent = ::HIWORD(wParam); 
			var proc;
			if( lParam ){ 
				var ctrl = this._ctrlId[id];
				if( ctrl[["oncommand"]] ) {
					ctrl.oncommand(id,wmEvent);
					return;
				}
			}
			
			proc = this._mapCommandProc[id]	
			if(type(proc)==type.function)
				proc(id,wmEvent);    
 	   }; 
 	   [0x10/*_WM_CLOSE*/] = function(this,hwnd, message, wParam, lParam){
 	   		if( this[["(__continueModal)"]]  ) {
 	   			this.endModal(); return 0;
 	   		}
 	   		
 	        if( type(this.onClose) == type.function )
 	        	return this.onClose(hwnd, message, wParam, lParam)
 	   };
 	   [0x110/*_WM_INITDIALOG*/] = function(this,hwnd, message, wParam, lParam){
 	        if( type(this.onInitDialog) == type.function )
 	        	return this.onInitDialog(hwnd, message, wParam, lParam)
 	   };  
 	   [0x004E /*_WM_NOTIFY*/] = function(this,hwnd, message, wParam, lParam){
			if(lParam){ 
				var id = wParam;
				var ctrl = this._ctrlId[id];
				if(ctrl){
					var pre,notify = ctrl._prenotify,ctrl.onnotify; 
					if( notify || pre ){ 
						var ptr = topointer(lParam); 
						var nmhdr = ..raw.convert(ptr,::NMHDR() );
						var code = nmhdr.code;
						var ret;
						if( pre ) 
							ret = ctrl._prenotify( id,code,ptr,nmhdr )
						
						if( notify && ( ret === null) ) 
							ret = ctrl.onnotify(id,code,ptr,nmhdr ) 
						
						if(ret!==null)
							return ret;
					} 
				}  
			}
 	   } 
 	   [0x115/*_WM_VSCROLL*/] = function(this,hwnd, message, wParam, lParam){
 	       if( lParam ){
 	           var ctrl = this._ctrlHwnd[lParam];
 	           if( ctrl[["oncommand"]] ){
 	                ctrl.oncommand( ctrl.id,::LOWORD (wParam),::HIWORD(wParam) )
 	           } 
 	       }
 	   } 
 	   [0x312/*_WM_HOTKEY*/] = function(this,hwnd, message, wParam, lParam){
			var id = wParam; //这个是注册的时候设定的ID 
				
			if( this[["_hotkeys"]] && ( type( this[["_hotkeys"]][id] ) == type.function )  ){
			this[["_hotkeys"]][id] (id,::LOWORD(lParam),::HIWORD(lParam) )
			}
 	   }
 	   [0x2/*_WM_DESTROY*/] = function(this,hwnd, message, wParam, lParam){
 	   		if(this._hasBeenDestroyed){ 
 	   			return;
 	   		}
 	   		this._hasBeenDestroyed = true;
 	   		
 	   		if( this._acceleratorTable ){
 	   			this._acceleratorTable.destroy();
 	   		}
			var tm = this[["_tTimeProc"]]  
			for(id,v in tm){
				::User32.KillTimer(this.hwnd,id); 
				this[["_tTimeProc"]][id] = null;
				this[["_tTimeTicks"]][id] = null;  
			} 
			
			//遍历控件 
			for(hwnd,ctrl in this._ctrlHwnd){ 
				if(  ! ctrl.isForm ){ 
					ctrl._closed = true;//控件窗口不考虑阻止 WM_CLOSE
					if( ctrl._onDestroy ){ 
						ctrl._onDestroy ();
					}
					if( ctrl.onDestroy){
						ctrl.onDestroy ();
						ctrl.onDestroy = null;
					}
					if( ctrl[["(bgbrush)"]] ){  
						::DeleteObject( ctrl[["(bgbrush)"]]  );
						ctrl[["(bgbrush)"]] = null;
					} 
					if( ctrl[["(ownFontHandle)"]] ){  
						::DeleteObject( ctrl[["(ownFontHandle)"]]  );
						ctrl[["(ownFontHandle)"]] = null;
					} 
					
				}
			}
			
			if(  this[["tooltipCtrl"]][["destroy"]] ){
				this.tooltipCtrl.destroy();
				this.tooltipCtrl = null;
			}
			if( this[["(ownFontHandle)"]] ){  
				::DeleteObject( this[["(ownFontHandle)"]]  );
				this[["(ownFontHandle)"]] = null;
			}  
			this.background.delete();
			this.background = null;
			
			if( this._onDestroy ){ 
				this._onDestroy ();
			}
			if( this.onDestroy){
				this.onDestroy ();
				this.onDestroy  = null;
			}

			if( this[["_atomId"]] ){ 
				this.atom(false);//释放实例占用原子
			} 
			this[["(__continueModal)"]] = null;//退出模态循环 
			
			_forms[hwnd] = null;  
			if( ..win.getStyle(hwnd,0x80/*_DS_MODALFRAME*/) ){
				return;
			}	
			for(k,f in _forms){
				 if( ! f._messageOnly )
				 	return; 
			}
			for(k,f in _forms){
				::SendMessage(f.hwnd,0x2/*_WM_DESTROY*/); 
			}
			..win.quitMessage();
 	   } 
  	   [0x138/*_WM_CTLCOLORSTATIC*/ ]  = function(this,hwnd, message, wParam, lParam){
			var ctrl = this._ctrlHwnd[ lParam ];
			var hdc = topointer(wParam)
			if( ctrl  ){
				if( type(ctrl.color)==type.number )
					    ::SetTextColor(hdc,ctrl.color ) ;
					    
				if(ctrl.transparent) {
					::SetBkMode(hdc,1);  
					return tonumber(  ::GetStockObject(5) );//NULL_BRUSH
				}
				else if( ctrl[["(bgbrush)"]] ){
					::SetBkColor(hdc,ctrl[["(bgcolor)"]] )  ;
					return ctrl[["(bgbrush)"]];
				}
			}
 	   }
 	   [0x24/*_WM_GETMINMAXINFO*/]  = function(this,hwnd, message, wParam, lParam){ 
 	   		if( this.onGetMinMaxInfo ){
 	   			return this.onGetMinMaxInfo(hwnd, message, wParam, lParam);
 	   		}
 	   }
 	   [0x7E/*_WM_DISPLAYCHANGE*/]  = function(this,hwnd, message, wParam, lParam){ 
 	   		if( this.getMinMaxInfo && ..win.isZoomed(hwnd) ){ 
 	   			var minMaxInfo = this.getMinMaxInfo();
 	   			..win.setPos(hwnd,,,minMaxInfo.maxSize.x,minMaxInfo.maxSize.y);  
 	   		}
 	   }
 	   [0x232/*_WM_EXITSIZEMOVE*/]  = function(this,hwnd, message, wParam, lParam){ 
 	   		if( this.onExitSizeMove ){ return this.onExitSizeMove();  }
 	   }
 	   [0x1C/*_WM_ACTIVATEAPP*/] = function(this,hwnd, message, wParam, lParam){
 	   		if( (!wParam) && this.restoreFullScreen && ( !..win.getStyleEx(this.hwnd,0x80000/*_WS_EX_LAYERED*/) ) ) 
 	   			this.fullscreen( false );
 	   } 
 	   [ 0x2C/*_WM_MEASUREITEM*/ ]  = function(this,hwnd, message, wParam, lParam){
 	        lParam =  topointer(lParam)
            var item = ::MEASUREITEMSTRUCT();  
            ..raw.convert(lParam,item);  
            
            var ctrl; 
            if( item.CtlID ){
           		ctrl = this._ctrlId[ item.CtlID ];
           	}
            elseif( item.CtlType == 0x1/*_ODT_MENU*/ && ..win.ui.menu) {
            	ctrl = ..win.ui.menu; 
            }
            
			if( ctrl ? ctrl.onMeasureItem ) {
				var ret = ctrl.onMeasureItem(item);
				::CopyMemoryByStruct(lParam,item,24/* raw.sizeof(item)*/);
				
				if( ret !== null ){ 
					return ret;
				};
			} 
        }
        [ 0x2B/*_WM_DRAWITEM*/ ]  = function(this,hwnd, message, wParam, lParam){
            var item = ::DRAWITEMSTRUCT();
            ..raw.convert(topointer(lParam), item);

            var ctrl;
            if( item.CtlID ){
           		ctrl = this._ctrlId[ item.CtlID ];
           	}
            elseif( item.CtlType == 0x1/*_ODT_MENU*/ && ..win.ui.menu) { 
            	ctrl = ..win.ui.menu; 
            }
            
			if( ctrl ? ctrl.onDrawItem ) {
				var ret = ctrl.onDrawItem(item); 
				if( ret !== null ){ 
					return ret;
				};
			} 
        }
 	}
 	var defaultProc = _defaultProc;
 	var onCtlColor = defaultProc[0x138/*_WM_CTLCOLORSTATIC*/ ];
 	defaultProc[0x133/*_WM_CTLCOLOREDIT*/] = onCtlColor;
 	defaultProc[0x135/*_WM_CTLCOLORBTN*/] = onCtlColor;
 	defaultProc[0x134/*_WM_CTLCOLORLISTBOX*/] = onCtlColor;  
 	defaultProc[0x114/*_WM_HSCROLL*/] = defaultProc[0x115/*_WM_VSCROLL*/] 
  	/*}}*/

	_metaProperty = ..win.ui.ctrl.metaProperty( 
	 
			isForm = {
				_get = function(){ return true } 
			};
			text = {
				_get = function(){ 
					return ..win.getText( owner[["hwnd"]] );
				}
				_set = function(v){ 
					..win.setText( owner[["hwnd"]],tostring(v) );     
				}
			};
			getForm = function(){
				return owner;
			};
			loadForm = function(path,...){
				return ..win.loadForm(path,,owner,... );
			};  
			loadcode = function(path,...){
				return ..win.loadForm(path,,owner,... );
			};
			getCtrlById = function(id){
				return owner._ctrlId[id]
			};
			getCtrl = function(hwnd){
				var cs = owner._ctrlHwnd;
				var c = cs[hwnd]
				while(!c){
					hwnd = ..win.getParentOwner(hwnd);
					if(!hwnd) 
						return null; 
						
					c =  cs[hwnd]; 
				} 
				return c;
			};
			_getFreeCommandId = function(){ 
   				var id = owner._mapCommandProc.freeId;
   				owner._mapCommandProc.freeId++;
   				return id;
   			}; 
   			registCommand = function(proc,oid){
   				if( oid === null ){
   					var free = owner._getFreeCommandId();
   					owner._mapCommandProc[free] = proc;
   					return free;
   				}
   				else {
   					if( oid > owner._mapCommandProc.freeId ) owner._mapCommandProc.freeId = oid + 1;
   					owner._mapCommandProc[oid] = proc;
   					return oid 
   				} 
   			}; 
			redraw = function(){ 
				if(owner[["menu"]])owner[["menu"]].redraw();
				
    			var rc = ::RECT();
    			::GetClientRect(owner[["hwnd"]],rc); 
    			::InvalidateRect(owner[["hwnd"]],rc,1);
    			::UpdateWindow(owner[["hwnd"]]); 
			};
			show = function(flag) {    
				..win.show(owner[["hwnd"]],flag);
				if( owner[["(__continueModal)"]]  ){
					hwndOwner = ..win.getOwner( owner.hwnd) 
					if(hwndOwner && (hwndOwner!=owner[["hwnd"]]) ){
						..win.enable(hwndOwner,!( flag === null || flag) );  
						if( !flag && flag !== null ) ..win.setActive(hwndOwner); 
					} 
					..win.setActive(owner.hwnd);
				}
			};
			doModal = function(hwndOwner){ 
			
				if(!hwndOwner){
					hwndOwner = ..win.getOwner( owner.hwnd) 
				}
				else if(type(hwndOwner)==type.table){
				   hwndOwner = hwndOwner.hwnd;//winform.hwnd   
				}
				if(hwndOwner){
					..win.setOwner(owner.hwnd,hwndOwner);
				}
				
				owner.modifyStyle(0,0x80/*_DS_MODALFRAME*/)
				owner[["(__continueModal)"]] = true; 
				::SendMessageInt(owner[["hwnd"]],0x110/*_WM_INITDIALOG*/,0,0);
				owner.show(); 
				
				while(owner[["(__continueModal)"]])   
					..win.pumpMessage(); 
				 
				if( hwndOwner ) { 
					..win.setPos(owner.hwnd,,,,,,0x10/*_SWP_NOACTIVATE*/|0x80/*_SWP_HIDEWINDOW*/) 
					..win.enable(hwndOwner,1/*_TRUE*/); 
					if( ..win.getActive() == owner.hwnd ){
						..win.setActive(hwndOwner); 
					}
				}
				owner.close(); 
				..win.delay(10);//修正线程仅弹出一个模态对话框后错误对话框被自动关闭
				return owner[["dialogResult"]];
			};
			endModal = function(result){
				owner[["dialogResult"]] = result;
				owner[["(__continueModal)"]] = null;
				owner.close();
			}; 
			continueModal = {
				_get = function(){
					return owner[["(__continueModal)"]];
				} 
			};
			msgboxTest = function(str,title){
				return ..win.msgboxTest(str,title,owner[["hwnd"]]  )
			}; 
			msgboxErr = function(str,title){
				return ..win.msgboxErr(str,title,owner[["hwnd"]]  )
			} ;
			transparent = function( alpha,clr ){
				if( alpha === false ){
					owner.modifyStyleEx(0x80000/*_WS_EX_LAYERED*/)
					return;
				}
	    		owner.modifyStyleEx(0,0x80000/*_WS_EX_LAYERED*/)
	    		if( alpha === true )
	    			return;
	    			
	    		if( clr!==null || alpha !==null )
					::User32.SetLayeredWindowAttributes( owner[["hwnd"]],clr:0, alpha:0,clr!==null?1:2)
			}
			bgcolor = {
				_get = function(){ 
					return owner.background.getColor();
				}
				_set = function( v ){  
                	owner.background.setColor( v ) 
				} 	
			};
			image = {
				_get = function(){ 
					return owner.background.getBitmap();
				}
				_set = function( v ){ 	
					if(type(v) == type.string ){  
			    		owner.background.loadImage( v ) 
			    		return;
                	}
                	owner.background.setBitmap( v,true ) 
				} 	
			}; 
			getBitmap = function(h,delPrev=true){
				return owner.background.getBitmap();
			};
			setBitmap = function(h,delPrev=true){
				return owner.background.setBitmap(h,delPrev);
			};
			setImage = function(h,delPrev=true){ 
				// 请使用 setBitmap替代
				return owner.background.setBitmap(h,delPrev);
			};
			addtimer = function(elapse,func){ 
				var freeId = ..table.pop( owner._tTimeTicks.freeId,1) ;
				if(!freeId){ 
					freeId = owner._tTimeTicks.allocId;
					owner._tTimeTicks.allocId++;
				}
		 		
				owner[["_tTimeProc"]][freeId] = func; 
				owner[["_tTimeTicks"]][freeId] = elapse;
				
				if( ::User32.SetTimer(owner.hwnd,freeId,elapse,null) )
	    			return freeId;
			};
			settimer = function(id,elapse,func){ 
				if( owner[["_tTimeProc"]][id] ){
					::User32.SetTimer(owner.hwnd,id,elapse,null )
					owner[["_tTimeTicks"]][id] = elapse;
					if( func ){
						owner[["_tTimeProc"]][id] =func; 
					}
					return true;
				} 
			};
			killtimer = function(id){  
				if( owner[["_tTimeProc"]][id] ){ 
	    			::User32.KillTimer(owner.hwnd,id);
	    			owner[["_tTimeProc"]][id] = null;
	    			owner[["_tTimeTicks"]][id] = null;
	    			owner[["_tTimeProcEntered"]][id] = null; 
	    			..table.push(owner._tTimeTicks.freeId,id);
	    			return true;
	    		}
			};
			setTimeout = function(code,elapse=100,...){
				if( type(code)==type.string ) {
					code,err = loadcode(code)
					if(!code)error(err,2)
				}
				var args = {...}
				var this = owner;	
				return owner.addtimer ( elapse,
					function(hwnd,msg,id){
						this.killtimer(id)
						code( ..table.unpackArgs(args) ); 
					} 
				) 
			};
			reghotkey  = function( func , mod,vk ){ 
		 		if(! owner[["_hotkeys"]] ) owner[["_hotkeys"]] = {};
		 		if( type(vk) != type.number ) error("请使用参数@3指定虚拟键码",2);
		 		
		 		var id = ..table.push( owner[["_hotkeys"]] ,func); //保存回调函数
		 		if( ::User32.RegisterHotKey(owner.hwnd,id,mod,vk) )
	     			return id;
	     		
	     		owner[["_hotkeys"]][id] = null;	 
			}; 
			unreghotkey  = function(idEvent){ 
				if( idEvent ? owner[["_hotkeys"]][idEvent] ){
	     			::User32.UnregisterHotKey(owner.hwnd,idEvent);
	     			owner[["_hotkeys"]][idEvent] = null; 
	     		}
			}; 
			//无边框窗体支持
			hit = function(method){
				if(method)invoke(owner["hit" + ..string.replace(method,"^\w",..string.upper)],owner)
			};
			hitCaption = function () { 
				if(  ..win.isZoomed(owner.hwnd) ) return; 
				..win.releaseCapture();
				::SendMessageInt( owner.hwnd, 0xA1/*_WM_NCLBUTTONDOWN*/ , 0x2/*_HTCAPTION*/, 0/*不指定坐标,避免HTMLayout重入事件*/ );
			};
			hitTopleft = function () {
				if(  ..win.isZoomed(owner.hwnd) ) return; 
				::SendMessageInt( owner.hwnd, 0x112/*_WM_SYSCOMMAND*/, 0xF004/*_SC_SIZE | _WMSZ_TOPLEFT*/,0xD/*_HTTOPLEFT*/)
			};
			hitTop  = function () {
				if(  ..win.isZoomed(owner.hwnd) ) return; 
				::SendMessageInt( owner.hwnd, 0x112/*_WM_SYSCOMMAND*/, 0xF003 ,0xC/*_HTTOP*/)
			};
			hitTopright  = function () {
				if(  ..win.isZoomed(owner.hwnd) ) return; 
				::SendMessageInt( owner.hwnd, 0x112/*_WM_SYSCOMMAND*/, 0xF005,0xE/*_HTTOPRIGHT*/)
			};
			hitLeft  = function () {
				if(  ..win.isZoomed(owner.hwnd) ) return; 
				::SendMessageInt( owner.hwnd, 0x112/*_WM_SYSCOMMAND*/, 0xF001,0xA/*_HTLEFT*/)
			};
			hitRight  = function () {
				if(  ..win.isZoomed(owner.hwnd) ) return; 
				::SendMessageInt( owner.hwnd, 0x112/*_WM_SYSCOMMAND*/, 0xF002,0xB/*_HTRIGHT*/)
			};
			hitBottomleft = function () {
				if(  ..win.isZoomed(owner.hwnd) ) return; 
				::SendMessageInt( owner.hwnd, 0x112/*_WM_SYSCOMMAND*/, 0xF007,0x10/*_HTBOTTOMLEFT*/)
			};
			hitBottom  = function () {
				if(  ..win.isZoomed(owner.hwnd) ) return; 
				::SendMessageInt( owner.hwnd, 0x112/*_WM_SYSCOMMAND*/, 0xF006,0xF/*_HTBOTTOM*/)
			};
			hitBottomright  = function () {
				if(  ..win.isZoomed(owner.hwnd) ) return; 
				::SendMessageInt( owner.hwnd, 0x112/*_WM_SYSCOMMAND*/, 0xF008,0x11/*_HTBOTTOMRIGHT*/)
			};
			hitmin  = function () {
				::PostMessage(owner.hwnd, 0x112/*_WM_SYSCOMMAND*/,0xF020/*_SC_MINIMIZE*/, 0);  
			}; 
			hitmax = function(){
				var zoomed = ..win.isZoomed(owner.hwnd);
				if(zoomed)
					::PostMessage(owner.hwnd, 0x112/*_WM_SYSCOMMAND*/,0xF120/*_SC_RESTORE*/, 0);  
				else
					::PostMessage(owner.hwnd, 0x112/*_WM_SYSCOMMAND*/,0xF030/*_SC_MAXIMIZE*/,0);
				return !zoomed;
			}; 
			cmdTranslate = function(hwnd,message,wParam,lParam){
				if( message == 0x111/*_WM_COMMAND*/ ){
					defaultProc[0x111/*_WM_COMMAND*/](owner,hwnd,message,wParam,lParam);
				}
			};
			eachControl = function(cls){ 
				var next; 
				var this = owner;
				next = function(name){
					var k,v = ..table.next(this,name);
					if( (v===null) || ( v[["hwnd"]] && (!cls || cls == v.cls) ) ){ 
						return k,v;
					}
					
					return next(k);
				} 
				return next;
			}; 
			bindConfig = function(cfg,fields){
				if( type(cfg.save) != "function" ) error("无效配置文件",2); 
				
				var winform = owner;
				if(fields){
					for(name,ctrl in winform.eachControl() ){
						var v =  fields[name]  : fields[ctrl.cls]
						if( v ? (cfg[name]!==null) ) ctrl[v] = cfg[name]; 
					};
				}
				
				var rc = cfg["(rect)"];
				if( rc ){
					if( rc == "MAXIMIZE" ){
						winform.show(0x3/*_SW_MAXIMIZE*/)
					}
					else{
						rc = ::RECT( rc.left,rc.top,rc.right,rc.bottom );
						var area = ..win.getWorkArea();
						if( ( rc.left < area.right - rc.width() ) && ( rc.top < area.bottom - 100 )
							&& ( rc.bottom > area.top + rc.height() ) && ( rc.right >  area.left + 100 ) )
						winform.setRect(rc,true);
					}
				}
				
				cfg.beforeSave = function(){
					if( winform._hasBeenDestroyed ){return;}
					
					if(fields){
						for(name,ctrl in winform.eachControl() ){
							var v = fields[name]  : fields[ctrl.cls]
							if( v ) cfg[name] = ctrl[v]; 
						}
					}
					
					cfg["(rect)"] = null;
					if( ! ( ..win.getParent( winform.hwnd )|| ..win.getOwner(winform.hwnd) ) && !..win.isIconic(winform.hwnd) ){ 
						cfg["(rect)"] = ..win.isZoomed(winform.hwnd) ?  "MAXIMIZE" : winform.getRect(true);  
					}  
				};
				winform.onClose = function(){
					cfg.beforeSave();
				}; 
			};
			valid = {
      			_get = function(){
      				return( ..win.isWindow( owner.hwnd ) )
      			} 
      		};
      		fullscreen = function(fs){
      			var hwnd = owner.hwnd;
      			if( fs === null ) fs = !owner.restoreFullScreen;
      			if( fs ){
      				if( owner.restoreFullScreen ) return owner.restoreFullScreen;
      				
      				var restoreFullScreen = {
      					style = ..win.getStyle(hwnd, 0x40C40000/*_WS_CAPTION | _WS_BORDER | _WS_DLGFRAME | _WS_CHILD | _WS_SIZEBOX*/ );
						parent = ..win.getParent(hwnd); 
						top = ..win.getStyleEx(hwnd,0x8/*_WS_EX_TOPMOST*/);  
						placement = ..win.getPlacement(hwnd);
						hwnd = hwnd;
					}
					if(restoreFullScreen.placement.showCmd == 0x2/*_SW_SHOWMINIMIZED*/){
						return;
					}
					
					..win.setParent( hwnd,..win.getDesktop() )  
					owner.modifyStyle( restoreFullScreen.style ) 
					..win.setTopmost( hwnd )  
					
					var rcWnd = ::RECT();
					rcWnd.right,rcWnd.bottom = ..win.getScreen(); 
					..win.setRect(hwnd,rcWnd);
					
					owner.restoreFullScreen = restoreFullScreen;
      			}
      			else {
      				if( owner.restoreFullScreen ){
      					with( owner.restoreFullScreen ){
      						..win.setParent( hwnd, parent );
							owner.modifyStyle(,style);
							placement.update(); 
							
							if( !top ){
								..win.setTopmost( hwnd,false )
							}
						}
						owner.restoreFullScreen = null;
      				}
      			}
      			return owner.restoreFullScreen;;
      		};
      		remove = function(name){
      			var ctrl = owner[name];
      			if( ctrl ? ctrl.hwnd ? ctrl.close ){
      				ctrl.close();
      			}
      			owner[name] = null;
      		};
			add = function( tParam,parentCtrl ) {
				var zorder = {}
        		for name,opt in tParam{
        			..table.push(zorder,{name;opt})
        		}
        		..table.sort(zorder,function(b){
        			return owner[2].z < b[2].z 
        		} ) 
 		
 				var ctrl; 
 				var parent = parentCtrl : owner;
 	 			
 	 			var result = {};
				for(i=1;#zorder ){  
		    		var name = zorder[i][1];
		    		var opt = zorder[i][2];    
		       		
			 		//创建控件
					if(!opt.id) //允许显示指定控件ID
						opt.id = #owner._ctrlId + 1;
						
					opt[["parent"]] = parent;
					opt.hInstance = owner.hInstance;
					ctrl = ctrl_factory.create(opt);
					if(!ctrl)continue ;
					
					if( type(name) == type.string ){
						var conflict = parent[name];
						if( conflict[["hwnd"]] ){
							if( ( ! conflict._closed ) && conflict.close ){
								conflict.close();
							}
						}
						parent[name] = ctrl;
					} 
					result[name] = ctrl;
					
					owner._ctrlId[opt.id] = ctrl;
		    		ctrl[["id"]] =  opt.id; 
		    		ctrl[["parent"]] = parent;
					ctrl[["_parentForm"]] = owner;
	         		 
	        		if(	!ctrl.hwnd ){
	        			//如果不是自定义控件
						ctrl.hwnd = createWindowEx (opt.exstyle, opt.cls , opt.text ,  opt.style  ,opt.left,opt.top,opt.right - opt.left , opt.bottom - opt.top,
								  				parent.hwnd ,  opt.id ,  opt.hInstance   ) 
						
					} 
					else {
						..win.setPos(ctrl.hwnd,opt.left,opt.top,opt.right - opt.left , opt.bottom - opt.top,0x1/*_HWND_BOTTOM*/);
					}  
	
					owner._ctrlHwnd[ctrl.hwnd] = ctrl   	
					if( (opt.autoResize === null) || (opt.autoResize)  )
						owner._ctrlAutoResize[ctrl.hwnd] = ctrl; 
					
					ctrl_factory.onCreateComplete(ctrl);
				} 
				
				return result;
    		}; 
	)
}

/**intellisense()
win.form = 在标准库 win.ui 中定义的窗口类,\n该名字空间声明了少量WINAPI
win.form.getForm(__/*控件或窗口句柄*/) = 返回指向或包含句柄指向窗口的form对象 
win.form._defaultProc  = @._defaultProc[__/*消息ID*/]  = function(this,hwnd, message, wParam, lParam){\n	\n}
win.form.createWindowEx = @.createWindowEx = function(exStyle,className,windowName,style,x,y,width,height,hwndParent,hMenu,hlnstance,lpParam){
    windowName = string.conv.localized(windowName);__/*请先导入string.conv*/
    return ::CreateWindowEx(exStyle,className,windowName,style,x,y,width,height,hwndParent,hMenu,hlnstance,lpParam);
}
end intellisense**/