//plus ¸ß¼¶Í¼Ïñ¿Ø¼þ
import gdip.graphics;
import gdip.solidBrush;
import gdip.stringformat;
import gdip.font;
import win.ui.tracker;
import win.ui.ctrl.metaProperty;

namespace win.ui.ctrl;

class plus {
	ctor( parent,tParam ) {
		this.state = {};
		tParam.cls = __className;
		if(tParam.edge) tParam.exstyle |= 0x20000/*_WS_EX_STATICEDGE*/;  
		this.transparent = tParam.transparent;
		this.notify = tParam.notify;
		this.animation = tParam.animation; 
		this.color = 0; 
		
		this.bkTop = tParam.bkTop : 0;
		this.bkRight = tParam.bkRight : 0;
		this.bkBottom = tParam.bkBottom : 0;
		this.bkLeft = tParam.bkLeft : 0; 
		this.foreTop = tParam.foreTop : 0;
		this.foreRight = tParam.foreRight : 0;
		this.foreBottom = tParam.foreBottom : 0;
		this.foreLeft = tParam.foreLeft : 0; 
		this.paddingLeft = tParam.paddingLeft : 0;
		this.paddingRight = tParam.paddingRight : 0;
		this.paddingTop = tParam.paddingTop : 0;
		this.paddingBottom = tParam.paddingBottom : 0;  
		
		if( !tParam.font ) tParam.font = ::LOGFONT(name="MS Shell Dlg");
		elseif( tParam.font.name=="Tahoma" )  tParam.font.name="MS Shell Dlg";
		 
		if(!#tParam.repeat) tParam.repeat = "expand";
		if(!#tParam.foreRepeat) tParam.foreRepeat = "point"; 
		this[["(text)"]] = tParam.text;
		this.textRenderingHint =  3/*_GdipTextRenderingHintAntiAliasGridFit*/;
		this.clipBk = true;
	}; 
	redrawTransparent = function(){
		if( owner[["initializing"]] ) return;
		this.updateBitmapCache(true);
		if( ( this.transparent || this.isHyperlink() )  ){
 			var hParent = ..win.getParent(owner.hwnd);
 			var rc = ..win.getRect(owner.hwnd);
			::InvalidateRect( hParent,rc,1 ); 
			::UpdateWindow( hParent );   
			if( ..win.getStyle(hParent,0x2000000/*_WS_CLIPCHILDREN*/) ){
				::RedrawWindow(this[["hwnd"]],{},null,0x105 /*_RDW_INVALIDATE | _RDW_UPDATENOW*/ );
			}
		}
		else {  
			::RedrawWindow(this[["hwnd"]],{},null,0x105 /*_RDW_INVALIDATE | _RDW_UPDATENOW*/ );
		}
 	}; 
 	redraw = function( flag = 0x105 /*_RDW_INVALIDATE | _RDW_UPDATENOW */ ) {  
 		if( owner[["initializing"]] ) return;
 		this.updateBitmapCache();
		::RedrawWindow(owner[["hwnd"]],{},null,flag);
 	};
 	_preadjust = function(cx,cy){
 		this.updateBitmapCache(true);
 	};
	updateBitmapCache = function(erase){
		if( this.cacheBitmap ) { 
			..gdip.DeleteCachedBitmap(this.cacheBitmap);
			this.cacheBitmap = null; 
		}
		
		if( !..win.isWindow(this.hwnd) ) return;
		var foreground = this[["(foreground)"]];
		var background = this[["(background)"]]; 
		var rc = this.getClientRect();
		var width,height = rc.right - rc.left,rc.bottom - rc.top;
		var bmpMem = ..gdip.bitmap(width,height);
		if( !bmpMem ) return;
		
		var graphics = bmpMem.graphics;  
		graphics.smoothingMode = 4/*_GdipSmoothingModeAntiAlias*/
		graphics.compositingQuality = 2/*_GdipCompositingQualityHighQuality*/ 
		graphics.textRenderingHint = this.textRenderingHint;
		graphics.setInterpolationMode(7/*_GdipInterpolationModeHighQualityBicubic*/)
		
		var winform = owner[["_parentForm"]];
		if( erase && !this.transparent && winform && this.clipBk && (!this.cacheOrphanWindowRect__ ) ){ 
			var hdc = graphics.getDc();
			winform.background.drawRect(hdc, ..win.getRect(owner.hwnd));
			graphics.releaseDc(hdc);
		}
		
		if( background ? background.isValid() ){  
			graphics.drawBackground(background,this["(repeat)"]
				,rc,this.bkTop,this.bkRight,this.bkBottom,this.bkLeft);
		}
		
		var cancel;
		if( this.onDrawContent ){
			cancel = this.onDrawContent(graphics,rc)
		}
		
		if( ! cancel ){ 
			var rcText;
			var text = this[["(text)"]];
			if( #text or this.onDrawString ){ 
				var x,y = this.paddingLeft,this.paddingTop;
				if( ( background ? this._tracker ? this._tracker.state.active ? (!this[["(progress-range)"]])  ) ) { x++;y++; };
				rcText = ::RECTF(x,y,width - x - this.paddingRight,height - y - this.paddingBottom);
			}
	
			if( foreground ? foreground.isValid()){   
				if( this["(foreRepeat)"] == "point"){
					if( background ?  #text ? this._tracker ? this._tracker.state.active ){
						rc.left = rc.left + 1;
						rc.top = rc.top + 1;
					} 
					graphics.drawImagePoint(foreground,rc,this.x,this.y)
				}
				else {    
				 	var rc = {left=this.paddingLeft;top=this.paddingTop;right=width - this.paddingRight;bottom=height- this.paddingBottom};
				 	
				 	if( this[["(progress-range)"]] && this[["(progress-pos)"]]!== null ){
				 		if( this[["(progress-pos)"]] ){
				 			var w = rc.right - rc.left;
				 			var h = rc.bottom - rc.top;
				 			var r = this[["(progress-pos)"]]/this[["(progress-range)"]];
				 			
				 			var path = this[["(progress-clip-path)"]];
				 			if( path ){
				 				path.reset(); 
				 				path.addPie( rc.left ,rc.top,w,h,90,360 * r );
				 				graphics.setClipPath(path,0/*_GdipCombineModeReplace*/);
				 			}
				 			else{
				 				if( this.mode = "trackbar" ){ 
				 					if( r > 1 ) r = 1;
				 					if( w > h ){
				 						var p = this.foreLeft + this.foreRight; 
				 						rc.right = rc.left + (w - p) * r + p;
				 						if(rcText) rcText.width = rc.right - rcText.x;
				 					}
				 					else {
				 						var p = this.foreTop + this.foreBottom;
				 						rc.top = rc.bottom - ( h - p) * r - p ;
				 						if(rcText) { rcText.y = rc.top; rcText.height = rc.bottom - rc.top; };
				 					} 
				 				}
				 				else{
				 					if( w > h ){
				 						w = ( w - this.foreLeft ) * r + this.foreLeft;
				 						graphics.setClipRect(rc.left,rc.top,w,h,0/*_GdipCombineModeReplace*/); 
				 						if(rcText) { rcText.width = ( rc.left + w ) - rcText.x };
				 					}
				 					else {
				 						var top = rc.bottom - ( h - this.foreBottom ) * r - this.foreBottom;
				 						graphics.setClipRect(rc.left,top,w,rc.bottom,0/*_GdipCombineModeReplace*/);
				 						if(rcText) { rcText.y =  top; rcText.height = rc.bottom - top; };
				 					} 
				 				}
				 	 		}
				 	 		
				 	 		graphics.drawBackground(foreground,this["(foreRepeat)"]
								,rc,this.foreTop,this.foreRight,this.foreBottom,this.foreLeft);
							graphics.resetClip()
				 		}
				 	}
				 	else {
				 	 	graphics.drawBackground(foreground,this["(foreRepeat)"]
							,rc,this.foreTop,this.foreRight,this.foreBottom,this.foreLeft);
				 	}
				}  
			}
			
			
			if( rcText ){  
				var strformat = ..gdip.stringformat();  
				strformat.align = __stringAlignment[ this.align : "center" ] 
				strformat.lineAlign = __stringAlignment[ this.valign : "center" ] 
				strformat.hotkeyPrefix = 1/*_GdipHotkeyPrefixShow*/; 
				strformat.flags = 0x800/*_GdipStringFormatFlagsMeasureTrailingSpaces*/ ;
				if(this.trimming!==null) strformat.trimming = this.trimming;

				if( !this.argbColor ) this.argbColor = ..gdi.rgbReverse( this.color  ) | ( 0xFF << 24 ) 
				var brush = ..gdip.solidBrush( this.argbColor );
				
				/**
	 			if( strformat.align = 1/*_GdipStringAlignmentCenter*/ && strformat.lineAlign = 1/*_GdipStringAlignmentCenter*/){
					var bound = graphics.measureString( text , font ,rcText, strformat,brush) 
					bound.x = rcText.x + (rcText.width - bound.width) /2;
					bound.y = rcText.y + (rcText.height - bound.height) /2;
					rcText = bound;
				} 
				**/
				if( this[["(font)"]] ) {
					if( !this.onDrawString ){
						graphics.drawString( text ,this[["(font)"]],rcText, strformat,brush);
					}
					else{
						this.onDrawString(graphics,text,this[["(font)"]],rcText, strformat,brush)	
					}
				}
				brush.delete();
			}
		} 
			
		graphics.delete();
		graphics = ..gdip.graphics(this) 
		this.cacheBitmap = graphics.createCachedBitmap(bmpMem);  
		graphics.delete();
		bmpMem.dispose();
		
		this.cacheBitmapWidth = width;
		this.cacheBitmapHeight = height;
		
		if( this.cacheOrphanWindowRect__ ){
		
		 	..gdi.layeredBuffer( this.hwnd,  
        		function( hdc,hMemDc,hMemBitmap,width,height ){
        			var graphics = ..gdip.graphics(hMemDc); 
					graphics.drawCachedBitmap(this.cacheBitmap,0,0);
					graphics.delete(); 
            	 	
        			..gdi.updateLayeredWindow( this.hwnd,hMemDc,::SIZE(width,height) ,..gdi.blendFunction()  ); 
        		}
        	)
		}
		return this.cacheBitmap;
	};
	onCreated = function () {  
	
		this.wndproc = { 
			[ 0xF/*_WM_PAINT*/] = function (hwnd, message, wParam, lParam) {   
			 
				..gdi.paint( hwnd,
					function( hdc,width, height,rcPaint,fErase,paintStruct ) {
						if( ! ( (width == this.cacheBitmapWidth) && (height == this.cacheBitmapHeight ) ) ){
							this.updateBitmapCache();
						}  
						if(this.cacheBitmap){
							..gdi.doubleBuffer( hdc,width,height,
							    function( hdc,hMemDc,hMemBitmap ){
							    	::BitBlt(hMemDc, 0, 0, width, height,hdc , 0, 0, 0xCC0020/*_SRCCOPY*/);
							        var graphics = ..gdip.graphics(hMemDc); 
									graphics.setClipRect( rcPaint.left,rcPaint.top,rcPaint.right,rcPaint.bottom,0/*_GdipCombineModeReplace*/);
									graphics.drawCachedBitmap(this.cacheBitmap,0,0);
							        ::BitBlt(hdc, 0, 0, width, height, hMemDc, 0, 0, 0xCC0020/*_SRCCOPY*/);
							        graphics.delete();
							    }
							) 
						}  
					}
				);  
					
				return 1; 
			}
			[ 0x14/*_WM_ERASEBKGND*/] = function (hwnd, uMsg, wParam, lParam) {
				return 0;
			} 
			[ 0xC/*_WM_SETTEXT*/ ] = function (hwnd, uMsg, wParam, lParam) {
				if(lParam){
				 	var text = ..raw.str( topointer(lParam) ); 
				 	if( text != this[["(text)"]] ){
				 		this[["(text)"]]  = text;
						this.redrawTransparent();
					}
				}
			} 
			[ 0x84/*_WM_NCHITTEST*/ ] = function (hwnd, uMsg, wParam, lParam) {
				if( !this.notify ) return 0xFFFFFFFF/*_HTTRANSPARENT*/;
				return 1/*_HTCLIENT*/
			}
			[ 0x87/*_WM_GETDLGCODE*/ ] = function (hwnd, uMsg, wParam, lParam) {  
				return this.notify? 0x10/*_DLGC_DEFPUSHBUTTON*/  : 0x100/*_DLGC_STATIC*/;
			} 
			[ 0x20/*_WM_SETCURSOR*/ ] = function (hwnd, uMsg, wParam, lParam) {   
				 if( this.isHyperlink() ){
				 	::SetCursor( __cursor_hand ); 
				 	return true; 
				 }
			} 
		}

		if( this.notify ){ 
			this._tracker =  ..win.ui.tracker(this);
		}
	};
	_onDestroy = function(){
		var foreground = this[["(foreground)"]];
		var background = this[["(background)"]];
		this[["(foreground)"]] = null;
		this[["(background)"]] = null;
		
		if( background ? ( ! background.isCached() ) ){
			background.dispose();
		} 
		if( foreground ? ( ! foreground.isCached() ) ){
			foreground.dispose();
		}
		if( this.cacheBitmap ) {
			var cacheBitmap = this.cacheBitmap;
			this.cacheBitmap = null;
			
			..gdip.DeleteCachedBitmap(cacheBitmap); 
		}
		if( this[["(progress-clip-path)"]]) this[["(progress-clip-path)"]].delete();
		if( this["(font)"] ) this["(font)"].delete();   
	};
	@_metaProperty
}

namespace plus {

	_metaProperty = ..win.ui.ctrl.metaProperty( 
		_onStateChange = function(){  
			var setting = owner[["(skin-setting)"]];  
			if( setting ){
				var state = owner.state; 
				if( state.checked ) setting = setting[["checked"]] : setting;
				var bt  = setting[["background"]];
				var ft  = setting[["foreground"]];
				var ct =  setting[["color"]];
				
				
				var b,f,c;
				if( state.disabled ) {
					b = bt[["disabled"]]
					f = ft[["disabled"]]
					c = ct[["disabled"]]
				} 
				elseif( state.active ){
					b = bt[["active"]] || bt[["focus"]] || bt[["default"]]
					f = ft[["active"]] || ft[["focus"]] || ft[["default"]]
					c = ct[["active"]]  || ct[["focus"]] || ct[["default"]]
				}
				elseif( state.hover ){ 
					b = bt[["hover"]] || bt[["default"]]
					f = ft[["hover"]] || ft[["default"]]
					c = ct[["hover"]] || ct[["default"]] 
				} 
				elseif( state.focus ){
					b = bt[["focus"]] || bt[["default"]]
					f = ft[["focus"]] || ft[["default"]]
					c = ct[["focus"]]  || ct[["default"]]
				} 
				else {
					b = bt[["default"]]
					f = ft[["default"]]
					c = ct[["default"]]  
				} 
				if(bt && b) owner.setBackground(b,,false);
				if(ft && f) owner.setForeground(f,,false);
				owner.argbColor = c : ct.default; 
				if( owner.onStateChange ) owner.onStateChange();
				owner.redrawTransparent();
				return;
			}
			if( owner.onStateChange ) owner.onStateChange();
		};
		checked = {
			_get = function () {
				return owner.state.checked;
			}
			_set = function (v) {
				if(v!=owner.state.checked){
					if( v ? owner.radioGroup ){ owner.radioClick() }
					else owner.state.checked = v;
					owner._onStateChange();
				}
			}
		};
		skin = function(s){ 
			if( type(s) != type.table ) error("²ÎÊý@1ÀàÐÍ´íÎó",2);
			if( s.group ) owner.radioGroup = s.group;
			
			if(owner[["(skin-setting)"]]){  
				..table.mixr(owner[["(skin-setting)"]],s);
				owner._onStateChange();
				return;
			}
			
			if( s.background ) {
				if( ! s.background.default ) { s.background.default = owner.getBackground(); }
				elseif(!owner[["(skin-setting)"]]){ //ÊÍ·ÅIDEÉè¼ÆÆ÷Ìí¼ÓµÄ°üº¬Í¼Æ¬
				    var old = owner.setBackground(s.background.default,,false);
				    if( old ? ( ! old.isCached() ) ) { old.dispose(); }
				} 
			};
			
			if( s.foreground ){ 
				if(! s.foreground.default ) { s.foreground.default = owner.getForeground(); }
				elseif(!owner[["(skin-setting)"]]){ //ÊÍ·ÅIDEÉè¼ÆÆ÷Ìí¼ÓµÄ°üº¬Í¼Æ¬
				    var old = owner.setForeground(s.foreground.default,,false);
				    if( old ? ( ! old.isCached() ) ) { old.dispose(); }
				} 
			}
				
			if( !s.color ) s.color = {};
			..table.mix( s.color,{ default = owner.argbColor;disabled = ::GetSysColor(0x11/*_COLOR_GRAYTEXT*/)| ( 0xFF << 24 ) } ); 
			
			if( s.checked ){
				if( type(s.checked) != type.table) error("checked×Ö¶Î±ØÐëÊÇ±í¶ÔÏó",2); 
				if( !s.checked.color ) s.checked.color = {};
				if( !s.checked.color.default ) s.checked.color.default = s.color.default; 
			}
			owner[["(skin-setting)"]] = s;
			
			//¿ªÆô[ÊÂ¼þ»Øµ÷]ÊôÐÔ
			if( !owner.notify ) {
				owner.notify = true;
				if(!owner._tracker){
					owner._tracker =  ..win.ui.tracker(owner); 
				}
			}
			
			if( owner.state.disabled ){
				owner._onStateChange(); 
			}
		};
		text = {
			_get = function(){ 
				return ..win.getText( owner[["hwnd"]] );
			}
			_set = function(v){ 
				..win.setText( owner[["hwnd"]],tostring(v) );  
			}
		}; 
		background = {
			_get = function () {
				return owner.getBackground();
			}
			_set = function (v) {
				var old = owner.setBackground(v,,!owner[["initializing"]]);
				if( old ? ( ! old.isCached() ) ) { old.dispose(); }
			}
		}
		foreground = {
			_get = function () {
				return owner.getForeground();
			}
			_set = function (v) {
				var old = owner.setForeground(v,, !owner[["initializing"]]); 
				if( old ? ( ! old.isCached() ) ) { old.dispose(); }
			}
		}
		repeat = {
			_get = function () {
				return owner.getRepeat();
			}
			_set = function (v) {
				owner.setRepeat(v, !owner[["initializing"]]); 
			}
		}
		getRepeat = function(){
			return owner[["(repeat)"]];
		};
		setRepeat = function(v,redraw=true){
			owner[["(repeat)"]] = v; 
			if( redraw ) owner.redrawTransparent();
		};
		foreRepeat = {
			_get = function () {
				return owner.getForeRepeat();
			}
			_set = function (v) {
				owner.setForeRepeate(v, !owner[["initializing"]]); 
			}
		}
		getForeRepeat = function(){
			return owner[["(foreRepeat)"]];
		};
		setForeRepeate = function(v,redraw=true){
			owner[["(foreRepeat)"]] = v; 
			if( redraw ) owner.redrawTransparent();
		}; 
		getBackground = function(){
			return owner[["(background)"]];
		};
		setBackground = function(bmp,cacheName,redraw=true){
			var background = owner[["(background)"]];
			if( bmp == background ) return;
			
			var old = background;
			if( bmp ){
				background = ..gdip.loadCachedBitmap(bmp,cacheName); 
				if( background ){ 
					if( old ) old.stopAnimation();
					if( owner.animation === null ||  (owner.animation) ){
						background.createAnimation(owner,owner.redrawTransparent);
					} 
					owner[["(background)"]] = background;
				} 
				else {
					return;
				} 
			}
			else {
				return;
			}
			
			if( redraw ) owner.redrawTransparent(); 
			return old;  
		};
		getForeground = function(){
			return owner[["(foreground)"]];
		};
		setForeground  = function(bmp,cacheName,redraw=true){
			var foreground = owner[["(foreground)"]];
			if( bmp == foreground ) return;
			
			var old = foreground;
			
			
			if( bmp ){
				foreground = ..gdip.loadCachedBitmap(bmp,cacheName); 
				if( foreground ){ 
					if( old ) old.stopAnimation();
					if( owner.animation === null ||  (owner.animation) ){ 
						foreground.createAnimation(owner,owner.redrawTransparent);
					}
					owner[["(foreground)"]] = foreground;
				}
				else {
					return;
				}
			}
			else {
				return;
			}
			
			if( redraw ) owner.redrawTransparent();
			return old;  
		}; 
		isHyperlink = function(){
			return ( owner.notify ? #owner[["(text)"]] ? ( !owner[["(background)"]] ) ? ( !owner[["(foreground)"]] ) );
		};
		progressPercentage  = {
			_get = function () { 
				if(!owner[["(progress-range)"]]) return 100;
				return ..math.min( 100, ..math.round( owner[["(progress-pos)"]] / owner[["(progress-range)"]],2) * 100 );
			}
			_set = function (v) {
				if(!owner[["(progress-range)"]]) {
					if( owner[["(progress-range)"]] === 0 ) return;
					error("ÇëÏÈÉè¶¨½ø¶ÈÇø¼ä",2);
				}
				if( v<1) v = 1;if(v>100)v=100;
				owner[["(progress-pos)"]] = owner[["(progress-range)"]] * ( v/100 );
				owner.redrawTransparent();
				if( owner[["onPosChanged"]] ) owner.onPosChanged( owner[["(progress-min)"]] + owner[["(progress-pos)"]] );
			}
		}; 
		progressPos = {
			_get = function () {
				if(!owner[["(progress-range)"]]) return 0;
				return owner[["(progress-min)"]] + owner[["(progress-pos)"]];
			}
			_set = function (v) {
				if( v === null ) error("½ø¶ÈÖµ²»ÄÜÎª¿Õ",2);
				if(!owner[["(progress-range)"]]) {
					if( owner[["(progress-range)"]] === 0 ) return;
					error("ÇëÏÈÉè¶¨½ø¶ÈÇø¼ä",2);
				}
				v = ..math.max(v, owner[["(progress-min)"]])
				owner[["(progress-pos)"]] = ..math.min( v - owner[["(progress-min)"]],owner[["(progress-range)"]]);
				owner.redrawTransparent();
				if( owner[["onPosChanged"]] ) owner.onPosChanged(owner[["(progress-min)"]] + owner[["(progress-pos)"]]);
			}
		}; 
		setTrackbarRange = function(min,max){
			if( type(min) != "number") error("²ÎÊý@1²»ÊÇÓÐÐ§µÄÊýÖµ",2)
			if( type(max) != "number") error("²ÎÊý@2²»ÊÇÓÐÐ§µÄÊýÖµ",2)
			
			owner.setProgressRange(min,max);
			owner.mode = "trackbar";
			
			var rc = owner.getClientRect(); 
			var w = rc.right - rc.left;
			var h = rc.bottom - rc.top; 
			
			if( w > h ){
				owner.onMouseDrag = function(wParam,lParam){
					var x = ..win.getMessagePos(lParam);
					var rc = owner.getClientRect(); 
					var min = owner[["(progress-min)"]];
					var range = owner[["(progress-range)"]]; 
					var p = owner.foreLeft + owner.foreRight/2;
					var pos = ..math.ceil( range * ( ( x - owner.paddingLeft - p ) 
						/ (rc.right - owner.paddingLeft - owner.paddingRight - p  ) ) );
						
					if( pos > range ) pos = range;
					elseif( pos < 1 ) pos = 1; 
					
					owner[["(progress-pos)"]] = pos;
					owner.redrawTransparent(); 
					if( owner[["onPosChanged"]] ) owner.onPosChanged(min + pos);
				}
			}
			else {
				owner.onMouseDrag = function(wParam,lParam){
					var x,y = ..win.getMessagePos(lParam);
					var rc = owner.getClientRect(); 
					var min = owner[["(progress-min)"]];
					var range = owner[["(progress-range)"]];
				 
					var bottom = rc.bottom - owner.paddingBottom - owner.foreBottom;  
					var p = owner.paddingTop + owner.foreTop/2;
					var pos = y < bottom - p ? ..math.ceil( range * ( ( bottom - y - owner.foreTop/2  ) / (bottom - p ) ) ) : 0;
					if( pos > range ) pos = range;
					elseif( pos < 1 ) pos = 1;
					
					owner[["(progress-pos)"]] = pos;
					owner.redrawTransparent(); 
					if( owner[["onPosChanged"]] ) owner.onPosChanged( owner[["(progress-min)"]] + pos );
				}
			}
			
			owner.onMouseDown = owner.onMouseDrag; 
			
			//¿ªÆô[ÊÂ¼þ»Øµ÷]ÊôÐÔ
			if( !owner.notify ) {
				owner.notify = true;
				if(!owner._tracker) owner._tracker =  ..win.ui.tracker(owner);
			}
		};
		setPieRange = function(min,max){
			if( type(min) != "number") error("²ÎÊý@1²»ÊÇÓÐÐ§µÄÊýÖµ",2)
			if( type(max) != "number") error("²ÎÊý@2²»ÊÇÓÐÐ§µÄÊýÖµ",2) 
			
			import ..gdip.path;
			owner[["(progress-clip-path)"]] = ..gdip.path();
			owner.setProgressRange(min,max);
			owner.mode = "pie";
		};
		getProgressRange = function(){
			var min = owner[["(progress-min)"]];
			return min,min + owner[["(progress-range)"]];
		};
		setProgressRange = function(min,max){
			if( type(min) != "number") error("²ÎÊý@1²»ÊÇÓÐÐ§µÄÊýÖµ",2)
			if( type(max) != "number") error("²ÎÊý@2²»ÊÇÓÐÐ§µÄÊýÖµ",2)
			if( max < min ){
				var temp = min;min=max;max=temp;
			}
			if( min == max ) {
				if( min == 1 ) min = 0;
			}
			
			owner[["(progress-min)"]] = min;
			owner[["(progress-range)"]] = max -min;
			owner[["(progress-pos)"]] = 0;
			owner.mode = "progress";
		}; 
		stepProgress = function(i,redraw){
			if( i === null ) i =  1;
			if( redraw === null ) redraw = true;
			var p,r = owner[["(progress-pos)"]],owner[["(progress-range)"]]; 
			if(!r) {
				if( r === 0 ) return;
				error("ÇëÏÈÉè¶¨½ø¶ÈÇø¼ä",2);
			}
			p = p + i;
			var ret;
			if( p < 0 ) p = 0;
			elseif( p > r ) p = r;
			else ret = true;
			
			owner[["(progress-pos)"]] = p;
			if(redraw) owner.redrawTransparent(); 
			if( owner[["onPosChanged"]] ) owner.onPosChanged( owner[["(progress-min)"]] + p);
			return ret;
		};
		getFont = function(){
			if(owner["(font)"]){
				var graphics = ..gdip.graphics(owner);
				var lf = owner["(font)"].getLogFont(graphics);
				graphics.delete();
				return lf;
			} 
		};
		setFont = function(f,own = true ){
			if( type(f) == type.pointer ){
				var lf = LOGFONT(); 
				if( !::GetObject(f, ..raw.sizeof(lf), lf) ) return;
				if(own) ::DeleteObject(f);
				f = lf;
			}
			if(type(f) != type.table ) error("²ÎÊý´íÎó@1",2)
			if(!f._struct) f = ::LOGFONT(f);
			if( f.handle && own) f.deleteIndirect();
			
			if(f.color) {
				owner.color = f.color
				owner.argbColor = ..gdi.rgbReverse( f.color ) | ( 0xFF << 24 ) 
			} 

			var hdc = ::GetDC(owner.hwnd);
			owner[["(font)"]] = ..gdip.font( hdc,f ); 
			::ReleaseDC(owner.hwnd,hdc);  

			return true; 
		}; 
		setFontEx = function(font){
			if( type.rget(font) == "gdip.font" && font.getLogFont ){
				owner[["(font)"]] = font;
			}
		};
		getFontEx = function(){
			return owner[["(font)"]];
		};
	);
	
	__cursor_hand  = ::LoadCursor(,topointer(32649/*_IDC_HAND*/));
	__stringAlignment = { 
		top =0/*_GdipStringAlignmentNear*/ ;bottom = 2/*_GdipStringAlignmentFar*/ ;
		left =0/*_GdipStringAlignmentNear*/ ; right = 2/*_GdipStringAlignmentFar*/;
		center = 1/*_GdipStringAlignmentCenter*/;
	}	
	__className = ..win.registerClassEx( "AAPicturePlus2",{
		lpfnWndProc = ::DefWindowProc; //±ØÐëÒÆ³ýstaticµÄ»Øµ÷º¯Êý,·ñÔò¶ÁÐ´text»áÄÚ´æ´íÎó
		style =  0x4083/*_CS_HREDRAW | _CS_VREDRAW | _CS_PARENTDC | _CS_GLOBALCLASS*/
		},"static" ); 
}

/***intellisense() 
!ui_ctrl_plus.notify = ÊÇ·ñÆôÓÃÊÂ¼þ»Øµ÷\nÉèÎªfalse½«²»ÄÜÏìÓ¦Êó±ê°´¼üµÈ½»»¥ÊÂ¼þ
!ui_ctrl_plus.setFontEx(.(×ÖÌå) = ÉèÖÃgdip.font×ÖÌå\n×ÖÌåÓÉ¿Ø¼þ½Ó¹Ü²¢¸ºÔðÊÍ·Å
!ui_ctrl_plus.getFontEx() = ·µ»Øgdip.font×ÖÌå\n×¢Òâ×ÖÌåÉúÃüÆÚÓÉ¿Ø¼þ¹ÜÀí\n!gdipfont.
!ui_ctrl_plus.textRenderingHint = @.textRenderingHint = _GdipTextRenderingHint__ ;
!ui_ctrl_plus.trimming = @.trimming = _GdipStringTrimming__ ;
!ui_ctrl_plus.isHyperlink() = ¿Ø¼þ²»ÉèÖÃ±³¾°¡¢Ç°¾°\nµ«ÉèÖÃÁËÏÔÊ¾ÎÄ±¾,²¢ÆôÓÃÊÂ¼þ»Øµ÷Ôò¸ÃÖµ·µ»ØÕæ
!ui_ctrl_plus.checked = ¸ÃÊôÐÔ¿ÉÓÃÓÚÇÐ»»Ñ¡È¡×´Ì¬
!ui_ctrl_plus.radioGroup = ÓÃÓÚÖ¸¶¨µ¥Ñ¡°´Å¥·Ö×éÃû³Æ\nÒ²¿ÉÒÔÔÚskinº¯ÊýµÄgroupÊôÐÔÖÐÖ¸¶¨¸ÃÖµ
!ui_ctrl_plus.radioValue() = µ¥Ñ¡Ä£Ê½ÏÂÑ¡ÖÐ¿Ø¼þµÄÎÄ±¾
!ui_ctrl_plus.radioClick() = µ¥Ñ¡Ä£Ê½ÏÂÑ¡ÖÐ¿Ø¼þ
!ui_ctrl_plus.progressPercentage = ½ø¶ÈÌõµ±Ç°°Ù·Ö±È
!ui_ctrl_plus.progressPos = ½ø¶ÈÌõµ±Ç°Öµ
!ui_ctrl_plus.setTrackbarRange( = ÉèÖÃ¸ú×ÙÌõ·¶Î§,\n¿ÉÊ¹ÓÃonPosChangedÊÂ¼þ»ñÈ¡µ±Ç°Î»ÖÃ
!ui_ctrl_plus.setTrackbarRange(.(×îÐ¡Öµ,×î´óÖµ) = ÐèÒªÊ×ÏÈÖ¸¶¨Ç°¾°Í¼²¢Ö¸¶¨Îª¾Å¹¬¸ñÀ­ÉìÏÔÊ¾
!ui_ctrl_plus.setPieRange( = ÉèÖÃÉÈÐÎ½ø¶ÈÌõ·¶Î§
!ui_ctrl_plus.setPieRange(.(×îÐ¡Öµ,×î´óÖµ) = ÐèÒªÊ×ÏÈÖ¸¶¨Ô²ÐÎ±³¾°¡¢Ç°¾°Í¼\n²¢Ö¸¶¨ÎªcenterÏÔÊ¾Ä£Ê½
!ui_ctrl_plus.setProgressRange( = ÉèÖÃ½ø¶ÈÌõ·¶Î§
!ui_ctrl_plus.getProgressRange() = ·µ»Ø½ø¶ÈÌõ×îÐ¡Öµ,×î´óÖµ
!ui_ctrl_plus.setProgressRange(.(×îÐ¡Öµ,×î´óÖµ) = ÐèÒªÊ×ÏÈÖ¸¶¨Ç°¾°Í¼²¢Ö¸¶¨Îª¾Å¹¬¸ñÀ­ÉìÏÔÊ¾
!ui_ctrl_plus.stepProgress( = Ôö¼Ó½ø¶ÈÌõµÄÖµ
!ui_ctrl_plus.stepProgress(.(²½½øµ¥Î»,ÊÇ·ñË¢ÐÂ) = ²½½øµ¥Î»¿ÉÒÔÊ¡ÂÔ,Ä¬ÈÏÎª1\n²ÎÊý@2¿ÉÊ¡ÂÔ,Ä¬ÈÏÎªtrue\n½ø¶ÈÌõµ½Î²²¿»òÍ·²¿Ôò·µ»Øfalse,·ñÔò·µ»Øtrue
!ui_ctrl_plus.bkTop = ÉÏ,±³¾°Í¼\nexpandÄ£Ê½ÎªÇÐÍ¼×ø±ê\nÆäËûÄ£Ê½Îª±ß¾à
!ui_ctrl_plus.bkRight = ÓÒ,±³¾°Í¼\nexpandÄ£Ê½ÎªÇÐÍ¼×ø±ê\nÆäËûÄ£Ê½Îª±ß¾à
!ui_ctrl_plus.bkBottom = ÏÂ,±³¾°Í¼\nexpandÄ£Ê½ÎªÇÐÍ¼×ø±ê\nÆäËûÄ£Ê½Îª±ß¾à
!ui_ctrl_plus.bkLeft = ×ó,±³¾°Í¼\nexpandÄ£Ê½ÎªÇÐÍ¼×ø±ê\nÆäËûÄ£Ê½Îª±ß¾à
!ui_ctrl_plus.foreTop = ÉÏ,Ç°¾°Í¼\nexpandÄ£Ê½ÎªÇÐÍ¼×ø±ê\nÆäËûÄ£Ê½Îª±ß¾à\n²»Ö¸¶¨Ä£Ê½ÎªÆ«ÒÆÖµ,¸ºÊýÎªÓÒÏÂ½Ç×ø±ê,Ð¡ÊýÎªÊ£Óà¿Õ¼ä°Ù·Ö±È
!ui_ctrl_plus.foreRight = ÓÒ,Ç°¾°Í¼\nexpandÄ£Ê½ÎªÇÐÍ¼×ø±ê\nÆäËûÄ£Ê½Îª±ß¾à
!ui_ctrl_plus.foreBottom = ÏÂ,Ç°¾°Í¼\nexpandÄ£Ê½ÎªÇÐÍ¼×ø±ê\nÆäËûÄ£Ê½Îª±ß¾à
!ui_ctrl_plus.foreLeft = ×ó,Ç°¾°Í¼\nexpandÄ£Ê½ÎªÇÐÍ¼×ø±ê\nÆäËûÄ£Ê½Îª±ß¾à\n²»Ö¸¶¨Ä£Ê½ÎªÆ«ÒÆÖµ,¸ºÊýÎªÓÒÏÂ½Ç×ø±ê,Ð¡ÊýÎªÊ£Óà¿Õ¼ä°Ù·Ö±È
!ui_ctrl_plus.argbColor = ARGB×ÖÌåÑÕÉ«,Ö§³Ö°ëÍ¸Ã÷\nÊ¹ÓÃÊýÖµ±íÊ¾ÑÕÉ«·ÖÁ¿:0xAARRGGBB\n×¢ÒâÓëRGBµÄ·ÖÁ¿Ë³ÐòÊÇ·´¹ýÀ´µÄ
!ui_ctrl_plus.setRepeat(.("Ä£Ê½",ÊÇ·ñÖØ»æ) = ÐÞ¸Ä±³¾°ÏÔÊ¾Ä£Ê½\nÖ§³ÖÄ£Ê½expand,strech,center,tile,scale
!ui_ctrl_plus.setForeRepeat(.("Ä£Ê½",ÊÇ·ñÖØ»æ) = ÐÞ¸ÄÇ°¾°ÏÔÊ¾Ä£Ê½\nÖ§³ÖÄ£Ê½expand,strech,center,tile,scale
!ui_ctrl_plus.repeat = ±³¾°ÏÔÊ¾Ä£Ê½\nÖ§³ÖÄ£Ê½expand,strech,center,tile,scale\expandÄ£Ê½foreTop,foreRight,foreBottom,foreLeftÎª¾Å¹¬¸ñÇÐÍ¼×ø±ê\nÆäËûÄ£Ê½ÎªÏÔÊ¾±ß¾à
!ui_ctrl_plus.foreRepeat = Ç°¾°ÏÔÊ¾Ä£Ê½\nÖ§³ÖÄ£Ê½expand,strech,center,tile,scale\nÈç¹ûÎªnullÔòforeLeft,foreRightÎªÆ«ÒÆ×ø±ê\expandÄ£Ê½foreTop,foreRight,foreBottom,foreLeftÎª¾Å¹¬¸ñÇÐÍ¼×ø±ê\nÆäËûÄ£Ê½ÎªÏÔÊ¾±ß¾à
!ui_ctrl_plus.background = ±³¾°Í¼Ïñ\nÖ¸¶¨Ò»¸öÂ·¾¶»ò×ÊÔ´Â·¾¶¿Ø¼þ½«×Ô¶¯»º´æÊ¹ÓÃÆµ·±µÄÍ¼Ïñ\nÄÚ´æÍ¼Ïñ½¨ÒéÊ¹ÓÃsetBackgroundº¯ÊýÖ¸¶¨»º´æÃû\n!gdipbitmap.
!ui_ctrl_plus.foreground = Ç°¾°Í¼Ïñ\nÖ¸¶¨Ò»¸öÂ·¾¶»ò×ÊÔ´Â·¾¶¿Ø¼þ½«×Ô¶¯»º´æÊ¹ÓÃÆµ·±µÄÍ¼Ïñ\nÄÚ´æÍ¼Ïñ½¨ÒéÊ¹ÓÃsetForegroundº¯ÊýÖ¸¶¨»º´æÃû\n!gdipbitmap.
!ui_ctrl_plus.setBackground() = !gdipbitmap.
!ui_ctrl_plus.setForeground() = !gdipbitmap.
!ui_ctrl_plus.setBackground(.(±³¾°Í¼Ïñ,»º´æÃû,Ë¢ÐÂÖØ»æ) = ÐÞ¸Ä±³¾°Í¼Ïñ\n»º´æÃûÎª¿ÉÑ¡²ÎÊý,Ä¬ÈÏÒÔÂ·¾¶Îª»º´æÃû,ÉèÎªfalse½ûÖ¹»º´æ,\nÈç¹û²ÎÊý@1ÊÇÍ¼ÏñÊý¾ÝÔò¿ÉÒÔÊ¹ÓÃ²ÎÊý@2Ö¸¶¨»º´æÃû\nË¢ÐÂÖØ»æ²ÎÊý@3Ä¬ÈÏÎªtrue\n¸Ãº¯ÊýÉèÖÃ³É¹¦·µ»ØÔ­À´µÄ±³¾°Í¼
!ui_ctrl_plus.setForeground(.(±³¾°Í¼Ïñ,»º´æÃû,Ë¢ÐÂÖØ»æ) = ÐÞ¸Ä±³¾°Í¼Ïñ\n»º´æÃûÎª¿ÉÑ¡²ÎÊý,Ä¬ÈÏÒÔÂ·¾¶Îª»º´æÃû,ÉèÎªfalse½ûÖ¹»º´æ,\nÈç¹û²ÎÊý@1ÊÇÍ¼ÏñÊý¾ÝÔò¿ÉÒÔÊ¹ÓÃ²ÎÊý@2Ö¸¶¨»º´æÃû\nË¢ÐÂÖØ»æ²ÎÊý@3Ä¬ÈÏÎªtrue\n¸Ãº¯ÊýÉèÖÃ³É¹¦·µ»ØÔ­À´µÄÇ°¾°Í¼
!ui_ctrl_plus.state.hover = Êó±êÊÇ·ñÔÚ¿Ø¼þÉÏ·½\n×¢ÒâÖ±½ÓÐÞ¸Ä¸Ã×´Ì¬¿Ø¼þ²»¸ºÔðÖØ»æ
!ui_ctrl_plus.state.focus = ÊÇ·ñÒÑµÃµ½½¹µã\n×¢ÒâÖ±½ÓÐÞ¸Ä¸Ã×´Ì¬¿Ø¼þ²»¸ºÔðÖØ»æ
!ui_ctrl_plus.state.active = Êó±ê»ò¼üÅÌ¼ü°´ÏÂ×´Ì¬\n×¢ÒâÖ±½ÓÐÞ¸Ä¸Ã×´Ì¬¿Ø¼þ²»¸ºÔðÖØ»æ
!ui_ctrl_plus.state.disabled = ÒÑ½ûÓÃ\n×¢ÒâÖ±½ÓÐÞ¸Ä¸Ã×´Ì¬¿Ø¼þ²»¸ºÔðÖØ»æ 
!ui_ctrl_plus.state.checked = ÊÇ·ñÑ¡ÖÐ×´Ì¬\n×¢ÒâÖ±½ÓÐÞ¸Ä¸Ã×´Ì¬¿Ø¼þ²»¸ºÔðÖØ»æ 
!ui_ctrl_plus.oncommand( id,event ) = @.oncommand = function( id,event ){
	__/*¿Ø¼þ±»µ¥»÷*/
}
!ui_ctrl_plus.onPosChanged( pos ) = @.onPosChanged = function( pos ){
	__/*½ø¶ÈÖµ±ä¸ü*/
}
!ui_ctrl_plus.onDrawContent(graphics,rc) = @.onDrawContent = function(graphics,rc){
	__/*·µ»ØÕæÈ¡Ïû»æÖÆÎÄ±¾¡¢Ç°¾°µÈÄ¬ÈÏ²Ù×÷*/
}
!ui_ctrl_plus.onDrawString()= @.onDrawString = function(graphics,text,font,rectf,strformat,brush){
    __/*×Ô¶¨ÒåÊä³öÎÄ±¾,Çë²»ÒªÉ¾³ý´«Èë²ÎÊýÖÐµÄGDI+¶ÔÏó*/
    graphics.drawString(text,font,rectf,strformat,brush);
}
!ui_ctrl_plus.OnMouseEnter = @.OnMouseEnter = function(wParam,lParam){
	__/*Êó±êÒÆÈë*/
}
!ui_ctrl_plus.onMouseLeave = @.onMouseLeave = function(wParam,lParam){
	__/*Êó±êÒÆ³ö*/
}
!ui_ctrl_plus.onMouseHover = @.onMouseHover = function(wParam,lParam){
	__/*Êó±êÐüÍ£*/
}
!ui_ctrl_plus.onMouseMove = @.onMouseMove = function(wParam,lParam){
	if( wParam & 0x1/*_MK_LBUTTON*/ ){
		__/*Êó±êÍÏ¶¯*/
	}
}
!ui_ctrl_plus.onMouseDown = @.onMouseDown = function(wParam,lParam){
	__/*Êó±ê°´ÏÂ*/
} 
!ui_ctrl_plus.onMouseClick = @.onMouseClick = function(wParam,lParam){
	__/*Êó±êµ¥»÷*/
}
!ui_ctrl_plus.onKeyDown = @.onKeyDown = function(keyCode,lParam,repeat){
	__/*°´ÏÂ¼üÅÌ¼ü*/
}
!ui_ctrl_plus.onKeyUp = @.onKeyUp = function(keyCode,lParam){
	__/*·Å¿ª¼üÅÌ¼ü*/
}
!ui_ctrl_plus.onFocusGot = @.onFocusGot = function(wParam,lParam){
	__/*µÃµ½½¹µã*/
}
!ui_ctrl_plus.onFocusLost = @.onFocusLost = function(wParam,lParam){
	__/*Ê§È¥½¹µã*/
}
!ui_ctrl_plus.onStateChange = @.onStateChange = function(){
	__/*×´Ì¬ÒÑ¸Ä±ä*/
}
!ui_ctrl_plus.skin = @.skin(\n     background = { \n         hover = "/res/images/button-hover.png";\n         focus = "/res/images/button-focus.png";\n         active = "/res/images/button-active.png";\n         disabled = "/res/images/button-disabled.png"; \n     }\n    color = {\n        hover = 0xF00000FF;__/*0xAARRGGBB AÎªÍ¸Ã÷¶È,RÎªºìÉ«·ÖÁ¿,GÎªÂÌÉ«·ÖÁ¿,BÎªÀ¶É«·ÖÁ¿*/ \n    } \n) 
!ui_ctrl_plus.cls = Éè¼ÆÊ±ÀàÃû
!ui_ctrl_plus.className = ÔËÐÐÊ±ÀàÃû
!ui_ctrl_plus.hwnd = ¿Ø¼þ¾ä±ú
!ui_ctrl_plus.id = ¿Ø¼þID
!ui_ctrl_plus.text = ¿Ø¼þÎÄ±¾
!ui_ctrl_plus.getForm() = Èç¹ûÊÇ´°Ìå·µ»Ø×ÔÉí\nÈç¹ûÊÇ¿Ø¼þÔò·µ»Ø_parentForm\n!winform.
!ui_ctrl_plus.isForm = ´°Ìå·µ»Øtrue,¿Ø¼þ·µ»Øfalse
!ui_ctrl_plus._parentForm = ¿Ø¼þËùÔÚµÄ¸¸´°¿Ú(Ö¸win.form¶ÔÏó)\n!winform.
!ui_ctrl_plus.getParent() = ·µ»Ø¸¸´°¿Ú\n!ui_ctrl_plus.
!ui_ctrl_plus.setParent(__/*¿Ø¼þ¶ÔÏó*/) = ¸Ä±ä¸¸´°¿Ú 
!ui_ctrl_plus.addCtrl = @.addCtrl(\n	button={ cls="button";text="button";left=33;top=32;right=126;bottom=81;autoResize=false }  \n)
!ui_ctrl_plus.translateAccelerator = @.translateAccelerator = function(msg){ \n	__/*·µ»ØÊÇ·ñ¿ì½Ý¼ü*/\n} 
!ui_ctrl_plus.adjust = @.adjust = function( cx,cy,wParam ) {	 \n	__ \n};  
!ui_ctrl_plus.adjust() = µ÷Õû´°¿Ú - ×Ô¶¨ÒåÊÂ¼þº¯Êý
!ui_ctrl_plus._embedObject = Ç¶ÈëOLE¿Ø¼þ¶ÔÏó\n!embedObject.
!ui_ctrl_plus.createEmbed(.("ÀàÃû",ÈÝÆ÷¶ÔÏó) = Ç¶ÈëOLE¿Ø¼þ,\nÈÝÆ÷¶ÔÏóÅ¶¿ÉÑ¡²ÎÊý,·µ»ØÈÝÆ÷¶ÔÏó,
!ui_ctrl_plus.createEmbed() = !embedObject.
!ui_ctrl_plus.hide = ¿Ø¼þÊÇ·ñÒþ²Ø
!ui_ctrl_plus.disabled = ÊÇ·ñ½ûÓÃ
!ui_ctrl_plus.left = ×ó²à×ø±ê
!ui_ctrl_plus.right = ÓÒ²à×ø±ê
!ui_ctrl_plus.top = ¶¥²¿×ø±ê
!ui_ctrl_plus.bottom = µ×²¿×ø±ê
!ui_ctrl_plus.width = ¿í¶È
!ui_ctrl_plus.height = ¸ß¶È 
!ui_ctrl_plus.setRedraw(false) = ½ûÖ¹ÖØ»æ
!ui_ctrl_plus.setRedraw(true) = »Ö¸´ÖØ»æ
!ui_ctrl_plus.redraw() = Ë¢ÐÂÖØ»æ\n²»ÖØ»æ±³¾°,ËÙ¶È½Ï¿ì
!ui_ctrl_plus.redrawTransparent() = Ë¢ÐÂÖØ»æ\nÈç¹û¿Ø¼þÌí¼ÓÁËÍ¸Ã÷ÑùÊ½ _WS_EX_TRANSPARENT ÔòÖØ»æ´°¿Ú±³¾°
!ui_ctrl_plus.show(true__) = ÏÔÊ¾¿Ø¼þ
!ui_ctrl_plus.getRect() = ¿Ø¼þÇø¿éÎ»ÖÃ(::RECT½á¹¹Ìå)
!ui_ctrl_plus.getRect(true) = ¿Ø¼þÆÁÄ»Çø¿éÎ»ÖÃ(::RECT½á¹¹Ìå)  
!ui_ctrl_plus.setRect(rc) = ÉèÖÃ¿Ø¼þÇø¿éÎ»ÖÃ(::RECT½á¹¹Ìå)  
!ui_ctrl_plus.setRect(rc,true) = ÉèÖÃ¿Ø¼þÆÁÄ»Çø¿éÎ»ÖÃ(::RECT½á¹¹Ìå)
!ui_ctrl_plus.getClientRect() =  ¿Ø¼þ¿Í»§Çø¿éÎ»ÖÃ(::RECT½á¹¹Ìå)\n!rect.
!ui_ctrl_plus.getFont() = ·µ»Ø¿Ø¼þLOGFONT×ÖÌå\n!logfont.
!ui_ctrl_plus.setFont(__/*Ö¸¶¨×ÖÌå*/) = Ö¸¶¨LOGFONT×ÖÌå¶ÔÏó,»òÂß¼­×ÖÌå¾ä±ú 
!ui_ctrl_plus.setFont(»ìÈë×ÖÌåÊôÐÔ) = @.setFont(point=10;name="ËÎÌå");
!ui_ctrl_plus.theme = Íâ¹ÛÖ÷Ìâ,ÀýÈç\nwinform.button.theme = "Explorer"\nwinform.button.theme = false
!ui_ctrl_plus.modifyStyle(.(remove,add) = Èç¹ûÖ¸¶¨µÚÈý¸ö²ÎÊý£¬ÔòÊ¹ÓÃ´Ë²ÎÊýµ÷ÓÃ::SetWidnowPos 
!ui_ctrl_plus.modifyStyleEx(.(remove,add) = Èç¹ûÖ¸¶¨µÚÈý¸ö²ÎÊý£¬ÔòÊ¹ÓÃ´Ë²ÎÊýµ÷ÓÃ::SetWidnowPos
!ui_ctrl_plus.capture = ÊÇ·ñ²¶»ñÈ«¾ÖÊó±êÏûÏ¢
!ui_ctrl_plus.close() = ¹Ø±Õ¿Ø¼þ´°¿Ú
!ui_ctrl_plus.invalidate(__/*¿ÉÑ¡Ê¹ÓÃ::RECT()¶ÔÏóÖ¸¶¨¿Í»§Çø*/) = Ê¹´°¿Ú»æÍ¼ÇøÎÞÐ§
!ui_ctrl_plus.invalidate(__/*¿ÉÑ¡Ê¹ÓÃ::RECT()¶ÔÏóÖ¸¶¨¿Í»§Çø*/,0) = Ê¹´°¿Ú»æÍ¼ÇøÎÞÐ§\n²»Ë¢ÐÂ±³¾°
!ui_ctrl_plus.update() = ÖØ»æinvalidateº¯ÊýÖ¸¶¨µÄÇø¿é
!ui_ctrl_plus.setFocus() = ÉèÖÃ½¹µã 
!ui_ctrl_plus.setPos(.(x×ø±ê,y×ø±ê,¿í,¸ß,²åÈëÎ»ÖÃ,²ÎÊý) = µ÷Õû´°¿ÚÎ»ÖÃ»òÅÅÐò,ËùÓÐ²ÎÊý¿ÉÑ¡\nÍ¬Ê±Ö¸¶¨x,y×ø±êÔòÒÆ¶¯Î»ÖÃ\nÍ¬Ê±Ö¸¶¨¿í¸ßÔò¸Ä±ä´óÐ¡\nÖ¸¶¨²åÈëÎ»ÖÃ(¾ä±ú»ò_HWNDÇ°×º³£Á¿)Ôòµ÷ÕûZÐò
!ui_ctrl_plus.getPos() = ·µ»ØÏà¶Ô×ø±ê,¿í,¸ß\nx,y,cx,cy=win.getPos(hwnd)
!ui_ctrl_plus.messageOnly() = ½«´°¿Ú×ª»»Îªmessage-only window\n¸Ã´°¿Ú²»¿É¼û,½öÓÃÓÚÏûÏ¢·Ö·¢
!ui_ctrl_plus.addtimer(.(¼ä¸ôÊ±¼ä,»Øµ÷º¯Êý) = ´´½¨¶¨Ê±Æ÷\n¼ä¸ôÊ±¼äÒÔºÁÃëÎªµ¥Î»
!ui_ctrl_plus.settimer(.(¶¨Ê±Æ÷ID,¼ä¸ôÊ±¼ä,»Øµ÷º¯Êý) = ÖØÐÂÉèÖÃ¼ä¸ôÊ±¼ä»ò»Øµ÷º¯Êý
!ui_ctrl_plus.orphanWindow(true) = ²ÎÊý±ØÐëÎªtrue,\nÊ¹¿Ø¼þÍÑÀëÔ­À´µÄ´°¿Ú,¿ÉÒÔÏÔÊ¾ÔÚ¸¸´°¿ÚÍâÃæ£¬\nµ«ÈÔÈ»ÏÔÊ¾ÔÚÔ­À´µÄÎ»ÖÃ£¬¼ÌÐøÈçÓ°ËæÐÎµÄ¸úËæ¸¸´°¿ÚÒÆ¶¯»ò¸Ä±ä´óÐ¡,\n¿Ø¼þÔ­À´µÄ¹Ì¶¨±ß¾àµÈ²ÎÊýÈÔÈ»ÓÐÐ§
!ui_ctrl_plus.killtimer(__/*¶¨Ê±Æ÷ID*/) = É¾³ý¶¨Ê±Æ÷
?win.ui.ctrl.plus  =!ui_ctrl_plus.
win.ui.ctrl.plus() = ¸ß¼¶Í¼Ïñ¿Ø¼þ\n!ui_ctrl_plus.
win.ui.ctrl.plus = ¸ß¼¶Í¼Ïñ¿Ø¼þ
end intellisense***/