//appBar 桌面任务栏
import win;
namespace win.appBar;

::Shell32 := ..raw.loadDll("Shell32")
SHAppBarMessage = Shell32.api("SHAppBarMessage","ADDR(INT dwMessage,struct &pData)" )

class APPBARDATA {
  	INT cbSize = 36;
  	addr hWnd;
  	INT uCallbackMessage;
  	INT uEdge;
  	struct rc = {
  		int left;
		int top;
		int right;
		int bottom
  	}
  	addr lParam;
}  

find = function(){
	return ..win.find("Shell_TrayWnd");
}

message = function(msg,data){ 
	data = ..table.mix(APPBARDATA(),data); 
	return SHAppBarMessage( msg,data );
}; 

regist = function(hwnd,message){
	var data = APPBARDATA();
	data.hwnd = hwnd;
	data.uCallbackMessage = message;
	return ( SHAppBarMessage( 0x0/*_ABM_NEW*/,data) );  
};

unRegist = function(hwnd){
	var data = APPBARDATA();
	data.hwnd = hwnd; 
	return ( SHAppBarMessage( 0x1/*_ABM_REMOVE*/,data) );  
}; 

autoHide = function(hwnd,hide){ 
	var data = APPBARDATA();
	data.hwnd = hwnd;
	data.lParam = hide ? 0x1/*_ABS_AUTOHIDE*/ : 0x2/*_ABS_ALWAYSONTOP*/
	return SHAppBarMessage( 0xA/*_ABM_SETSTATE*/,data );
}; 

isAutoHide = function(hwnd){
	var data = APPBARDATA();
	data.hwnd = hwnd; 
	return SHAppBarMessage( 0x4/*_ABM_GETSTATE*/,data )> 0 
};
	
setAutoHideBar = function(hwnd,edge){
	var data = APPBARDATA();
	data.uEdge = 0x0/*_ABE_LEFT*/;
	data.hwnd = hwnd;
	return SHAppBarMessage( 0x8/*_ABM_SETAUTOHIDEBAR*/,data )	
}; 

getAutoHideBar = function() { 

	var data = APPBARDATA();
	data.uEdge = 0x0/*_ABE_LEFT*/;
	var left = SHAppBarMessage( 0x7/*_ABM_GETAUTOHIDEBAR*/,data);
	
	data.uEdge = 0x1/*_ABE_TOP*/;
	var top = SHAppBarMessage( 0x7/*_ABM_GETAUTOHIDEBAR*/,data);
	
	data.uEdge = 0x2/*_ABE_RIGHT*/;
	var right = SHAppBarMessage( 0x7/*_ABM_GETAUTOHIDEBAR*/,data);
	
	data.uEdge = 0x3/*_ABE_BOTTOM*/;
	var bottom = SHAppBarMessage( 0x7/*_ABM_GETAUTOHIDEBAR*/,data);
	return left,top,right,bottom;
}

getTaskBarPos = function(){
	var data = APPBARDATA();
	var ret,data = SHAppBarMessage( 0x5/*_ABM_GETTASKBARPOS*/,data)
	if(ret){
		return data.rc.left,data.rc.top
			,data.rc.right-data.rc.left,data.rc.bottom-data.rc.top;
	}
};  

/**intellisense(win.appBar)
message(.(_ABM__,{} ) = 发送任务栏命令,\n可选在第二个参数中使用表对象指定APPBARDATA属性
find() = 返回系统任务栏句柄
getTaskBarPos() = 返回系统任务栏左从标,顶坐标,宽度,高度
getAutoHideBar() = 返回左,上,右,下四个被设置为自动隐藏的任务栏句柄
setAutoHideBar(.( 任务栏句柄,_ABE_BOTTOM ) = 设置为自动停靠
regist(.(窗口句柄,自定义回调消息ID) = 将窗口注册接收任务栏通知消息,例如 _ABN_FULLSCREENAPP
unRegist(.(窗口句柄) = 取消注册的任务栏回调消息
autoHide(.( 任务栏句柄,true) = 设置为自动隐藏
autoHide(.( 任务栏句柄,false) = 取消自动隐藏
isAutoHide(.( 任务栏句柄 ) = 任务栏是否自动隐藏
end intellisense**/

/**intellisense()
win.appBar = 任务栏
win.appBar(.(句柄) = 可选指定句柄,\n可选在第二个参数中使用表对象指定APPBARDATA属性
win.appBar() = !win_appBar. 

_ABS_ALWAYSONTOP=@0x2/*_ABS_ALWAYSONTOP*/
_ABS_AUTOHIDE=@0x1/*_ABS_AUTOHIDE*/
_ABE_BOTTOM=@0x3/*_ABE_BOTTOM*/
_ABE_LEFT=@0x0/*_ABE_LEFT*/
_ABE_RIGHT=@0x2/*_ABE_RIGHT*/
_ABE_TOP=@0x1/*_ABE_TOP*/
_ABM_SETSTATE=@0xA/*_ABM_SETSTATE*/
_ABM_ACTIVATE=@0x6/*_ABM_ACTIVATE*/
_ABM_GETAUTOHIDEBAR=@0x7/*_ABM_GETAUTOHIDEBAR*/
_ABM_GETSTATE=@0x4/*_ABM_GETSTATE*/
_ABM_GETTASKBARPOS=@0x5/*_ABM_GETTASKBARPOS*/
_ABM_NEW=@0x0/*_ABM_NEW*/
_ABM_QUERYPOS=@0x2/*_ABM_QUERYPOS*/
_ABM_REMOVE=@0x1/*_ABM_REMOVE*/
_ABM_SETAUTOHIDEBAR=@0x8/*_ABM_SETAUTOHIDEBAR*/
_ABM_SETPOS=@0x3/*_ABM_SETPOS*/
_ABM_WINDOWPOSCHANGED=@0x9/*_ABM_WINDOWPOSCHANGED*/
_ABN_FULLSCREENAPP=@0x2/*_ABN_FULLSCREENAPP*/
_ABN_POSCHANGED=@0x1/*_ABN_POSCHANGED*/
_ABN_STATECHANGE=@0x0/*_ABN_STATECHANGE*/
_ABN_WINDOWARRANGE=@0x3/*_ABN_WINDOWARRANGE*/
end intellisense**/
 