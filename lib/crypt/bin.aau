//bin 文本编码
import crypt;
namespace crypt.bin;

::Crypt32  := ..raw.loadDll("Crypt32.dll");
CryptBinaryToString = ::Crypt32.api("CryptBinaryToString", "bool(pointer binary,INT cbBinary,INT flags,string& string,INT &pcchString)");
CryptStringToBinary = ::Crypt32.api("CryptStringToBinary", "bool(pointer string,INT cchString,INT flags,string& pbBinary,INT &pcbBinary,INT &skip,INT &pFlags)");
   
encode = function(bin,len,flags = 0 ){
	if(!len)len = #bin;
	if( !(bin && len) )error("参数无效",2);
	
	var ok,,size = CryptBinaryToString(bin,len,flags,0,0)
	if(ok){
		var ok,str,size = CryptBinaryToString(bin,len,flags,size,size);
		if( ok && str) return str;
	}
}

decode = function(bin,len,flags=0){
	if(!len)len = #bin;
	if( !(bin && len) )error("参数无效",2);
	
	var ok,,size = CryptStringToBinary(bin,len,flags,0,0,0,0) 
	if(ok){
		var ok,str,size = CryptStringToBinary(bin,len,flags,size,size,0,0);
		return str;
	}
}

encodeBase64 = function(str,len,flags = 1/*_CRYPT_STRING_BASE64*/){
	var s = encode(str,len,flags)
	if( s ) return ..string.left(s,-4); 
}

decodeBase64 = function(str,len,flags = 1/*_CRYPT_STRING_BASE64*/){
	return decode(str,len,flags)
}

encodeHex = function(str,len,flags = 4/*_CRYPT_STRING_HEX*/){
	str = encode(str,len,flags) ;
	return str ? ..string.str( str)
}

decodeHex = function(str,len,flags = 4/*_CRYPT_STRING_HEX*/){
	return decode(str,len,flags)
}

 /**intellisense()
crypt.bin = BASE64加密解密
crypt.bin.encodeBase64(.(字符串,长度) = BASE64编码\n字符串可以是指针,如果不是托管指针则应指定长度参数,\n否则长度参数可省略
crypt.bin.decodeBase64(.(字符串,长度) = BASE64解码,\n字符串可以是指针,如果不是托管指针则应指定长度参数,\n否则长度参数可省略
crypt.bin.encodeHex(.(字符串,长度) = 16进制编码
crypt.bin.decodeHex(.(字符串,长度) = 16进制解码
crypt.bin.encode(.(字符串,长度,选项) = 编码,\n参数3使用 _CRYPT_STRING_ 前缀常量指定选项
crypt.bin.decode(.(字符串,长度,选项) = 解码,\n参数3使用 _CRYPT_STRING_ 前缀常量指定选项

_CRYPT_STRING_BASE64HEADER=@0/*_CRYPT_STRING_BASE64HEADER*/
_CRYPT_STRING_BASE64=@1/*_CRYPT_STRING_BASE64*/
_CRYPT_STRING_BINARY=@2/*_CRYPT_STRING_BINARY*/
_CRYPT_STRING_BASE64REQUESTHEADER=@3/*_CRYPT_STRING_BASE64REQUESTHEADER*/
_CRYPT_STRING_HEX=@4/*_CRYPT_STRING_HEX*/
_CRYPT_STRING_HEXASCII=@5/*_CRYPT_STRING_HEXASCII*/
_CRYPT_STRING_BASE64_ANY=@6/*_CRYPT_STRING_BASE64_ANY*/
_CRYPT_STRING_ANY=@7/*_CRYPT_STRING_ANY*/
_CRYPT_STRING_HEX_ANY=@8/*_CRYPT_STRING_HEX_ANY*/
_CRYPT_STRING_BASE64X509CRLHEADER=@9/*_CRYPT_STRING_BASE64X509CRLHEADER*/
_CRYPT_STRING_HEXADDR=@0xA/*_CRYPT_STRING_HEXADDR*/
_CRYPT_STRING_HEXASCIIADDR=@0xB/*_CRYPT_STRING_HEXASCIIADDR*/
_CRYPT_STRING_HEXRAW=@0xC/*_CRYPT_STRING_HEXRAW*/
_CRYPT_STRING_HASHDATA=@0x10000000/*_CRYPT_STRING_HASHDATA*/
_CRYPT_STRING_STRICT=@0x20000000/*_CRYPT_STRING_STRICT*/
_CRYPT_STRING_NOCRLF=@0x40000000/*_CRYPT_STRING_NOCRLF*/
_CRYPT_STRING_NOCR=@0x80000000/*_CRYPT_STRING_NOCR*/
end intellisense**/