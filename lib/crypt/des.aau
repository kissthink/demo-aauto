//des 算法(3DES)
import crypt;
namespace crypt

class des {

    ctor( initVector ) {  
        var csp = ..crypt("Microsoft Enhanced Cryptographic Provider v1.0");  
        if(!csp) return null,..lasterr(,"创建密钥容器"); 
    };
    setPassword = function( key ) {
    
    	if( type(key) != type.string ) error("请指定正确的密钥",2);
    	
    	var algId;
    	var keyLen = #key;
    	if( keyLen <= 8 ){
    		if( keyLen < 8 ) key = key ++ ..string.repeat(8-keyLen);
    		algId = 0x6601/*_CALG_DES*/;
    	}
    	elseif( #key <= 16 ){
    		if( keyLen < 16 ) key = key ++ ..string.repeat(16-keyLen);
    		algId = 0x6609/*_CALG_3DES_112*/;
    	}
    	elseif( #key <= 24 ){
    		if( keyLen < 24 ) key = key ++ ..string.repeat(24-keyLen);
    		algId = 0x6603/*_CALG_3DES*/;
    	}
    	else {
    		error("密钥长度不能超过24位",2);
    	} 
    	 
    	var key_blob = {
    	
            struct hdr ={
                BYTE bType = 8/*_PLAINTEXTKEYBLOB*/;
                BYTE bVersion = 2/*_CUR_BLOB_VERSION*/;
                WORD reserved;
                INT aiKeyAlg = algId;
            };
            INT cbKeySize = #key;
            BYTE rgbKeyData[] = key;
        } ;  
        
        var ret,err = csp.importKey(key_blob, 1/*_CRYPT_EXPORTABLE*/ );
		if(!ret) return null,err;
		
		return csp.setInitVector( initVector or '\x12\x34\x56\x78\x90\xAB\xCD\xEF' );
    } 
    encrypt = function(...){
    	return csp.encrypt(...);
    }
    decrypt = function(...){
    	return csp.decrypt(...);
    }
}
 
/**intellisense()
crypt.des = DES,2DES,3DES加密算法支持库
crypt.des() = 返回DES加密容器,支持DES,2DES,3DES加密\n可选使用一个字符串参数指定密钥向量\n如果要与其他编程语言有相同加解密结果,建议不要设置该参数\n!crypy_3des.
!crypy_3des.setPassword(.("密钥") = 密钥使用补0方式进行8位对齐\n密钥长度小于等于8位时使用DES加密\n密钥长度小于等于16位时使用2DES加密\n密钥长度小于等于24位时使用3DES加密
!crypy_3des.decrypt(.(字符串,是否已输入全部数据,哈希对象,选项) = 除第一个参数以外,其他参数都是可选参数\n成功返回解密文本,失败返回空,\n可使用..lasterr()函数获取错误信息
!crypy_3des.encrypt(.(字符串,是否已输入全部数据,哈希对象,选项) = 除第一个参数以外,其他参数都是可选参数\n成功返回加密文本,失败返回空,\n可使用..lasterr()函数获取错误信息
end intellisense**/