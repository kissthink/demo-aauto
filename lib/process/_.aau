var __process__ = ..process;

class process { 
	ctor( pid , parameters, startInfo,... )begin
		var t = type(pid);
		if( t == type.number ){
			var access = type(parameters)==type.number?parameters: 0x1F0FFF/*_PROCESS_ALL_ACCESS*/ 
			if( ( access & 0xF000 ) && !(::Kernel32.QueryFullProcessImageName) ){
				access = access &~0xF000;
			}
   			this.handle = OpenProcess( access,false ,pid);
   			this.id = pid;
   			if(!this.handle) return null;
   			
   			..table.gc(this,"free");  
   		}
   		elseif( pid || #parameters ){
   			if(parameters===null) parameters = "";
   			if( type(startInfo) == type.string ){
   				parameters = {parameters;startInfo;...};
   				startInfo = null;
   			}

   			if( type(parameters) == type.table ){ parameters = joinArguments(parameters);  }
   			var sa = ..table.mixin(STARTUPINFO(),startInfo);
			if( sa.suspended )
			 	sa.creationFlag |= 0x4/*_CREATE_SUSPENDED*/
			
   			var pfile = ..io.exist(pid);
   			if(pfile){ 
				if( !pfile )
					return null,"未找到目标文件";
				
	    		if(!sa.workdir) 
	    			sa.workdir = ..io.splitpath(pfile).dir ; 
	    			
	    		var exe,shellpath = findExe(pfile); 
	    		if(!exe){
	    			return null,"未找到关联应用程序"; 
	    		};
	    		if( #shellpath ) {
	    			parameters = ..string.concat(shellpath, " ", parameters )
	    			pfile = exe;
	    		} 
	    		
	    		if( #parameters )  
  					parameters = " "+parameters;
	    	}
	    	elseif(#pid) {
	    		parameters = ..string.concat(pid," ",parameters);
	    	}
	    	elseif( !#parameters ) {
	    		error("路径参数错误",2);
	    	} 
   				
			var pf = PROCESS_INFORMATION();
			var ret;

			var environment = sa.environment;
			if( type(environment) = type.table ){
				var env = {};
				for(k,v in environment){
					if( type(k) == type.string && type(v) == type.string){
						if( sa.creationFlag & 0x400/*_CREATE_UNICODE_ENVIRONMENT*/ == 0x400)
							..table.push(env,..string.concatUnicode(k , "=" , v,'\0') ); 
						else
							..table.push(env,k + "=" + v + '\0');
					}
				} 
				environment = ..string.join(env) + '\0\0';
			};
			
			if( !sa.username ){
				ret = CreateProcess(pfile ,parameters
   				, sa.processAttributes 
   				, sa.threadAttributes 
   				, sa.inheritHandles
   				, sa.creationFlag
   				, environment
   				, sa.workdir
   				, sa
   				, pf)
			}
			else {
				if( sa.logonFlags == null ) sa.logonFlags = 1/*_LOGON_WITH_PROFILE*/;
				sa.reserved = ..string.toUnicode(sa.reserved);
				sa.desktop = ..string.toUnicode(sa.desktop);
				sa.title = ..string.toUnicode(sa.title);
				
				ret = CreateProcessWithLogonW(  ..string.toUnicode(sa.username) 
					, ..string.toUnicode(sa.domain)
					, ..string.toUnicode(sa.password)
					, sa.logonFlags
					, ..string.toUnicode(pfile)
					, ..string.toUnicode(parameters)
					, sa.creationFlag
					, environment
					, ..string.toUnicode(sa.workdir)
					, sa
					, pf
				)	  
			}
			
   			if( ! ret ) {     
  				return null,..lasterr() 
  			}   
  			else{   
  				if(!sa.suspended) {
  					if( ( sa.waitInputTimeout ) === null || ( sa.waitInputTimeout ) ){
  						WaitForInputIdle(pf.hProcess, sa.waitInputTimeout or 0xFFFFFFFF);  
  					} 
  				}
  					
  				this.handle =  pf.hProcess;
  				this.id = pf.dwProcessId;
  				this.tid = pf.dwThreadId;
  				this.thandle = pf.hThread;  
  			};
  			
  			..table.gc(this,"free");  
   		}
   		else{
   			this.id = getId();
   			this.handle = getHandle(); 
   			//Calling the closehandle function with a pseudo handle has no effect
   		}
   		
   		this._memory = {};  
   	end;
	suspend = function(){
		if(this.handle){
			::Ntdll.NtSuspendProcess( this.handle )  
		}
	};
	resume = function(){
		if(this.handle){
			::Ntdll.NtResumeProcess( this.handle )  
		}
	};
	terminate = function(exitcode=0){
		if(this.handle){ 
			TerminateProcess( this.handle,exitcode); 
			this.free();
		}
	};
	kill = function(){
		this.suspend();
		this.terminate();
	};
	getExitCode = function(){
		var ok,code = GetExitCodeProcess( this.handle , 0);
		if(ok){
			return code,code!=0x103/*_STILL_ACTIVE*/;
		}
	};
	free = function(){ 
		for(p,v in this._memory){ 
			this.mfree(p); 
		} 
		if(this.handle) ..raw.closehandle(this.handle);
		if(this.thandle) ..raw.closehandle(this.thandle);	
		this.handle = null;
		this.thandle = null;
		this.id = null;
		this.tid = null;
	};
	wait = function(timeout){
		var ret = ..thread.wait(this.handle,timeout)  
		sleep(10);
		
		var exitcode;
		if( ret ){
			exitcode = this.thandle ? ..thread.getExitCode(this.thandle )
		}
		return ret,exitcode;
	};
	waitOne = function(timeout){
		var ret = ..thread.waitOne(this.handle,timeout)  
		sleep(10);
		
		var exitcode;
		if( ret ){
			exitcode = this.thandle ? ..thread.getExitCode(this.thandle )
		}
		return ret,exitcode;
	};
	getUiInfo = function(){
   		if(!this.tid) return;
		var ok,info = ::User32.GetGUIThreadInfo(tid,{
  			INT cbSize = 48;
  			INT flags;
  			addr hwndActive;
  			addr hwndFocus;
  			addr hwndCapture;
  			addr hwndMenuOwner;
  			addr hwndMoveSize;
  			addr hwndCaret;
  			struct rcCaret = ::RECT();
		}  );
		if( ok ) return info;	
	};
	remoteApi = function(proto,addr,...){ 
		if( type(addr) == type.string ) addr = ..io.localpath(addr) : addr;
		return ..raw.remoteApi(this.handle,proto,addr,...)
	};
	readNumber = function(baseAddr,datatype = "int" ){ 
		var struct = { _struct = datatype + " result" } 
		this.readStruct(baseAddr,struct);
		return struct.result;
	};
	readString = function(baseAddr,len = 1){   
		var result,lpBuffer,readNum = ReadProcessMemoryByString(this.handle,baseAddr,len,len,0) 
		return  lpBuffer,readNum; 
	};
	readStruct = function(baseAddr,struct){ 
		assert(this.handle,"进程控制对象已关闭!")
		var result,lpStruct,readNum = ReadProcessMemory(this.handle,baseAddr,struct,..raw.sizeof(struct),0)
		return lpStruct,readNum
	};
	writeNumber = function(baseAddr,v,datatype = "int"){ 
		var struct = { _struct = datatype + " num"; num = v} 
		return this.writeStruct(baseAddr,struct); 
	};
	writeString = function(baseAddr,str,len){  
		if(len===null)len=#str
		if( ! baseAddr ) baseAddr = this.malloc(len);
		var result,writeNum  = WriteProcessMemoryByString(this.handle,baseAddr,str,len,0) 
		return baseAddr,writeNum ;
	};
	writeStruct = function(baseAddr,struct){  
		var len = ..raw.sizeof(struct);
		if( ! baseAddr ) baseAddr = this.malloc(len);
		var result,writeNum = WriteProcessMemory(this.handle,baseAddr,struct,len,0)
		return baseAddr,writeNum;
	}; 
	write = function(baseAddr,d,...){
		if(!baseAddr)return;
		
		var writeNum = 0;
		var t =  type( d );
		if( t == "string" ){
			baseAddr,writeNum = this.writeString(baseAddr,d)
		}
		elseif( t =="table" && d._struct ){
			baseAddr,writeNum = this.writeStruct(baseAddr,d)
		}
		elseif( t == "number" && t = "pointer" ){
			baseAddr,writeNum =  this.writeStruct(baseAddr,{int n = tonumber(d)});
		}
		else{
			return null;
		}
		
		if(!...) return baseAddr+writeNum;
		return this.write(baseAddr+writeNum,...)
	}
 	protect = function( baseAddr,newProtect,size=1){ 
 		var ok,oldProtect = VirtualProtectEx( this.handle, baseAddr,size,newProtect,0);  
 		return ok ? oldProtect;
 	};
 	eachQuery = function(addrBegin,addrEnd,pattern,sProtect=0x4/*_PAGE_READWRITE*/,sType=0){
 		if(!this.handle) error("进程控制对象已关闭",2);
		  
		if( !(addrBegin && addrEnd) ){
	 		if(!_systemInfo){
				_systemInfo = ..sys.info()
			}
	    	addrBegin := _systemInfo.lpMinimumApplicationAddress;
	    	addrEnd := _systemInfo.lpMaximumApplicationAddress;
	    }
	    
		var mi = MEMORY_BASIC_INFORMATION();  
		var ret = 0;
		var cbSize = ..raw.sizeof(mi);
		var handle = this.handle;
		var readString = this.readString;
		var find = ..string.find;
		var str,i,j;
		var VirtualQueryEx = VirtualQueryEx;
		
		if( pattern && pattern[["_struct"]] ){
			pattern = "@" + ..raw.tostring(pattern);
		}
		
		var address,miSize,miProtect,miType;
		return function(){
			 while ( addrBegin < addrEnd ){
				if( cbSize != VirtualQueryEx(handle, addrBegin, mi, cbSize) )
					break;
				
				address = mi.BaseAddress;	
				miSize = mi.RegionSize;
				addrBegin = address + miSize ;
				
				if (mi.State == 0x1000/*_MEM_COMMIT*/) {
				 	miProtect = mi.Protect;
					miType = mi.Type;
					
					if( sProtect && (sProtect != (sProtect & miProtect))){
					
					}
					elseif( sType && (sType != (sType & miType) )){
					
					}
					elseif( pattern ){ 
						str = readString(address,miSize );  
						if( str  ){ 
							i,j = find(str,pattern);
							if(i)
								return address,miSize,str,i,j,pattern,miProtect&~(0x100/*_PAGE_GUARD*/|0x200/*_PAGE_NOCACHE*/),miType;
						}
					}
					else{ 
         				return address,miSize, , , , ,miProtect&~(0x100/*_PAGE_GUARD*/|0x200/*_PAGE_NOCACHE*/),miType 
					}
				} 
			}
		}
 	}
	query = function( addrBegin,addrEnd,pattern,sProtect,sType ){
		if(!this.handle) error("进程控制对象已关闭",2);
		return this.eachQuery(addrBegin,addrEnd,pattern,sProtect,sType)();
	};
    setAffinity = function( cpu =1 ){
    	SetProcessAffinityMask( this.handle,cpu );
    };
	malloc = function(size,protect=0x40,alloctype=0x1000){
		var ptr = VirtualAllocEx(this.handle,0,size,alloctype,protect)
		this._memory[ptr] = 1;
		return ptr;
	};
	mfree = function(ptr,size=0,freetype=0x8000){
		this._memory[ptr] = null;
		VirtualFreeEx( this.handle,ptr,size,freetype) 
	};
	eachModule = function(){
		return self.eachModule(this.id)
	};
	eachThread = function(){
		return self.eachThread(this.id)
	};
	getPath = function(hModule){
		if( hModule ? ( type(hModule) != type.pointer) )
			error("参数不是有效的模块句柄!",2)
			
		var len,path = GetModuleFileNameEx( this.handle,hModule,0x104/*_MAX_PATH*/,0x104/*_MAX_PATH*/);
		return path;
	};  
	getModuleBaseAddress = function(name){
		if(!name){
			name = ..io.splitpath(this.getPath()).file 
		}
		for moduleEntry in this.eachModule() {
        	if( ..string.cmp(name, moduleEntry.szModule)  == 0  ){ 
            	return moduleEntry.modBaseAddr;
            }
    	}
	};
	getPriorityClass = function(){
		return GetPriorityClass( this.handle );
	};
	setPriorityClass = function(p){
		return SetPriorityClass( this.handle,p );
	};
	isWow64 = function(){
		var ok,p64 = IsWow64Process( this.handle );
		return ok && p64;
	};
	asm = function( bin,proto = "void()",k = "cdecl" ){ 
		var pfun; 
		var size = 0;
		for(k,v in bin){
			var t = type(v);
			if( t == "string" ) {
				size = size + #v;
			}
			elseif( t == "table"  && v._struct ){
				size = size + ..raw.sizeof(v);
			} 
			elseif( t == "number" && t = "pointer" ) {
				size = size + 4;
			}
			else {
				return null,"机器码参数@" + k + "类型错误";
			} 
		}  
		
		if( this.freeMemorySize && this.freeMemorySize > size ){
			this.freeMemorySize = this.freeMemorySize - size;
			this.freeMemory = this.freeMemory + size;
			pfun = this.freeMemory; 
		}
		else {
			if(!_systemInfo){
				_systemInfo = ..sys.info()
			} 
			this.freeMemorySize =  size + ( _systemInfo.dwPageSize - ( size % _systemInfo.dwPageSize )  )
			this.freeMemorySize  = 200;
			pfun = this.malloc( this.freeMemorySize )
			this.freeMemorySize = this.freeMemorySize - size;
			this.freeMemory = pfun + size;
		}
		
		if(!pfun)
			return null,"分配内存失败";
			
		this.write(pfun,..table.unpack(bin) )  
		return this.remoteApi(proto,pfun,k )
	};
	asmStdcall = function( proto,... ){ 
		return this.asm( {...} ,proto,"stdcall") 
	};
	asmCdecl = function( proto,... ){ 
		return this.asm( {...} ,proto,"cdecl")  
	}; 
	asmThiscall = function( proto,... ){ 
		return this.asm( {...} ,proto,"thiscall")  
	};  
}

if( __process__ ) ..table.mix( process,__process__);
 
import sys.info;
namespace process{

	::Shell32 := ..raw.loadDll("Shell32")
	::Psapi := ..raw.loadDll("Psapi.dll");
	::Ntdll := ..raw.loadDll("ntdll.dll")
	
	/*intellisense(process)*/  
	GetModuleFileNameEx = Psapi.api("GetModuleFileNameEx","INT(pointer hProcess,pointer hModule,str& lpFilename,INT nSize)" )

	PROCESS_INFORMATION = class {
 		pointer hProcess;
 		pointer hThread;
 		INT dwProcessId;
 		INT dwThreadId;
	}
	STARTUPINFO = class {
 		INT cb = 68;
 		string reserved;
 		string desktop;
 		string title;
 		INT x;
 		INT y;
 		INT xSize;
 		INT ySize;
 		INT xCountChars;
 		INT yCountChars;
 		INT fillAttribute;
 		INT flags;
 		WORD showWindow;
 		WORD cbReserved2;
 		string lpReserved2;
 		pointer stdInput;
 		pointer stdOutput;
 		pointer stdError; 
 		creationFlag = 0;
 		inheritHandles;
	};
	CreateProcess =  ::Kernel32.api("CreateProcessA","int(string app, string &cmd, pointer processAttributes,pointer threadAttributes, bool inheritHandles, INT creationFlags,str environment, string lpCurrentDirectory, struct lpStartupInfo, struct& lpProcessInformation )");
	
	::Advapi32 := ..raw.loadDll("Advapi32.dll")
	CreateProcessWithLogonW =  ::Advapi32.api("CreateProcessWithLogonW","int(string user,string domain,string pwd,INT flags,string app, string &cmd, INT creationFlags,str environment, string lpCurrentDirectory, struct lpStartupInfo, struct& lpProcessInformation )");

	OpenProcess  = ::Kernel32.api("OpenProcess","pointer(INT desiredAccess,bool inherit,INT pid)")
	TerminateProcess  = ::Kernel32.api("TerminateProcess","int(pointer hProcess,INT exitCode)")
	WaitForInputIdle = ::User32.api("WaitForInputIdle","INT(pointer hProcess,INT dwMilliseconds)");
	GetExitCodeProcess =  ::Kernel32.api("GetExitCodeProcess","bool(POINTER hProcess,INT &code)");  
	IsWow64Process = ::Kernel32.api( "IsWow64Process", "bool(pointer hProcess,bool &Wow64Process)");

	SetProcessAffinityMask = ::Kernel32.api("SetProcessAffinityMask","INT(pointer hProcess,INT dwProcessAffinityMask)" )
	SetPriorityClass = ::Kernel32.api("SetPriorityClass","bool(POINTER hProcess,INT priorityClass)");
	GetPriorityClass = ::Kernel32.api("GetPriorityClass","INT(POINTER hProcess");
	
	VirtualAllocEx = ::Kernel32.api("VirtualAllocEx","int(POINTER hProcess ,addr lpAddress,int dwSize,int flAllocationType,int flProtect)")
	VirtualFreeEx = ::Kernel32.api("VirtualFreeEx","int(POINTER hProcess,addr lpAddress,int dwSize,int dwFreeType)")
	 
	VirtualProtectEx = ::Kernel32.api("VirtualProtectEx","bool(POINTER hProcess,addr lpAddress, INT dwSize, INT flNewProtect, INT &lpflOldProtect )");
	ReadProcessMemory = ::Kernel32.api("ReadProcessMemory","int(POINTER hProcess,addr lpBaseAddress,struct &lpBuffer,INT nSize,INT & lpNumberOfBytesRead)" )
	ReadProcessMemoryByString = ::Kernel32.api("ReadProcessMemory","int(POINTER hProcess,addr lpBaseAddress,string &lpBuffer,INT nSize,INT & lpNumberOfBytesRead)" )
	
	WriteProcessMemory = ::Kernel32.api("WriteProcessMemory","int(POINTER hProcess,addr lpBaseAddress,struct lpBuffer,INT nSize,INT & lpNumberOfBytesRead)" )
	WriteProcessMemoryByString = ::Kernel32.api("WriteProcessMemory","int(POINTER hProcess,addr lpBaseAddress,string lpBuffer,INT nSize,INT & lpNumberOfBytesRead)" )
	
	MEMORY_BASIC_INFORMATION = class {
 		addr BaseAddress;
 		int AllocationBase;
 		INT AllocationProtect;
 		INT RegionSize;
 		INT State;
 		INT Protect;
 		INT Type;
	}
	VirtualQueryEx = ::Kernel32.api("VirtualQueryEx","INT(pointer hProcess,addr lpAddress,struct& lpBuffer,INT dwLength)" )
	FindExecutable = ::Shell32.api("FindExecutableA","int(string file,string directory,str &result)")
	/*end intellisense*/ 
	
	isExe = function(path){
		var format,subsystem;
		var f = ..io.open(path,"r");
		if( !f ) return;
		if( (f.read(2) == '\x4d\x5a' ) && (f.seek("set",60)==60 ) ){ 
			var s = { INT n }
			var pe = ( f.read(s) && s.n 
				&& ( f.seek("set",s.n)==s.n ) 
				&& f.read(s) && ( s.n == 0x4550 )
			)
			if(pe){
				if( f.seek("cur",20) ){
					var magic = f.read({ WORD n })[["n"]] 
					var lst = { [0x10B] = "PE32";[0x20B]="PE64";[0x107]="ROM"}
					format = magic ? lst[magic];
					if( format && f.seek("cur",66) ){
						subsystem = f.read({ WORD n })[["n"]] 
					} 
				} 
			}
		}  
		f.close();
		return format,subsystem;	
	};
	
	findExe = function(path){
		path = ..io.fullpath(path);
		if( ..string.endWith(path,".exe",true) || isExe(path) ){ 
			return path;
		}
		var ret,exe = FindExecutable(path, ,0x104/*_MAX_PATH*/);
		if(ret>32)
			return exe,path
	}
 	
	getId  = Kernel32.api("GetCurrentProcessId","INT()") 
	getHandle  = Kernel32.api("GetCurrentProcess","pointer()") 
	DuplicateHandle = ::Kernel32.api( "DuplicateHandle", "bool(pointer srcProcess,pointer handle,pointer targetProcess,pointer& outHandle,INT desiredAccess,bool inherit,INT options)");
	dup = function(handle,src,target,inherit=true,opt=3/*_DUPLICATE_CLOSE_SOURCE | _DUPLICATE_SAME_ACCESS*/,access=0){
		src := getHandle();
		target := getHandle();  
		var ok,outHandle = DuplicateHandle( src, handle,target, ,access, inherit,opt   );
		if(ok)
			return outHandle
	} 

	kill = function(exefile){ 
		if( type(exefile) == type.string ){
			var prcs = find(exefile); 
			while(prcs){
				prcs.kill()
				prcs = find(exefile); 
			}
			
		}
		else if( type(exefile) == type.number ){
			..process(exefile).kill(); 
		} 
	}

	class SHELLEXECUTEINFO {
		INT cbSize = 60;
		INT fMask;
		int hwnd;
		string lpVerb;
		string lpFile;
		string lpParameters;
		string lpDirectory;
		int nShow;
		int hInstApp;
		pointer lpIDList;
		string lpClass = "";
		int hkeyClass;
		INT dwHotKey;
		union DUMMY={ 
			pointer hIcon;
			pointer hMonitor;
		}; 
		pointer hProcess;
	}
	executeEx = function( file,parameters,operation,showCmd,workdir,hwnd,fMask ){
		if(type(file)!="string")error("无效的文件路径",2);
		if( parameters === null ) parameters = "";
		if( operation === null ) operation = "open";
		if( showCmd === null ) showCmd = 5;
		if( hwnd === null ) hwnd = 0;
	    
	    file = ..io.localpath(file) : file; 
	    if( (! #workdir ) ){
	    	workdir = ..io.splitpath(file).dir ;
	    }
	    
	    if( type(parameters) == type.table ){ parameters = joinArguments(parameters); }
   		var shInfo = SHELLEXECUTEINFO();
		shInfo.fMask = fMask === null ? ( 0x440 /*SEE_MASK_NOCLOSEPROCESS|SEE_MASK_FLAG_NO_UI*/ )  : fMask;
		shInfo.hwnd = hwnd;
		shInfo.lpVerb = operation;
		shInfo.lpFile =  file;		
		shInfo.lpParameters =  parameters ;	
		shInfo.lpDirectory = workdir ;
		shInfo.nShow = showCmd;
		shInfo.hInstApp = 0;	
		shInfo.lpClass ="";  
		var ret = ::Shell32.ShellExecuteEx(shInfo);
		if(!ret) return null,..lasterr();
		return shInfo;
	}
	self.execute = function( file,parameters,operation,showCmd,workdir,hwnd,wait,waitTimeout){ 
		if( waitTimeout === null ) waitTimeout = 0xFFFFFFFF;
	    if(type(file)!="string") error("无效的文件路径",2);
  
   		var shInfo,errMsg,errCode = executeEx(file,parameters,operation,showCmd,workdir,hwnd,0x440); 
   		
		if(!shInfo) return null,errMsg,errCode; 
		if(!shInfo.hProcess ){ 
			return !wait;
		}
		
		if( wait == "close" ){
			var w,err =  ..thread.waitOne(shInfo.hProcess,waitTimeout);
			if(!w) {
				..raw.closehandle( shInfo.hProcess  ) ;
				return null,err;
			}
		}
		elseif( wait == "input" ){ 
			var w = WaitForInputIdle(shInfo.hProcess,waitTimeout);
			if( w ) {
				..raw.closehandle( shInfo.hProcess  ) ;
				return null,( w ==  0x102/*_WAIT_TIMEOUT*/ ? "timeout" : "failed" );
			}
		}
		
		..raw.closehandle( shInfo.hProcess  ) ;
		return true;
	}; 
	execute_wait = function( file, parameters="",operation="open",showCmd,workdir="",hwnd=0){
		return ..process.execute(file,parameters,operation,showCmd,workdir,hwnd,"close")
	}
	
	execute_waitInput = function( file, parameters="",operation="open",showCmd,workdir="",hwnd=0){
		return ..process.execute(file,parameters,operation,showCmd,workdir,hwnd,"input")
	}
	
	explore_select = function(file){
		return ..process.execute( "Explorer.exe"," /select," + ..io.fullpath(file) )
	} 
	
	explore = function(file){
		return ..process.execute( "Explorer.exe", ..io.fullpath(file) )
	}
	
	CreateToolhelp32Snapshot = Kernel32.api("CreateToolhelp32Snapshot","pointer(INT,INT)"); 
	eachSnap = function(pid,snapCs,firstEntry,entryFirst,entryNext) { 
    	firstEntry.dwSize = ..raw.sizeof(firstEntry);
    	var hsnap= CreateToolhelp32Snapshot (snapCs,pid )   
    	if( hsnap==_INVALID_HANDLE_VALUE ){
    		//"创建快照失败 CreateToolhelp32Snapshot failed " 
    		return function(){ } 
    	} 
    	
   		var freeItor = function(){  
   			if(hsnap){ //避免重复析构 
   				..raw.closehandle(hsnap);
   				hsnap = null;
   			}
   		}  
   		
   		//防止使用return等直接跳出循环,转换为可析构的托管指针
   		var gcSnap = ..gcdata(
        	_gc = freeItor;
        	_topointer = hsnap
        )
   		
		return function( entry ) { //接收for循环传递的参数得到迭代器控制变量 
			var next;
			
			if(entry)
				next = entryNext(gcSnap, entry); 
			else
				next,entry = entryFirst(gcSnap, firstEntry)  
				
			if(next){ 
				for name,value in ..table.eachName(entry){
					if( type(value) == type.string ){
						entry[name] = ..string.str(value);
					}
				}
				return entry;
			}
		} , freeItor ;
	
	}
	
	/*intellisense(process)*/
	MODULEENTRY32= class{ 
        INT dwSize; 
        INT th32ModuleID; 
        INT th32ProcessID; 
        INT GlblcntUsage; 
        INT ProccntUsage;
        addr modBaseAddr; 
        INT modBaseSize; 
        pointer hModule; 
        byte szModule[256];
        byte szExePath[0x104/*_MAX_PATH*/];
    }
    Module32First = ::Kernel32.api("Module32First","int(pointer hsnap,struct& lppe)")
	Module32Next = ::Kernel32.api("Module32Next","int(pointer hsnap,struct& lppe)")
	/*end intellisense*/
	
    eachModule = function(pid) {
    	return eachSnap( pid:getId(),0x8/*_TH32CS_SNAPMODULE*/,MODULEENTRY32(),Module32First,Module32Next)
	} 
	
	/*intellisense(process)*/
	THREADENTRY32 = class {
 	INT dwSize;
 	INT cntUsage;
 	INT th32ThreadID; // this thread
 	INT th32OwnerProcessID; // Process this thread is associated with
 	int tpBasePri;
 	int tpDeltaPri;
 	INT dwFlags;
	}
	Thread32First = ::Kernel32.api("Thread32First","int(pointer hsnap,struct& lppe)")
	Thread32Next = ::Kernel32.api("Thread32Next","int(pointer hsnap,struct& lppe)") 
	/*end intellisense*/
	
    eachThread = function(pid) {  
    
    	var nextSnap,freeItor = eachSnap( pid:getId(),0x4/*_TH32CS_SNAPTHREAD*/,THREADENTRY32(),Thread32First,Thread32Next) 
    	
		return function( entry ) { //接收for循环传递的参数得到迭代器控制变量 
			entry = nextSnap( entry ) 
	    	while(entry){   
	        	if(!pid || pid==entry.th32OwnerProcessID)
	               	return entry; 
	               	  
	    		entry = nextSnap(entry) ;
	    	} 
 			
		},freeItor  
	}
	
	/*intellisense(process)*/
	PROCESSENTRY32 = class { 
    	INT dwSize = 296;
    	INT cntUsage = 0;
    	INT th32ProcessID = 0;          // this process
    	INT th32DefaultHeapID = 0;
    	INT th32ModuleID = 0;           // associated exe
    	INT cntThreads = 0;
    	INT th32ParentProcessID = 0;    // this process's parent process
    	INT pcPriClassBase = 0;         // Base priority of process's threads
    	INT dwFlags = 0;
    	BYTE szExeFile[260] = "path"; // Path
	}  
	Process32First = Kernel32.api("Process32First","int(pointer hsnap,struct & lppe)");
	Process32Next = Kernel32.api("Process32Next","int(pointer hsnap,struct & lppe)");
	/*end intellisense*/
	
	//创建迭代器函数
	each = function(exename) {
    	exename ?= ..string.lower(exename) //exename = exename and string.lower(exename)
    	var nextSnap,freeItor = eachSnap( 0,0x2/*_TH32CS_SNAPPROCESS*/,PROCESSENTRY32(),Process32First,Process32Next)
    	
	 
		return function( entry ) { //接收for循环传递的参数得到迭代器控制变量 
			entry = nextSnap( entry )
			 	
	    	while(entry){  
	    		entry.szExeFile = ..string.str(entry.szExeFile);
	        	if(!exename)
	               	return entry; 
	               	 
	        	if( ..string.find( ..string.lower( entry.szExeFile ),exename)  )
	               	return entry;
	    	
	    		entry = nextSnap(entry) ;
	    	} 
 			
		},freeItor   ;
	
	}
	
	find = function(exename){
		var tpath = ..io.splitpath(exename)
		exename = tpath.file;
		
		var prcs;
		for entry in each(exename) { 
			 prcs = ..process(entry.th32ProcessID);
			 break;
		} 
		return prcs;
	}
	
	getPath = function(pid){
		var path;
		for entry in eachModule(pid) { 
			path = entry.szExePath;
			break;
		}
		return path ? ..string.str(path);
	}
	
	escapeArgument = function(s){  
		var b = ""
		var o = ""; 
		var q = false;
		for c in ..string.gmatch(s ,"<:>") { 
			if( c == "\"){
				b = b + "\"
			}
			elseif( c == '"' ) {
				q = true;o = o ++ b ++  b ++ '\\"'; b = ""; 
			} 
			else {
				if( c == ' '  || c = '\t' || c = "\r" || c == '\n' ){
					q = true;
				}
				o = o ++ b ++ c; b = ""; 
			}
		} 
		if(!q) return s;
		if( #b ) o = o ++ b ++ b;  
		return '"' + o + '"';	
	} 
	
	joinArguments = function(parameters,...){ 
		if( ... ) parameters = { parameters; ... }
		if( type(parameters) == type.table ){
			parameters = ..table.mix( {},parameters);
			for(k,v in parameters){
				if( v[1] != '"'# || v[#v] != '"'#  ){
					v = escapeArgument(v)
				}
				parameters[k] = v;
			}
			var e = parameters[0];
			parameters = ..string.join(parameters," "); 
			if( e ) {
				parameters = '"' + e + '" ' + parameters;
			}
   		}
   		return parameters;
   	}
}

 /**intellisense()
 _PAGE_NOACCESS=@0x1/*_PAGE_NOACCESS*/
_PAGE_READONLY=@0x2/*_PAGE_READONLY*/
_PAGE_READWRITE=@0x4/*_PAGE_READWRITE*/
_PAGE_WRITECOPY=@0x8/*_PAGE_WRITECOPY*/
_PAGE_EXECUTE=@0x10/*_PAGE_EXECUTE*/
_PAGE_EXECUTE_READ=@0x20/*_PAGE_EXECUTE_READ*/
_PAGE_EXECUTE_READWRITE=@0x40/*_PAGE_EXECUTE_READWRITE*/
_PAGE_EXECUTE_WRITECOPY=@0x80/*_PAGE_EXECUTE_WRITECOPY*/
_PAGE_GUARD=@0x100/*_PAGE_GUARD*/
_PAGE_NOCACHE=@0x200/*_PAGE_NOCACHE*/
_PAGE_WRITECOMBINE=@0x400/*_PAGE_WRITECOMBINE*/
_MEM_COMMIT=@0x1000/*_MEM_COMMIT*/
_MEM_RESERVE=@0x2000/*_MEM_RESERVE*/
_MEM_DECOMMIT=@0x4000/*_MEM_DECOMMIT*/
_MEM_RELEASE=@0x8000/*_MEM_RELEASE*/
_MEM_FREE=@0x10000/*_MEM_FREE*/
_MEM_PRIVATE=@0x20000/*_MEM_PRIVATE*/
_MEM_MAPPED=@0x40000/*_MEM_MAPPED*/
_MEM_RESET=@0x80000/*_MEM_RESET*/
_MEM_TOP_DOWN=@0x100000/*_MEM_TOP_DOWN*/
_MEM_WRITE_WATCH=@0x200000/*_MEM_WRITE_WATCH*/
_MEM_PHYSICAL=@0x400000/*_MEM_PHYSICAL*/
_MEM_ROTATE=@0x800000/*_MEM_ROTATE*/
_MEM_LARGE_PAGES=@0x20000000/*_MEM_LARGE_PAGES*/
_MEM_4MB_PAGES=@0x80000000/*_MEM_4MB_PAGES*/
_TH32CS_SNAPHEAPLIST=@0x1/*_TH32CS_SNAPHEAPLIST*/
_TH32CS_SNAPPROCESS=@0x2/*_TH32CS_SNAPPROCESS*/
_TH32CS_SNAPTHREAD=@0x4/*_TH32CS_SNAPTHREAD*/
_TH32CS_SNAPMODULE=@0x8/*_TH32CS_SNAPMODULE*/
_TH32CS_SNAPMODULE32=@0x10/*_TH32CS_SNAPMODULE32*/
_TH32CS_SNAPALL=@0xF/*_TH32CS_SNAPALL*/
_TH32CS_INHERIT=@0x80000000/*_TH32CS_INHERIT*/

_STANDARD_RIGHTS_REQUIRED=@0xF0000/*_STANDARD_RIGHTS_REQUIRED*/
_SYNCHRONIZE=@0x100000/*_SYNCHRONIZE*/
_PROCESS_TERMINATE=@0x1/*_PROCESS_TERMINATE*/
_PROCESS_CREATE_THREAD=@0x2/*_PROCESS_CREATE_THREAD*/
_PROCESS_SET_SESSIONID=@0x4/*_PROCESS_SET_SESSIONID*/
_PROCESS_VM_OPERATION=@0x8/*_PROCESS_VM_OPERATION*/
_PROCESS_VM_READ=@0x10/*_PROCESS_VM_READ*/
_PROCESS_VM_WRITE=@0x20/*_PROCESS_VM_WRITE*/
_PROCESS_DUP_HANDLE=@0x40/*_PROCESS_DUP_HANDLE*/
_PROCESS_CREATE_PROCESS=@0x80/*_PROCESS_CREATE_PROCESS*/
_PROCESS_SET_QUOTA=@0x100/*_PROCESS_SET_QUOTA*/
_PROCESS_SET_INFORMATION=@0x200/*_PROCESS_SET_INFORMATION*/
_PROCESS_QUERY_INFORMATION=@0x400/*_PROCESS_QUERY_INFORMATION*/
_PROCESS_SUSPEND_RESUME=@0x800/*_PROCESS_SUSPEND_RESUME*/
_PROCESS_QUERY_LIMITED_INFORMATION=@0x1000/*_PROCESS_QUERY_LIMITED_INFORMATION*/
_PROCESS_ALL_ACCESS=@0x1FFFFF/*_PROCESS_ALL_ACCESS*/

_CREATE_NEW_CONSOLE=@0x10/*_CREATE_NEW_CONSOLE*/
_CREATE_NEW_PROCESS_GROUP=@0x200/*_CREATE_NEW_PROCESS_GROUP*/
_CREATE_NO_WINDOW=@0x8000000/*_CREATE_NO_WINDOW*/
_CREATE_PROCESS_DEBUG_EVENT=@0x3/*_CREATE_PROCESS_DEBUG_EVENT*/
_CREATE_SUSPENDED=@0x4/*_CREATE_SUSPENDED*/
end intellisense**/

/**intellisense()
process.joinArguments(.(参数表) = 参数可以是一个数组或多个文本参数\n返回单个转义后的命令行文本参数
process.escapeArgument(.("命令行参数") = 转义命令行参数\n转义规则请参考扩展库里的string.cmdline示例里的说明
process.STARTUPINFO() = 创建进程启动参数\n!startinfo. 
process( = 运行执行文件或关联文档。\n如果省略所有参数则打开当前进程\n失败则返回 null,错误信息,错误代码\n成功返回进程对象
process(.(进程ID) =  如果参数@1为进程ID则忽略其他参数
process(.( ,系统命令行) = 如果省略第一个参数,并仅指定命令行,则作为系统命令行启动运行
process(.(执行文件,命令行参数,更多命令行参数,->->->) = 命令行参数可以是一个数组或多个字符串参数\n如果命令行参数有多个,则以空格分隔自动合并,\n合并时遇到包含空格且不含双引号的参数则首尾添加双引号\n命令参数最大长度为8191/0x1FFFF个字符
process(.(执行文件,参数,STARTUPINFO) = STARTUPINFO参数为process.STARTUPINFO()结构体,可选参数\n如果该参数是普通table对象.将自动创建为STARTUPINFO结构体
process() = !process.
?process.find = !process.
process.find() = !process.
!process.getExitCode() = 该函数调用成功有两个返回值:进程退出代码,进程是否已退出
!process.free() = 释放进程对象。\n不是关闭进程，仅仅是释放对进程的控制句柄。
!process.waitOne() = 等待进程关闭,不阻塞UI消息循环,可选使用一个毫秒值参数设定超时\n超时或失败返回 false,进程已退出则返回值1为true,返回值2为退出代码
!process.wait() = 等待进程关闭,可选使用一个毫秒值参数设定超时\n超时或失败返回 false,进程已退出则返回值1为true,返回值2为退出代码
!process.query(.(开始地址,结束地址,搜索数据,保护类型,访问类型) = 查找下一个有效内存地址,所有参数可选,\n搜索数据可以是字符串或结构体\n返回值: addr,len,str,i,j,pattern,protect,mtype 
!process.eachQuery(开始地址,结束地址,搜索数据,保护类型,访问类型) = @for( addr,len,str,i,j,pattern,protect,mtype\n	in ??.eachQuery(  , ,"__/*搜索模式*/" ) ){\n	\n} 
!process.malloc(.(长度) = 在目标进程分配内存空间
!process.malloc(.(长度,访问类型) = 在目标进程分配内存空间
!process.malloc(.(长度,访问类型,分配类型) = 在目标进程分配内存空间
!process.mfree(.(指针) = 释放malloc成员函数分配的内存指针
!process.mfree(.(指针,释放长度,0x4000) = 释放malloc成员函数分配的内存指针\n不建议手工指定长度
!process.setAffinity(1) = 指定进程运行的CPU内核
!process.readNumber(__/*内存地址*/) = 读取一个int整数,32位
!process.readNumber(__/*内存地址*/,"long") = 读取一个long类型整数,64位
!process.readNumber(__/*内存地址*/,"word") = 读取一个word类型整数,16位
!process.readNumber(__/*内存地址*/,"byte") = 读取一个字节,8位
!process.readNumber(__/*内存地址*/,"INT") = 读取一个int整数,32位无符号
!process.readNumber(__/*内存地址*/,"LONG") = 读取一个long类型整数,64位无符号
!process.readNumber(__/*内存地址*/,"WORD") = 读取一个word类型整数,16位无符号
!process.readNumber(__/*内存地址*/,"BYTE") = 读取一个字节,8位无符号
!process.write(.(内存地址,任意个字符串或结构体参数) = 写入数据,成功返回写入尾部内存地址,\n失败返回空
!process.readString(.(内存地址,长度) = 读取定长字符串
!process.readStruct(.(内存地址,结构体) = 读取定义的结构体
!process.writeStruct(.(内存地址,结构体) = 写入定义的结构体,\n省略内存地址参数则自动分配内存,\n该函数返回写入内存地址,写入长度
!process.writeString(.(内存地址,字符串) = 写入字符串,\n省略内存地址参数则自动分配内存,\n该函数返回写入内存地址,写入长度
!process.writeNumber(__/*内存地址*/,0) = 写入一个int整数,32位
!process.writeNumber(__/*内存地址*/,0,"long") = 写入一个long类型整数,64位
!process.writeNumber(__/*内存地址*/,0,"word") = 写入一个word类型整数,16位
!process.writeNumber(__/*内存地址*/,0,"byte") = 写入一个字节,8位
!process.writeNumber(__/*内存地址*/,0,"INT") = 写入一个int整数,32位无符号
!process.writeNumber(__/*内存地址*/,0,"LONG") = 写入一个long类型整数,64位无符号
!process.writeNumber(__/*内存地址*/,0,"WORD") = 写入一个word类型整数,16位无符号
!process.writeNumber(__/*内存地址*/,0,"BYTE") = 写入一个字节,8位无符号
!process.protect(__/*内存地址*/,0x4/*_PAGE_READWRITE*/,1) = 修改内存保护属性,返回原来的保护属性,\n第三个参数指定内存长度
!process.getPriorityClass() = 返回进程优先级
!process.setPriorityClass(0x80/*_HIGH_PRIORITY_CLASS*/) = 设置进程优先级 
!process.handle = 进程句柄
!process.id = 进程ID
!process.tid = 进程的主线程ID\n使用process类创建的进程才会有此属性  
!process.remoteApi("void()",) = 参数(函数原型,CALL地址)\n用法同 raw.remoteApi,但无需指定进程ID
!process.remoteApi("void()", ,"cdecl") = 参数(函数原型,CALL地址,调用约定)\n用法同 raw.remoteApi,但无需指定进程ID
!process.remoteApi("void()","文件名->dll","api函数名") =  参数(函数原型,加载DLL模块名,函数名)\n用法同 raw.remoteApi,但无需指定进程ID
!process.remoteApi("void()","文件名->dll","api函数名","cdecl,borland") =  参数(函数原型,加载DLL模块名,函数名,调用约定) \n用法同 raw.remoteApi,但无需指定进程ID
!process.remoteApi("void(INT thisAddr)", ,"thiscall") =  参数(函数原型,加载DLL模块名,函数名,调用约定)\nthiscall使用第一个参数指定this指针地址\n用法同 raw.remoteApi,但无需指定进程ID
!process.resume() = 恢复运行
!process.suspend() = 暂停进程
!process.terminate() = 强行终止进程\n可在参数中指定退出代码
!process.kill() = 杀除进程
!process.eachModule = @for moduleEntry in ??.eachModule() { \n__//io.print( moduleEntry.szExePath  )\n \n}
!process.eachThread = @for threadEntry in ??.eachThread() { \n__//io.print( threadEntry.th32ThreadID  )\n \n}
!process.getPath() = 返回执行程序文件完整路径
!process.asm(.(机器码数组,函数原型,调用约定) = 使用table数组指定任意个机器码参数,使用分号隔开,\n机器码可以是字符串,结构体,数值或指针,\n函数原型可省略,调用约定默认为"cdecl"
!process.asmCdecl(.(函数原型,任意多个机器码参数) = 写入机器码返回函数对象\n请参考:aardio工具->其他编译器->INTEL汇编语言->汇编转机器码
!process.asmStdcall(.(函数原型,任意多个机器码参数) = 写入机器码返回函数对象\n请参考:aardio工具->其他编译器->INTEL汇编语言->汇编转机器码
!process.asmThiscall(.(函数原型,任意多个机器码参数) = 写入机器码返回函数对象\n请参考:aardio工具->其他编译器->INTEL汇编语言->汇编转机器码
!process.getModuleBaseAddress(.(模块名) = 返回模块基址,\n模块名忽略大小写,\n不指定模块名则返回应用程序基址
!process.isWow64() = 进程是否在64位系统上运行的32进程
!process.getUiInfo() = 获取UI线程窗口焦点,光标等信息\n!guithreadinfo.
?process = !process.
?process.openWindow = !process.
?process.each = !processEntry.
end intellisense**/


/**intellisense(process)
executeEx(.("__", parameters="",operation="open",showCmd,workdir,hwnd,fmask) = 运行exe应用程序,返回SHELLEXECUTEINFO结构体\n参数详细用法请参考本函数源码以及WINAPI中ShellExecuteEx函数用法\n除参数@1以外所有参数可选
execute(.("__", parameters="",operation="open",showCmd,workdir,hwnd) = 运行exe应用程序\n参数详细用法请参考本函数源码以及WINAPI中ShellExecuteEx函数用法\n除参数@1以外所有参数可选\n参数@1为程序路径或系统命 令\n参数@parameters 为启动参数\n参数@operation 为启动模式\n参数@showCmd使用_SW_前缀常量与win.show参数用法相同\n参数@workdir为工作目录\n参数@hwnd 为父窗口句柄
execute_wait(.("__", parameters="",operation="open",showCmd,workdir=",hwnd=0) = 运行exe应用程序\n并等待应用程序关闭\n除参数@1以外所有参数可选
execute_waitInput(.("__", parameters="",operation="open",showCmd,workdir=",hwnd=0) = 运行exe应用程序\n并等待进程初始化完成并接受输入\n除参数@1以外所有参数可选
explore_select("__/*文件路径*/") = 打开资源管理器,选定该文件
explore("__/*目录路径*/") = 使用资源管理器打开目录
findExe("__/*文件路径*/") = 查找文件关联的可执行程序
isExe("__/*文件路径*/") = 检测目标文件是否可执行文件\n如果是可执行文件返回"PE32"或"PE64"\n第二个返回值为子系统,GUI为2,CUI为3
find("__/*exe文件名*/") = 查找进程并返回进程对象\n支持模式匹配语法,忽略大小写
kill("__/*exe文件名*/") = 查找所有同名exe文件的进程,并关闭进程\n支持模式匹配语法,忽略大小写
each =  @for processEntry in process.each( ".*.exe" ) { \n//遍历所有进程\n	__//io.print( processEntry.szExeFile  )\n \n}
eachModule =  @for moduleEntry in process.eachModule(__/*进程ID*/) { \n//io.print( moduleEntry.szExePath  )\n \n}
eachThread =  @for threadEntry in process.eachThread(__/*进程ID*/) { \n//io.print( threadEntry.th32ThreadID  )\n \n}
getPath(__/*进程ID*/) = 返回执行程序文件完整路径
openWindow(__/*输入窗口句柄*/) = 使用窗口句柄打开进程ID
getId() = 获取当前进程ID
getHandle() = 获取当前进程伪句柄
dup(.(句柄,源进程句柄,目标进程句柄) = 进程句柄参数省略则为当前进程句柄\n函数支持更多可选参数如下:\n(句柄,源进程,目标进程,是否可继承,选项,安全访问级别)\n默认可继承,选项默认为_DUPLICATE_CLOSE_SOURCE | _DUPLICATE_SAME_ACCESS\n如果不指定最后一个参数 
dup(.(句柄,源进程句柄) = 从指定进程复制句柄到当前进程
dup(.(句柄,,目标进程句柄) = 复制句柄到目标进程句柄
end intellisense**/
 
/**intellisense(!startinfo)
desktop = 标识启动应用程序所在的桌面的名字
title = 控制台标题
x = x坐标(子进程使用默认坐标时、或控制台窗口支持)
y = y坐标(子进程使用默认坐标时、或控制台窗口支持)
xSize = 窗口宽(子进程使用默认坐标时、或控制台窗口支持)
ySize = 窗口高(子进程使用默认坐标时、或控制台窗口支持)
xCountChars = 控制台宽度(字符单位)
yCountChars = 控制台高度(字符单位)
fillAttribute = 控制台窗口使用的文本和背景颜色
flags = @.flags = _STARTF_USE__ //指定结构体中哪些成员生效\n
showWindow = 显示参数\n支持以_SW_前缀的常量\n_SW_HIDE表示隐藏窗口(默认值)
stdInput = 标准输入(可用于创建管道)
stdOutput = 标准输出(可用于创建管道)
stdError = 标准错误输出(可用于创建管道) 
waitInputTimeout = 进程启动后等待初始化完成的最大超时\n默认为0xFFFFFFFF(无限等待),设为0则不等待
creationFlag = @.creationFlag = CREATE__ //创建进程的参数，参考API CreateProcess的说明
inheritHandles = 默认值为真，所有有可被继承属性的内核对象都会被复制到子进程(实际上是内核对象引用计数加一)
environment = 新进程的环境块\n以键值对组成的字符串，也可以传入包含键值对的表对象，\n此参数一般不建议设置
processAttributes = SECURITY_ATTRIBUTES结构体指针，一般不建议设置\n如需设置请使用raw.malloc将结构体转换为指针
threadAttributess = SECURITY_ATTRIBUTES结构体指针，一般不建议设置\n如需设置请使用raw.malloc将结构体转换为指针
workdir = 进程工作目录,一般不建议设置
suspended = 是否休眠创建进程的主线程\n如果为真自动添加_CREATE_SUSPENDED参数
username = 登录用户名
password = 登录密码
domain = 域名
logonFlags = 登录选项,默认为 _LOGON_WITH_PROFILE
end intellisense**/

/*intellisense(!processEntry) 
dwSize = 296;
cntUsage = 0;
th32ProcessID = 进程ID,INT数据类型
th32DefaultHeapID =  
th32ModuleID = associated exe
cntThreads = 0;
th32ParentProcessID = 父进程ID,INT数据类型
pcPriClassBase = 进程优先级,INT数据类型
dwFlags = 0;
szExeFile = exe文件路径 
end intellisense*/

/*intellisense(moduleEntry)  
dwSize = 结构体大小
th32ModuleID = 模块ID;
th32ProcessID = 进程ID,INT数据类型
GlblcntUsage =  
ProccntUsage =  
modBaseAddr = 模块基址;
modBaseSize = 
hModule = 模块句柄
szModule = 0;
szExePath = 
end intellisense*/

/*intellisense(threadEntry)  
dwSize = 结构体大小
cntUsage = 引用计数
th32ThreadID = 线程ID
th32OwnerProcessID = Process this thread is associated with
tpBasePri = 
tpDeltaPri = 
dwFlags = 
th32OwnerProcessID = 进程ID
end intellisense*/

/*intellisense(heapEntry)  
dwSize = 结构体大小;
hHandle = Handle of this heap block
dwAddress = Linear address of start of block
dwBlockSize = Size of block in bytes
dwFlags = 
dwLockCount = 
dwResvd = 
th32ProcessID = owning process
th32HeapID = heap block is in
end intellisense*/

/*intellisense(heapList)  
dwSize = 结构体大小; 
th32ProcessID = owning process
th32HeapID = heap (in owning process's context!)
dwFlags = 
end intellisense*/