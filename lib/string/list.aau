//list 字符串列表 
namespace string;
 
class list{ 
    ctor(str, lineDelimiter, nameValueSeparator) {   
    	this[-1] = { 
    		lineDelimiter = lineDelimiter : '\r\n';
    		nameValueSeparator = nameValueSeparator : '=';
    		quoteChars = {
    			 ['\''#] = "''";
				 ['"'#] = '""'; 
				 ['{'#] = '{}';
				 ['('#] = '()"';
				 ['['#] = '[]';
			} 
			keys = {};
			reserve = { each = 1; load = 1; save = 1;find=1;mixin=1}
			reserveData = {};
		};
        if( ( #str < 0x104/*_MAX_PATH*/ ) && ( ..io.exist(str) ) ){
        	str = ..string.load(str);
        	this[-1].path = str;
        }
         
        if(str) createList(this,str); 
    };  
    @ _metaProperty;  
}
 
namespace list {
	import util.metaProperty;
	
	var push = ..table.push
	var trim = ..string.trim;
	var trimleft = ..string.trimleft;
	var find = ..string.find;
	var left = ..string.left;
	var sub = ..string.sub;
	var match = ..string.match;
	
	createList = function( this,s) {  
		if(!#s) return;
		var lineDelimiter = this[-1].lineDelimiter;
		var nameValueSeparator = this[-1].nameValueSeparator;
		var quoteChars = this[-1].quoteChars;
		var keys = this[-1].keys;
		var reserve = this[-1].reserve;
		var reserveData = this[-1].reserveData;
		
		while( 
    		var i,j,vi,vj,si,sj,q,k,v ;
    		i,j = find(s,"@@" + nameValueSeparator ); 
    		i 
		) {
			k = trim( sub(s,1,i-1) );
			s = trimleft( sub(s,j+1) ); 
			si,sj = find(s,"@@"  + lineDelimiter); 
			
			if( si ){
				q = quoteChars[s[1]] || quoteChars[s[si-1]]; 
				if( q ){ //发现引用段
					vi,vj = find(s,"%" + q )
					if(vi){
						v = sub(s,1,vj-1);  
						si,sj = find(s,"@@"  + lineDelimiter,vj+1);
						if(!si) {
							v = s;
							s = "";
						}
						else{
							v = trim( sub(s,vi,si-1) ); 
							s = sub(s,sj+1);  
						}
					}
					else { 
						break;
					} 
				}
				else {
					v = trim( sub(s,1,si-1) );
					s = trimleft( sub(s,sj+1) ); 	
				}
			} 
			else { 
				v =  s; 
			} 
			
			//键名中禁止行分隔符
			while( 
			    var kl;
			    kl = find(k,"@@"  + lineDelimiter);
			    kl
			) {
				k = ..string.sub(k,kl+#lineDelimiter);
			} 
			
			if( !reserve[k] ){
				if( !this[[k]] ) push(keys,k);
				this[[k]] = trim(v);
			}
			else {
				if( !reserveData[[k]] ) push(keys,k);
				reserveData[[k]] = trim(v);
			}
			
		}
	}	 
	
	_metaProperty = ..util.metaProperty( 
		_type = "object";
		save = function(filepath){ 
			if(filepath) owner[-1].path  = filepath;   
    		..string.save(owner[-1].path  ,tostring(owner) )   
    		return owner;
    	}
    	load = function(filepath){  
    		if( ! #filepath ){
    			error("请指定正确的文件路径",2)
    		}  
    		var str = ..string.load( filepath ) 
    		if(!str) return;
    		
    		owner[-1].keys = {};
    		owner[-1].reserveData = {}; 
       		owner[-1].path  = filepath; 
       		
       		var cfg = owner[-1];
       		for(k,v in owner){ owner[[k]]= null }
       		owner[[-1]] = cfg;
       		
       		createList(owner,str);  
       		return owner;
    	};
    	mixin = function(...){
    		var cfg = owner[-1];
    		var r = ..table.mixin(owner,...);
    		owner[-1] = cfg;
    		return r;
    	};
		set = function(k,v) {   
			k = tostring(k)
			var keys = owner[-1].keys;
			if( owner[[k]] === null ) ..table.push(keys,k);
				
			owner[[k]] = v;
			return owner ; 
		}; 
		find = function(k){
			var keys = owner[-1].keys;
    		for(i=1;#keys){
    			if( ..string.cmp( keys[i],k ) == 0) {
    				var v = owner[[k]];
					if(owner[-1].reserve[k]) v = owner[-1].reserveData[k]; 
    				return i,k,v; 
    			}
    		} 
    	};  
		each = function(){
			var this = owner;
			var keys = this[-1].keys;
			var reserveData = owner[-1].reserveData; 
			var reserve = owner[-1].reserve; 
			
			return function(i=0){
				i++;
				var k = keys[i]; 
				if(!k)return;
				
				var v = this[[k]];
				if(reserve[k]) v = reserveData[k]; 
				return i,k,v
			} 
		}; 
		_tostring = function() {
			var reserve = owner[-1].reserve; 
			var reserveData = owner[-1].reserveData; 
			var nameValueSeparator = owner[-1].nameValueSeparator; 
			var keys = owner[-1].keys; 
			if( not #keys ) return "";
			  
			var k,v; 
			var t = {};
			for( i= 1 ; #keys){
				k = keys[i];
				v = owner[[ k ]];
				if( reserve[k] ) v = reserveData[k];
				
				v = trim( tostring( v ) );
    			push(t, ..string.concat( k,nameValueSeparator,v ) );
			} 
			return ..string.join(t,owner[-1].lineDelimiter) ;
		};
		getConfiguration = function(){
    		return owner[-1];
    	} 
    	separator = {
    		_get = function(){
    			return owner[-1].lineDelimiter
    		};
    		_set = function(v){
    			owner[-1].lineDelimiter = v;
    		} 
    	}
    	mark = {
    		_get = function(v){
    			return owner[-1].nameValueSeparator
    		};
    		_set = function(v){
    			owner[-1].nameValueSeparator = v;
    		}
    	}
	)
}

/**intellisense()
string.list = 字符串列表
string.list( = 创建字符串列表
string.list(字符串,分隔符,键值对分隔符) = 第一个参数也可以是文件路径\n所有参数可选
!stringlist.load("__/*文件路径*/") = 加载配置文件 
!stringlist.save("__/*文件路径*/") = 保存配置文件
!stringlist.save() = 保存配置文件\n!stringlist.
!stringlist.mixin = @.mixin(\n	键 = 值__;\n)
!stringlist.find("__/*键名*/") = 查找指定键所在位置,忽略大小写\n返回三个值: 位置索引,键名,键值
!stringlist.getConfiguration() = 返回配置\n!stringlistcfg.
!stringlistcfg.lineDelimiter = 行分隔符,默认为回车换行
!stringlistcfg.nameValueSeparator  = 键值对分隔符,默认为等号
!stringlistcfg.quoteChars = 引用符号配置\n默认为单双引号、大中小括号,\n可设为空表清空所有引用符号,\n引用符号内忽略行分隔符
!stringlistcfg.reserve = 保留名字表,不可修改
!stringlistcfg.reserveData = 保留数据,不可手动修改
!stringlist.each = @for i,k,v in ??.each() { 
	io.print("顺序:"+i,"名字:"+k,"值:"+v )__ 
}
string.list() = !stringlist.
!stringlist.load() = !stringlist.
end intellisense**/