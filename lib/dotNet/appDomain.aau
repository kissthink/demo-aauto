//appDomain 应用程序域
namespace dotNet;

class appDomain{

	ctor( clr,domainName ){
	
		var appDomain;
		 
		if(!domainName) domainName = "Aardio.CLR.AppDomain";   
		if( __appDomainCache[domainName] ) return __appDomainCache[domainName];
		__appDomainCache[domainName] = this;
		
		var hr,pAppDomain = clr.corRuntimeHost.CreateDomainEx( ..string.toUnicode(domainName),clr.AppDomainSetup ); 

		var wrapAssembly = function(asm,...){
			if(!asm) return asm,...;
			asm[["_createInstance"]] = asm.CreateInstance;
			asm[["createInstance"]] = function(typeName,...){
				if( type(typeName)!=type.string )error("请指定类名称,参数@2",2);
				if(!...) return asm._createInstance(typeName);
				var arrlist = this.createArrayList({...}); 
				var ok,result  = call(this.utility.InvokeMember,this.utility, asm ,typeName,""
					, 512 /*BindingFlags.CreateInstance*/
					,arrlist,null );
				if( !ok ) return null,result;
				return result;
			}
			asm[["invokeMember"]] = function(typeName,methodName,bindingFlags,...){
				var arrlist = this.createArrayList({...}); 
				
				var ok,result  = call(this.utility.InvokeMember,this.utility, asm ,typeName,methodName
					,bindingFlags : 0 ,arrlist,null); 
				if( !ok ) return null,result;
				return result;
			} 
			asm[["invokeStaticMember"]] = function(typeName,methodName,...){
				var arrlist = this.createArrayList({...});
				
				var ok,result  = call(this.utility.InvokeMember,this.utility, asm ,typeName,methodName
					,16 | 8 | 256 /*Public|Static|InvokeMethod*/
					,arrlist,null); 
				if( !ok ) return null,result;
				return result;
			} 
			asm[["getStaticMember"]] = function(typeName,methodName,...){
				if(!methodName) typeName,methodName = ..string.match(typeName,"(.+)\.([^.]+)$");  
				var arrlist = this.createArrayList({...});
				
				var ok,result  = call(this.utility.InvokeMember,this.utility, asm ,typeName,methodName
					,16 | 8 | 4096 | 1024 /*Public|Static|GetProperty|GetField*/
					,arrlist,null); 
				if( !ok ) return null,result;
				return result;
			}  
			
			return asm,...;
		}
		
		if(  (hr)>=0/*_SUCCEEDED*/ ){
			appDomain = ..com.QueryObject( pAppDomain);
			..com.Release(pAppDomain);
			
			this.loadFile  = function( rawAssembly ){    
				if(type(rawAssembly)!=type.string )error("请指定程序集",2);
				
				if( #rawAssembly < 0x104/*_MAX_PATH*/ )
					rawAssembly = ..string.load(rawAssembly) : rawAssembly; 
				return wrapAssembly( appDomain.Load_3( rawAssembly ) );
			}; 
			this.load = function( assemblyName ){  
				if(!assemblyName) error("请指定程序集名称",2);  
				return wrapAssembly( this.utility.loadAssembly( ..io.localpath(assemblyName) : assemblyName ) ); 
			};
			
			this.interop = this.loadFile($"~/lib/dotNet/.res/Aardio.InteropServices.dll" );
			this.utility = this.interop.createInstance("Aardio.InteropServices.Utility");
			this.mscorlib = this.load("mscorlib");
			this.system = this.load("System");
		}
		else {
			return null;
		}
		
		
		this.appDomainReal = appDomain;
	};
	createArrayList = function( tab ){ 
		var list = this.mscorlib.CreateInstance("System.Collections.ArrayList"); 
		if( tab ){
			for(i=1;#tab;1){
				list.Add(tab[i]); 
			} 
		}
		return list;
	}; 
	invokeMember = function(assemblyName,typeName,methodName,bindingFlags,target,...){
		var arrlist = this.createArrayList({...});
		var ok,result  = call(this.utility.InvokeMember,this.utility, ..io.localpath(assemblyName) : assemblyName 
				,typeName,methodName ,bindingFlags : 0 ,arrlist,target); 
		if( !ok ) return null,result;
		return result;
	}; 
	invokeObjectMember = function(target,methodName,bindingFlags,...){
		var arrlist = this.createArrayList({...});
		var ok,result  = call(this.utility.InvokeObjectMember,this.utility,target,methodName ,bindingFlags : 0 ,arrlist); 
		if( !ok ) return null,result;
		return result;
	};
	getObjectMember = function(target,methodName,...){
		var arrlist = this.createArrayList({...});
		var ok,result  = call(this.utility.InvokeObjectMember,this.utility,target,methodName 
			,16 | 4 | 8 | 64 | 4096 | 1024 /*Public|Instance|Static|FlattenHierarchy|GetProperty|GetField*/ ,arrlist); 
		if( !ok ) return null,result;
		return result;
	};
	invokeInstanceMember = function(target,methodName,...){
		var arrlist = this.createArrayList({...});
		var ok,result  = call(this.utility.InvokeObjectMember,this.utility,target,methodName 
			,16 | 4 | 256 /*Public|Instance|InvokeMethod*/,arrlist); 
		if( !ok ) return null,result;
		return result;
	};
	setInstanceMember = function(target,methodName,...){
		var arrlist = this.createArrayList({...});
		var ok,result  = call(this.utility.InvokeObjectMember,this.utility,target,methodName 
			,16 | 4 | 8192 | 2048 /*Public|Instance|SetProperty|SetField*/ ,arrlist); 
		if( !ok ) return null,result;
		return result;
	};
	getInstanceMember = function(target,methodName,...){
		var arrlist = this.createArrayList({...});
		var ok,result  = call(this.utility.InvokeObjectMember,this.utility,target,methodName 
			,16 | 4 | 4096 | 1024 /*Public|Instance|GetProperty|GetField*/ ,arrlist); 
		if( !ok ) return null,result;
		return result;
	};
	invokeStaticMember = function(assemblyName,typeName,methodName,...){
		var arrlist = this.createArrayList({...}); 
		var ok,result  = call(this.utility.InvokeMember,this.utility, ..io.localpath(assemblyName) : assemblyName 
				,typeName,methodName ,16 | 8 | 256 /*Public|Static|InvokeMethod*/
				,arrlist,null); 
		if( !ok ) return null,result;
		return result;
	};
	getStaticMember = function(typeName,methodName,...){
		if(!methodName) typeName,methodName = ..string.match(typeName,"(.+)\.([^.]+)$"); 
			
		var arrlist = this.createArrayList({...}); 
		var ok,result  = call(this.utility.InvokeMember,this.utility, ..io.localpath(assemblyName) : assemblyName 
				,typeName,methodName ,16 | 8 | 64 | 4096 | 1024 /*Public|Static|FlattenHierarchy|GetProperty|GetField*/
				,arrlist,null); 
		if( !ok ) return null,result;
		return result;
	};
	invokeCreateInstance = function(assemblyName,typeName,...){ 
		if( !assemblyName ) error("请指定程序集,参数@1",2);
		if( type(typeName)!=type.string )error("请指定类名称,参数@2",2);
		
		var arrlist = this.createArrayList({...});
		var ok,result  = call(this.utility.InvokeMember,this.utility, ..io.localpath(assemblyName) : assemblyName 
				,typeName,"", 512 /*BindingFlags.CreateInstance*/
				,arrlist,null); 
		if( !ok ) return null,result;
		return result;
	};
	createInstance = function(assemblyName,typeName,...){
		if( !assemblyName ) error("请指定程序集,参数@1",2); 
		if(type(typeName)!=type.string )error("请指定类名称,参数@2",2);
		if( ... !== null )  return this.invokeCreateInstance( assemblyName,typeName,... ); 
		
		if(type(assemblyName)!=type.string )error("请指定程序集名称,参数@1",2);
		var handle = appDomain.CreateInstance(assemblyName,typeName);  
		return handle.UnWrap();
	};
	createInstanceFrom  = function(assemblyName,typeName ){   
		if(type(typeName)!=type.string )error("请指定类名称,参数@2",2);
		if(type(assemblyName)!=type.string )error("请指定程序集名称,参数@1",2);
		assemblyName = ..io.localpath(assemblyName) or assemblyName  ;  
		
		var handle = appDomain.CreateInstanceFrom(assemblyName,typeName);
		return handle.UnWrap();
	};  
	createCompiler = function(lang,appDomain ){ 
		
		var providers = {
			["C#"] = "Microsoft.CSharp.CSharpCodeProvider";
			["VB"] = "Microsoft.VisualBasic.VBCodeProvider";
		}
		var providerType = providers[lang];
		if( ! providerType ) error("请正确指定编译器语言",2)
		
		var compile = this.utility.CreateCompiler(providerType); 
		if( compile ){
			compile[["_Reference"]] = compile.Reference;
			compile[["Reference"]] = function(path,...){
				var ret = owner._Reference( ..io.localpath(path) : path )
				if(!...) return ret;
				return owner.Reference(...);
			} 
			compile[["_Compile"]] = compile.Compile;
			compile[["Compile"]] = function(...){ 
				return wrapAssembly( owner._Compile(...) );
			} 
			
		}
		return compile;
	} 
	unload = function(){
		if(appDomain){
			__appDomainCache[domainName] = null;
			
			var pAppDomain = ..com.GetPointer(appDomain);
			var hr = clr.corRuntimeHost.UnloadDomain(pAppDomain)
			..com.Release(pAppDomain)
			
			appDomain = null;
			this.appDomainReal = null;
			
			if(  (hr)>=0/*_SUCCEEDED*/ ) return true;
			return null,..lasterr(hr);
		}
	}; 
	@_meta;
}

namespace appDomain{

	__appDomainCache = {} 
	
	import util;
	util.connect( ,"beforeUnload",function(){
		for(k,appDomain in __appDomainCache){
			appDomain.unload(); 
		}
	} );
	
}


/**intellisense(!dotNetAppDomain)
appDomainReal = AppDomain 托管对象
mscorlib = mscorlib.dll程序集!dotNetCrlAssembly.
system = Systme.dll程序集\n!dotNetCrlAssembly.
interop = Aardio.InteropServices.dll程序集\n!dotNetCrlAssembly.
utility = Aardio.InteropServices.Utility对象
invokeMember(.(程序集,"类名","方法名",BindingFlags,目标对象,其他调用参数) = 调用类方法，目标对象可省略,\n失败返回空值,以及错误信息
invokeStaticMember(.(程序集,"类名","方法名",其他调用参数) = 参数一可以是程序集对象,名称或路径都可以,\n调用类的静态方法，支持传入多个调用参数并返回值。	\n失败返回空值,以及错误信息		
getStaticMember(.(程序集,"类名","字段名") = 参数一可以是程序集对象,名称或路径都可以,\n获取字段或属性值
invokeCreateInstance(.(程序集,"类名",其他调用参数) = 参数一可以是程序集对象,名称或路径都可以,\n调用类的构造函数，支持传入多个调用参数并返回创建的对象。	\n失败返回空值,以及错误信息		
createInstance(.("程序集名称","类名") = 创建实例对象\n可传入多个构造参数
createInstanceFrom(.("程序集跃径","类名") = 创建实例对象

invokeObjectMember(.(目标对象,"方法名",BindingFlags,其他调用参数) = 调用对象的成员方法，支持传入多个调用参数并返回值	\n失败返回空值,以及错误信息	
invokeInstanceMember(.(目标对象,"方法名",其他调用参数) = 调用类的成员方法，支持传入多个调用参数并返回值	\n失败返回空值,以及错误信息	
getInstanceMember(.(目标对象,"字段名") = 获取对象实例的字段或属性\n失败返回空值,以及错误信息	
setInstanceMember(.(目标对象,"字段名",值) = 设置对象实例的字段或属性\n成功返回空值,失败返回空值,以及错误信息
getObjectMember(.(目标对象,"字段名") = 获取对象的字段或属性,支持实例成员或静态成员,\n失败返回空值,以及错误信息	

load(.("程序集全名") = 载入程序集,\n必须使用完整限定名
loadFile(.("程序集跃径") = 载入程序集,\n参数可以是路径,或内存资源
load() = !dotNetCrlAssembly.
loadFile() = !dotNetCrlAssembly.
unload() = 卸载应用程序域

createCompiler("C#") = 创建C#编译器
createCompiler("VB") = 创建VB编译器
createCompiler() = !dotNetCompiler.

createArrayList(.(初始化数组) = 创建 System.Collections.ArrayList 对象\n可传递到C#函数中,C#中应声明为object类型,然后强制转换为ArrayList,\n使用圆括号访问数组成员,0为初始下标,\n可选参数一指定table数组用于初始化对象
createArrayList() = !dotNetCrlArrayList.
end intellisense**/

/**intellisense(!dotNetCrlArrayList) 
Add(.(添加对象) = 添加成员到数组中
Clear() = 添空数组
ToArray() = 转换并返回普通table数组,\n返回数组起始下标为1
end intellisense**/

/****intellisense(!dotNetCompiler)
getProvider() = 编译器
getParameters() = 编译参数
getParameters().setOutputAssembly(.("->dll") = 指定输出文件路径,\n参数需要调用io.fullpath()转换为绝对路径,\n需要调用setGenerateInMemory(false)取消内存编译,\n调用setGenerateExecutable指定编译为DLL或者EXE
getParameters().setGenerateExecutable(true) = 编译为EXE执行文件
getParameters().setGenerateExecutable(false) = 编译为DLL
getParameters().getGenerateExecutable() = 是否编译为EXE执行文件
getParameters().getGenerateInMemory() = 是否内存编译
getParameters().setGenerateInMemory(false) = 取消内存编译 
getLastError()  = 获取编译错误信息
Reference("System->dll") = 引用程序集,\n可指定任意多个参数
Source = @.Source = /***\nusing System;\nusing System.Runtime.InteropServices;\n[assembly: IDispatchImpl(IDispatchImplType.CompatibleImpl)]\n\nnamespace CSharpLibrary  \n{\n    [IDispatchImpl(IDispatchImplType.InternalImpl)]\n    [ComVisible(true), ClassInterface(ClassInterfaceType.AutoDual)]\n    public class CSharpObject  \n    {\n        public CSharpObject()\n        {\n			__\n        } \n    }\n} \n***/
Compile() = 编译并返回程序集\n!dotNetCrlAssembly.
end intellisense****/

/**intellisense(!dotNetCrlAssembly)
Location = 获取完整路径
FullName = 获取程序集的全名
createInstance(.("类名",->->-> ) = 创建对象实例,\n可添加不定个数构造参数\n失败返回空值,以及错误信息
invokeStaticMember(.("类名","方法名",->->-> ) = 调用类的静态方法,\n可添加不定个数调用参数\n失败返回空值,以及错误信息
invokeMember(.("类名","方法名",BindingFlags) = 调用类的方法,\n可添加不定个数调用参数\n失败返回空值,以及错误信息
getStaticMember(.("类名","字段名") = 获取字段或属性值
end intellisense**/