//media 媒体文件播放
import fsys.localfile;

namespace fsys;

class media{
	ctor( path,flags,hwndCallback ){
		this.hwndCallback = hwndCallback;
		this.localfile = ..fsys.localfile(path);
		if(!this.localfile) return null; 
		
		var cmd = 'open "' + ( this.localfile.path() ) + '" ';
		if( flags ) {
			cmd = cmd + flags;
		}
		var r,msg = self.execute( cmd,this.hwndCallback   );
		if( !r ) return null,msg;
		..table.gc(this,"close")
	};
	path = function(){
		return this.localfile ? this.localfile.path()
	};
	send = function(cmd,...){
		if(!this.localfile) return null,"媒体文件已关闭"; 
		cmd = ..string.replace(cmd,"@@$PATH",'"' + ( this.localfile.path() ) + '"',1);
		if( ... ) cmd = ..string.format(cmd,... )
		return self.execute( cmd,this.hwndCallback   ); 
	};
	play = function(...){
		return this.send( ..string.concat("play	$PATH ",...) ); 
	};
	stop = function(){
		return this.send( "stop $PATH" );
	};
	resume = function(){
		return this.send( "resume $PATH" );
	};　　　
	pause = function(){
		return this.send( "pause $PATH" );
	};
	seek = function(pos){
		return this.send( "seek $PATH to %d",pos ); 
	};
	step = function(step){ 
		var cmd = 'step "' + ( this.localfile.path() ) 
		if( step ) cmd = cmd + '" by ' + step;
		return this.send( cmd ); 
	};
	length = function(){
		var r,len = this.send( "Status $PATH length"  ); 
		if( r ) return (tonumber(len));
		return r,len;
	};
	volume = function(v){
		if( v ){ 
			return this.send( "setaudio $PATH volume to %d",v  ); 
		}
		var r,volume = this.send( "Status $PATH volume"  ); 
		if( r ) return (tonumber(volume));
		return r,volume;
	};
	position = function(){
		var r,position = this.send( "Status $PATH position"  ); 
		if( r ) return (tonumber(position));
		return r,position;
	};
	mode = function(){
		var r,mode = this.send( "Status $PATH mode"  ); 
		if( r ) return mode;
		return r,mode;
	}; 
	close = function(){
		var r,msg = this.send( "close $PATH"  ); 
		this.localfile.free();
		this.localfile = null;
		return r,msg;
	};
}
namespace media{

	::Winmm  :=  ..raw.loadDll("Winmm.dll");
	var sendStringA = Winmm.api("mciSendStringA","int(string lpstrCommand,str &lpstrReturnString,int uReturnLength,int hwndCallback)")
	var getErrorStringA = Winmm.api("mciGetErrorStringA","bool(INT err,str& strErr,INT cchErr )")
	
	getErrorString = function(err){
		if( !err ) return;
		var ok,msg = getErrorStringA(err,128,128);
		if( ok) return msg;
	}
	
	self.execute = function(command,hwndCallback){
		if( hwndCallback ) command = command + " notify";
    	var err,msg = sendStringA( command,256, 256, hwndCallback : 0 )
    	if( err == 0 ) 
    		return true,msg;
    	else 
    		return false,getErrorString(err);
	}
	
	closeAll = function(){
		self.execute("close all");
	}
	
	
	playSound = function(filepath,flag){ 
		if( flag === null ) flag = 1 /*_SND_ASYNC*/;
		if( type(flag) != type.number ) error("参数@2未指定正确的选项",2);
			
    	if(!filepath) ::Winmm.PlaySound(null,0,flag)
    	else{
    		if( type(filepath) != type.string ) error("参数@1未指定正确的文件路径",2);
    		
    		if( #filepath > 0x104/*_MAX_PATH*/ ){
    			return  ::Winmm.PlaySound( filepath,0,flag | 0x4/*_SND_MEMORY*/ )
    		}
    		
    		if( ( !..io.exist(filepath) ) && ..io.localpath(filepath) ){
    			var wav = ..string.load(filepath)
    			if( wav ) ::Winmm.PlaySound( wav,0,flag | 0x4/*_SND_MEMORY*/ )
    		}
    		else{
				::Winmm.PlaySound( ..io.fullpath(filepath),0,flag)
			}
		}
	} 
}

/**intellisense(fsys)
media.closeAll() = 全部关闭
media.playSound(.("WAVE文件路径",选项) = 播放WAVE文件,参数@2可选\nWAVE文件可指定内嵌资源或内存文件,如果为null空值则停止播放
media.getErrorString(.(错误代码) = 返回错误信息
media.execute(.("MCI媒体控制命令",通知窗口句柄) = 发送MCIMCI媒体控制命令\n如果指定通知窗口句柄则在命令尾部添加"notify"\n成功返回true,可选的返回消息,\n失败返回false,错误信息
media(.("媒体文件路径","其他选项",通知窗口句柄) = 打开媒体文件,支持MP3\n参数@2,@3为可选参数
media() = !fsys_media.
end intellisense**/
 
/**intellisense(!fsys_media)
path() = 打开的文件路径
send(.("MCI媒体控制命令") = 使用$PATH表示打开的媒体文件路径,不要加引号\n如果传入多个参数则使用string.format格式化
play() = 播放\n可选添加多个文本指令参数,例如"wait"
play("wait") = 播放并等待
play("repeat") = 循环播放
stop() = 停止播放
close() = 关闭
pause() = 暂停
resume() = 继续
volume() = 无参数获取音量\n指定数值参数设置音量
mode() = 返回状态
length() = 长度
seek(.(位置) = 移动到指定位置
step(.(-1) = 负数向前,正数向后,省略跳到下一步
end intellisense**/