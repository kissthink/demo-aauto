//path 路径函数
import fsys;//注意存在循环引用,导入过程中可能未初始化完成
namespace fsys;
namespace path { 
	::Shlwapi := ..raw.loadDll("Shlwapi.dll");
	PathCompactPath = Shlwapi.api("PathCompactPathA", "int(pointer hdc, str&lpszPath, INT dx)" )
	PathCanonicalize = Shlwapi.api("PathCanonicalizeA", "int(str &dst,str src)" )  
	PathCommonPrefix = Shlwapi.api("PathCommonPrefixA", "int(str,str,str&)" )  
	PathRemoveBackslash = Shlwapi.api("PathRemoveBackslashA", "str(str &pszPath)" ) 
	PathAppend = Shlwapi.api("PathAppend", "bool(pointer path,str more)" );
	PathRelativePathTo = Shlwapi.api("PathRelativePathTo", "bool(str& pszPath,str pszFrom,INT dwAttrFrom,str pszTo,INT dwAttrTo)" ); 
	
	relativeTo = function(from,to,fromAttr,toAttr){
		if(! (from && to) ) error("请指定正确的参数",2);
		from = ..fsys.longpath(from);
		to = ..fsys.longpath(to);
		
		if( fromAttr === null ){
			fromAttr = 0x10/*_FILE_ATTRIBUTE_DIRECTORY*/;
			if( ..io.exist( from )  ){
				if( !..fsys.isDir(from) ) toAttr = 0;
			} 
		}
		if( toAttr === null ){
			toAttr = 0;
			if( ( ..io.exist( to ) && ..fsys.isDir(to) ) || eofBackslash(to) ){
				if( ..fsys.isDir(to)  ) toAttr = 0x10/*_FILE_ATTRIBUTE_DIRECTORY*/
			} 
		} 
		
		var ok,path = PathRelativePathTo(0x104/*_MAX_PATH*/,from,fromAttr,to,toAttr); 
		if(ok)return path;
	}
	relative = function(path,dir,prefix=true,pathAttr){
		if(! (path && dir) ) error("请指定正确的参数",2); 
 			
 		dir = addBackslash(dir);
 		var r = relativeTo( dir,path,0x10/*_FILE_ATTRIBUTE_DIRECTORY*/,pathAttr)
 		if( !r )
 				return ( ! ..string.match( path,"<\a+\:>|<\\\\>" ) ) ? path : null;

 		if( ..string.startWith(r,".\") ){
 			if( prefix ) return ..string.right(r,-2);
 			return #r>2?..string.right(r,-3):".";
 		}
 		if( ..string.startWith(r,"..") || ..string.startWith(r,"\..")){
 			if(  cmp(path,dir) ) return;
 			return prefix?"\":".";
 		}
 			
 		if( prefix ){
 			if( r[1] == '\\'# ) return r;
 			return "\" + r;
 		}
 		if( r[1] == '\\'# ) return ..string.right(r,-2);
 		return r;
 	}
	append = function(path,...){
		if( !path ) {
			if( ... ) return append( ... )
			error("路径参数不能为空",2)
		};
		if( type(path) != "string" ) error("路径参数类型错误:" + type(path),2);
		
		path = ..string.replace(path,'/','\\');
		var m = ..raw.malloc(0x104/*_MAX_PATH*/,path);
		var t = {...}
		var p;
		for(i=1;#t;1){
			p = t[i];
			if( !p ) continue;
			p = ..string.replace(p,'/','\\');
			if( ! PathAppend(m,p) )
				return; 
		};
		return ..raw.str(m);
	}
	eofBackslash = function(path){
		path = ..string.replace(path,'/','\\');
		var e,path = PathRemoveBackslash(path);
		return (!#e) || (e=="\")
	};
	removeBackslash = function(path){
		if(!path) error("路径参数不能为空",2);
		path = ..string.replace(path,'/','\\');
 		var e,path = PathRemoveBackslash(path);
 		return path,e;
 	}  
	addBackslash = function(path){
		path = ..string.replace(path,'/','\\');
 		var e,path = PathRemoveBackslash(path); 
 		return (e!="\") ? path + "\" : path;
 	}
	compact = function(path,pix = 300){
		var re,path = PathCompactPath( ,path,pix)
		return path;
	} 
	commonPrefix = function(path,path2){
		var l,p = PathCommonPrefix(canonicalize(path),canonicalize(path2),0x104/*_MAX_PATH*/)
		if(l) return addBackslash(p);//保证尾部为斜杠
	} 
	cmp = function(path,path2){
		return ..string.cmp(canonicalize(path),canonicalize(path2));
	} 
 	canonicalize = function(path,lng=true){ 
		if(!path) error("路径参数不能为空",2)
		path = ..string.replace(path,'/','\\');
 		if( path[#path] == ':' ) path = path + "\";
 		if( lng ) path = ..fsys.longpath(path);
 		var ret,cp = PathCanonicalize(0x104/*_MAX_PATH*/,path ); 
 		if(ret){ 
 			return ( removeBackslash( cp ) );//除分区根目录外保证尾部不为斜杠
 		}
 	}
 	replaceDir = function(path,dir,newDir){ 
		return  ..fsys.joinpath(newDir,relative(path,dir) );
	}
	replaceFile = function(path,newFile){ 
		if(!path) error("路径参数不能为空",2);
		return  ..fsys.joinpath(..fsys.getParentDir(path),newFile);
	}	
 	validName = function(name){
 		if( type(name) != "string" ) return;
 		
 		var valid = true;
 		var name,count = ..string.replace(name,"[\/\:\*\?\""\<\>]","");
 		if( count ) valid = false;
 		
 		name,count = ..string.replace(name,"@@\","");
 		if( count ) valid = false;
 		
 		name,count = ..string.replace(name,"@@|","");
 		if( count ) valid = false;
 		
 		return valid,name
 	} 
} 

joinpath = path.append;
_path = path; 

/**intellisense(fsys.path) 
cmp(.(路径,比较路径) = 比较两个路径是否指向同一位置,\n返回值意义与 string.cmp()函数相同,\n路径相同则返回0,注意在条件表达式中为false
compact(.(文件路径,显示像素宽度) = 截断路径来适合一定数目的像素
eofBackslash(.("文件路径") = 首先替换所有正斜杠为反斜杠\n检测路径尾部是否有反斜杠
append(.(根目录,不定个数子路径) = 拼接路径,注意根目录不可以圆点字符开始\n如果子路径是绝对路径则直接返回子路径\n拼接时可以使用空参数,但不可全部参数为空
commonPrefix(.(路径,路径2) = 返回两个文件路径的公共前缀目录\n该函数失败保证返回的是一个目录比以斜杠结尾,失败返回null,\n在比较以前自动对路径归一化处理,忽略大小写
canonicalize(.(路径,是否转换8->3格式短路径) = 转换为完整路径,\n并对路径进行归一化处理,参数2可选(默认为true),\n扩展和适当置换路径中包含的所有".."和"."\n该函数保证除分区根目录外保证尾部不为斜杠
addBackslash(__/*路径*/) = 首先替换所有正斜杠为反斜杠\n如果目录最后面没有反斜杠,则追加反斜杠,\n为避免双字节串码问题,添加尾部反斜杠必须调用此函数
removeBackslash(__/*路径*/) = 首先转换为完整路径,替换所有正斜杠为反斜杠\n移除路径最后面的反斜杠,并返回新路径以及尾字符\n如果尾字符为反斜杠并已移除,第二个返回值为空字符\n如果是分区号后的反斜杠或路径只有一个反斜杠,第二个返回值为反斜杠\n为避免双字节串码问题,移除尾部反斜杠必须调用此函数
relativeTo(.(参考路径,目标路径,参考路径属性,目标路径属性) = 自参数@1指定的路径得到一个相对路径指向目标路径\n注意相对路径不定是子目录,如果是上层目录使用 ../ 表示\n路径属性可为0,或 _FILE_ATTRIBUTE_DIRECTORY,可省略
relative(.(路径,目录,返回路径是否以斜杠开始) = 将路径转换为指定目录下层的相对路径,\n在比较以前自动对路径归一化处理,忽略大小写\n相同路径则返回空字符串,不是该目录下的路径则返回null\n参数三可选,默认首字符为斜杠
validName(__/*路径*/) = 检测文件名是否合法,\n包含非法字符返回false,以及修正后的合法名称\n传入非字符串参数直接返回空值
replaceDir(.(路径,根目录,新的根目录) = 将路径转换为参数2指定根目录下的相对路径\n再将其转换为新的根目录下的绝对路径
replaceFile(.(路径,新文件名) = 替换路径中的文件名部份
end intellisense**/

/**intellisense() 
fsys._path = fsys.path.
fsys.path = 提供文件路径相关函数,\n在导入fsys支持库时将自动导入fsys.path
end intellisense**/