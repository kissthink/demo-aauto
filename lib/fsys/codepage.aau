//codepage 文件编码
namespace  fsys.codepage

reverseEndian = function(s){
	var m = ..raw.malloc(#s)
	for(i=1;#s;2){
		m[i] =s[i+1];
		m[i+1] = s[i];
	}
	return ..raw.tostring(m,1,#s);
}

var encodeing = { 
	["UTF-8"] = 65001;
	["UNICODE"] = 1200;
	["UTF-16LE"] = 1200; 
	["UTF-16BE"] = 1201;
	["utf-8"] = 65001;
	["unicode"] = 1200;
	["unicodeFFFE"] = 1201;
}
 
import string.encoding;
load = function(p,cp,tp=0){
	
	if( type(cp) == type.string ){
		cp = ..string.upper(cp)
		cp = encodeing[cp] || ..string.encoding.getCodepage(cp);
		if(!cp){
			error('错误的编码参数@2',2)
		} 
	}
	if(!#p){
		error("文件路径不能为空",2)
	}
	
	var s; 
	var f,err = ..io.open(p,"rb");
	if(f){  
		var b = f.read(2) //BOM 
		if( !b ){
			f.seek("set"); 
		}
		elseif(  b[1] == 0xEF  && b[2] == 0xBB  ) {
			var b = f.read(1)
			if(b[1] == 0xBF ){
				cp = 65001;//"UTF-8"; 
			}
			else{
				f.seek("set");
			}
		} 
		elseif(  b[1] == 0xFF  && b[2] == 0xFE  ) {
			cp = 1200;  
		}
		elseif(  b[1] == 0xFE  && b[2] == 0xFF  ) {
			cp = 1201;  
		}
		else {
			f.seek("set"); 
		}
		s = f.read(-1);
		f.close()  
	}
	else{
		s = ..string.load(p)
		if(!s)
			return null,err;
			
		if(  s[1] == 0xEF  && s[2] == 0xBB && s[3] == 0xBF  ){
			cp = 65001;//"UTF-8";
			s = ..string.right(s,-4);
		}
		elseif( s[1] == 0xFF  && s[2] == 0xFE  ) {
			cp = 1200;  
			s = ..string.right(s,-3);
		}
		elseif( s[1] == 0xFE  && s[2] == 0xFF  ) {
			cp = 1201;  
			s = ..string.right(s,-3);
		} 
	} 
	
	if( cp == 1200 ) {
		s = ..string.fromUnicode(s);
	}
	elseif( cp == 1201 ) {
		s = ..string.fromUnicode( reverseEndian(s) ) ;
	} 
	elseif( cp && (tp!=cp) ){  
		s =  ..string.fromto(s,cp,tp); 
	};
	   
	return s,cp;  
}

save = function(p,s,cp,fp=0){ 
	var f;
	var b;
	if( type(cp) == type.string ){
		cp = ..string.upper(cp)
		cp = encodeing[cp] || ..string.encoding.getCodepage(cp);
		if(!cp){
			error('错误的编码,可选编码格式如下\n"UNICODE"\n"UTF-8"\n"UTF-16LE"\n"UTF-16BE"',2)
		} 
	}
	
	f,err = ..io.open(p,"w+b");
	if(!f){
		return null,err;
	}
	
	if( cp == 65001 ) {
		f.write('\xEF\xBB\xBF') 
		s = ..string.fromto(s,fp,cp);
	} 
	elseif( cp == 1200 ) {
		f.write('\xFF\xFE') 
		s = ..string.toUnicode(s);
	}
	elseif( cp == 1201 ) {
		f.write('\xFE\xFF') 
		s = reverseEndian( ..string.toUnicode(s) ) ;
	} 
	else {
		s = ..string.fromto(s,fp,cp);
	}
	 
	f.write( s );
	f.close();
};

/* IsTextUTF8 
 * 0000 0000-0000 007F - 0xxxxxxx  (ascii converts to 1 octet!)
 * 0000 0080-0000 07FF - 110xxxxx 10xxxxxx ( 2 octet format)
 * 0000 0800-0000 FFFF - 1110xxxx 10xxxxxx 10xxxxxx (3 octet format)
 */ 
isTextUtf8 = function( str ) { 
    var chr;
    var  bAllAscii= true;

    var cOctets = 0;// octets to go in this UTF-8 encoded character
    for( i=0; #str ) {
        chr= str[i];

        if( (chr&0x80) != 0 ) bAllAscii= false;

        if( cOctets == 0 )  { 
            // 7 bit ascii after 7 bit ascii is just fine.  Handle start of encoding case. 
            if( chr >= 0x80 ) {  
               // count of the leading 1 bits is the number of characters encoded 
               do {
                  chr <<= 1;
                  cOctets++;
               }
               while( (chr&0x80) != 0 );

               cOctets--;  // count includes this character
               if( cOctets == 0 ) return false;  // must start with 11xxxxxx
            }
        }
        else {
            // non-leading bytes must start as 10xxxxxx
            if( (chr&0xC0) != 0x80 ) {
                return false;
            }
            cOctets--;  // processed another octet in encoding
        }
    }
 
    // End of text.  Check for consistency.  
    if( cOctets > 0 ) { // anything left over at the end is an error
        return false;
    }

    if( bAllAscii ) { // Not utf-8 if all ascii.  Forces caller to use code pages for conversion
        return false;
    }

    return true;
} 

/**intellisense(fsys.codepage)*/
load(.("文件路径",源编码,目标编码) = 读取文件,参数2,3都是可选参数,\n可自动识别文件编码,并自动转换为目标编码,\n目标编码默认为0
load(__/*文件路径*/,"utf-8") = 读取UTF-8编码文件\n并自动转换为ANSI编码,\n返回文件内容,读取内码
load(__/*文件路径*/,"unicode") =  读取UNICODE(小尾序)编码文件\n并自动转换为ANSI编码,\n返回文件内容,读取内码
load(__/*文件路径*/,"unicodeFFFE") =  读取UNICODE(大尾序)编码文件\n并自动转换为ANSI编码,\n返回文件内容,读取内码
save(__/*文件路径*/,str,"utf-8") = 存为UTF-8编码文件,并添加BOM编码标识
save(__/*文件路径*/,str,"unicode") = 存为UNICODE(小尾序)编码文件,并添加BOM编码标识
save(__/*文件路径*/,str,"unicodeFFFE") = 存为UNICODE(小尾序)编码文件,并添加BOM编码标识
reverseEndian(__/*UNICODE字符串*/) = 大字节序(Big-Endian)与小字节(Little-Endian)的反向转换
isTextUtf8(.(字符串) = 基于统计方法检测字符串是否使用UTF8编码,\n结果与记事本检测方法类似非绝对精确
/*end intellisense**/ 