//log 日志文件
import web.json;
import util.table;
import process.mutex;

namespace fsys;

class log{
	ctor( path ){{
		var path = ..io.fullpath( (path:"/log.txt") );
		var dir = ..io.splitpath(path).dir;
		if(!..io.exist(dir)){
			::Shell32.SHCreateDirectory(0,..string.toUnicode(dir))
		}
		this.path = path;
		this.mutex = ..process.mutex("3CC9DBE7-ED29-4690-9A81-993CCBCC6568.fsys.log");
	}}; 
	close = function(){
		if( this.mutex ){
			this.mutex.close();
			this.mutex = null;
		}
	};
	print = function(...){
		var args = {...};
		
		if( this.mutex.waitOne() ){
			var file = ..io.open(this.path,"a+b");
			for(i=1;#args;1){
				file.write(args[i],'\t');
			}
			file.write('\r\n');
			file.close();
			
			this.mutex.release();
		}
	};
	printf = function(s,...){
		if( ...!== null ) s = ..string.format(s,... )
		this.print( s );
	}
	dump = function(...){ 
		var args = {...};
		
		if( this.mutex.waitOne() ){
			var file = ..io.open(this.path,"a+b");
			for(i=1;#args;1){ 
				if( type(args[i]) == type.table ) file.write( ..util.table.stringify(args[i],#args==1),'\t')
				else file.write( tostring(args[i]),'\t')
			}
			file.write('\r\n');
			file.close(); 
			
			this.mutex.release();
		}
	}  
	dumpJson = function(v){ 
		this.print( ..web.json.stringify(v,true,false) );
	}
}

namespace log{ 
	::Shell32 := ..raw.loadDll("Shell32");
}

/**intellisense()
fsys.log = 日志文件\n用于代替控制台在文件中输出变量或文本
fsys.log(.("日志文件路径") = 创建日志文件
fsys.log() = !stdfsyslog.
!stdfsyslog.close() = 关闭对象
!stdfsyslog.print(__) = 输出一行文本,支持多参数
!stdfsyslog.printf("%s__", ) = 输出格式化字符串，\n格式化语法与string.format相同
!stdfsyslog.dump(__/*变量*/) = 显示变量的值,支持多参数\n注意仅显示普通table,string,number等类型的值,不显示函数等
!stdfsyslog.dumpJson(__/*变量*/) = 将对像转换为格式化的JSON文本并输出到控制台
end intellisense**/
