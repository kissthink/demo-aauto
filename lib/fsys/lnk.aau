//lnk 快捷方式
import fsys; 
import fsys.version;
import util.metaProperty;
import com.interface.IShellLink;
import inet.url;

namespace fsys;
 
class lnk {
	ctor(){
		this._shellLink = ..com.interface.create("{00021401-0000-0000-C000-000000000046}",..com.interface.IShellLink );
		this._persistFile = this._shellLink.QueryInterface(..com.interface.IPersistFile)  
		this._defaultExt = ".lnk";
	};
	@_metaProperty
} 
lnk._metaProperty = ..util.metaProperty(

	load = function(path){
		if( !path ) error("请指定快捷方式文件路径",2);

		var hr = owner._persistFile.Load( ..string.toUnicode( path ) ,0);
		if( (hr)<0/*FAILED*/ )
			return false,..lasterr(hr);

		owner.filename = ..io.splitpath(path).file;
		owner.filepath = path;
		return true;
	};
	save = function(path){
		
		if( !#path ) {
			path = owner.filepath;
			if( !#path ) error("请指定存储路径",2);
		};
		
		if( ..fsys.isDir(path) ){
			var filename = owner.filename;
			if( !#filename ) error("未指定快捷方式存储文件名或目标路径",2);
			path = ..fsys.joinpath(path,filename);
		}
		
		var hr = owner._persistFile.Save(..string.toUnicode( ..io.fullpath(path) ) ,true);
		if( (hr)<0/*FAILED*/ ) return false,..lasterr(hr);
		
		owner.filepath = path;
		return true;
	};
 	getIcon = function(){
		var hr,location,index = owner._shellLink.GetIconLocation(1024,1024,0);
		if( (hr)<0/*FAILED*/ )
			return false,..lasterr(hr); 
		return location,index;
	};  
	setIcon = function(location,index){
		if( ..io.localpath(location) ) target = ..io.fullpath(location);
		var hr = owner._shellLink.SetIconLocation(location,index : 0);
		if( (hr)<0/*FAILED*/ )
			return false,..lasterr(hr); 
		return true;
	};
	resolve = function(hwnd,flags){
		var hr = owner._shellLink.Resolve(hwnd:0,flags : 0);
		if( (hr)<0/*FAILED*/ )
			return false,..lasterr(hr); 
		return true
	};
	description = {
		_get = function(){ 
			var hr,value =  owner._shellLink.GetDescription(256, 256);
			if( (hr)>=0/*SUCCEEDED*/)
				return value;
		}
		_set = function( value ){
			owner._shellLink.SetDescription(value);
		} 	
	};
	arguments = {
		_get = function(){ 
			var hr,value =  owner._shellLink.GetArguments(256, 256);
			if( (hr)>=0/*SUCCEEDED*/)
				return value;
		}
		_set = function( value ){
			owner._shellLink.SetArguments(value);
		} 	
	};
	path = {
		_get = function(){ 
			var hr,value =  owner._shellLink.GetPath(1024, 1024, {}, 0x2/*_SLGP_UNCPRIORITY*/);
			if( (hr)>=0/*SUCCEEDED*/) return #value ? value : owner[["(urlpath)"]];
			
		}
		_set = function( target ){
			owner[["(urlpath)"]] = null;
			if( #target ){
				if( ..io.exist(target) ){
					if( ..io.localpath(target) ) target = ..io.fullpath(target);
					
					if( !# owner.workDir ){
						owner._shellLink.SetWorkingDirectory( ..io.splitpath(target).dir );
					}
					
					if( !# owner.description ){
						var vesionInfo = ..fsys.version.getInfo( target );
						if( vesionInfo ){
							owner.description = vesionInfo.fileDescription;
						};
					}
				}
				elseif( ..inet.url.is(target,0x0/*_URLIS_URL*/) ){
					owner[["(urlpath)"]] = target;
				}
			}
			owner._shellLink.SetPath(target);
		} 	
	};
	
	filename = {
		_get = function(){
			var path = owner.path;
			if( !#path ) return;
			
			if( ..inet.url.is(path,0x0/*_URLIS_URL*/ ) ){
				var turl = ..inet.url.split(path);
				if( turl.path = "" || turl.path = "/" ) return ..string.concat( turl.host,owner._defaultExt);
				return ..string.concat( ..io.splitpath( ..string.trimright(turl.path,"/") ).name || turl.host,owner._defaultExt);
			}
			
			var vesionInfo = ..fsys.version.getInfo( path );
			if( (!vesionInfo) || (!..fsys.path.validName(vesionInfo.productName)) ) 
				return ..io.splitpath(path).name + owner._defaultExt;
				
			return vesionInfo.productName + owner._defaultExt; 
		}
		_set = function( value ){ 
			if( value ){
				if( !..string.endWith(value,owner._defaultExt,true) ) 
					value = value + owner._defaultExt;
			}
			owner[["filename"]] = value;
		}
	};
	
	workDir = {
		_get = function(){ 
			var hr,value =  owner._shellLink.GetWorkingDirectory(1024, 1024);
			if( (hr)>=0/*SUCCEEDED*/)
				return value;
		}
		_set = function( value ){
			owner._shellLink.SetWorkingDirectory(value);
		} 	
	};
 
	hotkey = {
		_get = function(){ 
			var hr,value =  owner._shellLink.GetHotkey(0);
			if( (hr)>=0/*SUCCEEDED*/)
				return value;
		}
		_set = function( value ){
			owner._shellLink.SetHotkey(value);
		} 	
	};
	
	showCmd = {
		_get = function(){ 
			var hr,value =  owner._shellLink.GetShowCmd(0);
			if( (hr)>=0/*SUCCEEDED*/)
				return value;
		}
		_set = function( value ){
			owner._shellLink.SetShowCmd(value);
		} 	
	};
	pinToDesktop = function( pin,allUsers ){
		var filename = owner.filename;
		if( !#filename ) error("未指定快捷方式存储文件名或目标路径",2); 
		
	 	var commonPath = ..fsys.getSpecial( 0x19 /*_CSIDL_COMMON_DESKTOPDIRECTORY*/, filename );
		var userPath = ..fsys.getSpecial( 0 /*_CSIDL_DESKTOP*/, filename ) 
		  
		if( pin ){
			if( allUsers ) {
				..fsys.delete( userPath );
				return owner.save( commonPath );
			}
			else{ 
				..fsys.delete( commonPath );
				return owner.save( userPath );
			}
		}
		else { 
			..fsys.delete( commonPath );
			..fsys.delete( userPath );
			
			return ..io.exist( commonPath );
		}
	};
	pinToPrograms = function( pin,sudir,allUsers ){
		var filename = owner.filename;
		if( !#filename ) error("未指定快捷方式存储文件名或目标路径",2); 

		var commonPath = ..fsys.getSpecial( 0x17 /*_CSIDL_COMMON_PROGRAMS*/,sudir ); 
		var userPath = ..fsys.getSpecial( 0x2 /*_CSIDL_PROGRAMS*/,sudir ); 
		var userDelPath = #sudir ? userPath : ..fsys.joinpath(userPath,filename) 
		var commonDelPath =  #sudir ? commonPath : ..fsys.joinpath(commonPath,filename) 
		
		if( pin ){
			if( allUsers ) {
				return owner.save( ..fsys.createDir( commonPath ) );
			}
			else{
				return owner.save( ..fsys.createDir( userPath ) );
			}
		}
		else {
			..fsys.delete( commonDelPath );
			..fsys.delete( userDelPath );
			return ..io.exist( commonDelPath );
		}
	};
	pinToTaskbar = function( pin ){
		import process;
		import win.version; 
		if(  !#owner.filename ) error("未指定快捷方式存储文件名或目标路径",2); 
    	
    	var lnkpath = ..fsys.joinpath( 
    		..fsys.getSpecial(0x1a /*_CSIDL_APPDATA*/) ,"\Microsoft\Internet Explorer\Quick Launch\" ,owner.filename 
    	)	
		if( ..win.version.isVistaLater ){
			
			if( ..win.version.isWin10Later ){
				var tpath = ..io.splitpath(owner.path);
				if(!tpath) return;
				var shell = ..com.CreateObject("Shell.Application");
				var target  = shell ? shell.NameSpace(tpath.dir).ParseName(tpath.file);   
				if(target)target.InvokeVerb(pin?"taskbarpin":"taskbarunpin") 
			}
			else{ 
				owner.save( lnkpath ); sleep(10); 
    			..process.execute( lnkpath,,pin?"TaskbarPin":"TaskbarUnPin"); 
    			..fsys.delete( lnkpath );
    		}
    	}
    	else {
    		if(  pin ) owner.save( lnkpath );
    		else  ..fsys.delete( lnkpath );	
    	} 
	};
	pinToStartMenu = function( pin ){
		import process;
		import win.version; 
		if( !#owner.filename ) error("未指定快捷方式存储文件名或目标路径",2); 
    	
		if( ! ..win.version.isVistaLater ) {
			return;
		}
		
		if( ..win.version.isWin10Later ){
		
			var tpath = ..io.splitpath(owner.path);
			if(!tpath) return;
			
			var shell = ..com.CreateObject("Shell.Application");
			var target  = shell ? shell.NameSpace(tpath.dir).ParseName(tpath.file);   
			if(!target)return; 
			
			var len,pinName = ::User32.LoadString( ::Shell32.gethandle(),pin ? 51201 : 51394 ,{BYTE str[256]},256/*缓冲区大小*/ );
			if(!len) return;
			
			var strPinName = ..string.str(pinName.str); 
			for index,verb in ..com.each(target.verbs() ) { 
				if( verb.name == strPinName ){ verb.DoIt(); break;  } 
			} 
		}
		else { 
		
			if( ..win.version.isWin8Later ){
				return;
			}
    		
    		var lnkpath = ..fsys.joinpath( 
    			..fsys.getSpecial(0x1a /*_CSIDL_APPDATA*/) ,"\Microsoft\Internet Explorer\Quick Launch\" ,owner.filename 
    		)	
    		
    		owner.save( lnkpath ); sleep(10);
    		..process.execute( lnkpath,,pin?"startpin":"startunpin");
    		..fsys.delete( lnkpath );	
    	}
	}  
)
 
namespace lnk {

	enum = function(proc,dirClsId,...){
		var lnk = ..fsys.lnk();
		var dir = type(dirClsId) == type.number ? ..fsys.getSpecial(dirClsId,...) : dirClsId;
		if(!dir) return;
    	..fsys.enum( dir , 
            "*.lnk", 
            function(dir,filename,fullpath){ 
                if(filename){   
                    if( lnk.load( fullpath ) ){ 
                    	if(lnk.path){
                    		return proc( dir,..string.lower(filename),fullpath, lnk.path)
                    	}
                    } 
                }    
            } 
        )
        lnk = null;	
	}
	  
	searchLnk =function(pattern,lable,dirClsId,...){
    	pattern = pattern ? ..string.lower(pattern)  
    	lable = lable ? ..string.lower(lable);
    	var retpath;
    	enum( 
            function(dir,filename,fullpath,target){ 
                var targetLow  =  ..string.lower(target);
                if( pattern && !..string.cmpMatch( ..io.splitpath(targetLow).file,pattern ) ) return ;
                if( lable && !..string.cmpMatch( filename,lable ) ) return;
                
                retpath = target;
                return false;   
            },dirClsId,...
        ); 
   		return retpath;
	}
 	
	search = function(filename,lable,dir){ 
		var dir = ..io.localpath("\");
		
		return ( filename ? ..fsys.searchFile(filename) )
			|| searchLnk( filename,lable, 0 /*_CSIDL_DESKTOP*/  )
			|| searchLnk( filename,lable, 2 /*_CSIDL_PROGRAMS*/ ) 
			|| searchLnk( filename,lable, 0x19 /*_CSIDL_COMMON_DESKTOPDIRECTORY*/  )
			|| searchLnk( filename,lable, 0x17 /*_CSIDL_COMMON_PROGRAMS*/ ) 
			|| searchLnk( filename,lable, 0x1a /*_CSIDL_APPDATA*/,"\Microsoft\Internet Explorer\Quick Launch\" )
	}
}

/**intellisense(fsys.lnk) 
searchLnk("文件名","快捷方式标题", 0 /*_CSIDL_DESKTOP*/ /) = 在桌面搜索快捷方式并返回路径\n参数@3可省略
searchLnk("文件名","快捷方式标题", 2 /*_CSIDL_PROGRAMS*/) = 在程序目录搜索快捷方式并返回路径
search(.("文件名","快捷方式标题") = 全部参数可选,至少输入一个参数\n按下列顺序搜索文件: 桌面快捷方式、应用程序快捷方式\n查找支持模式匹配语法,忽略大小写\n快捷方式标题支持普通文本比较
enum = @.enum( \n	0 /*_CSIDL_DESKTOP*/ , \n    function(dir,filename,fullpath,target){ \n        /*return false 停止遍历*/  \n    } \n); 
end intellisense**/

/**intellisense()
!lnkfile.resolve(.(hwndParent,flags) = 如果目标路径移动或丢失,\n查找符合的目标,可能显示查找对话框
!lnkfile.filepath = 快捷方式加载或保存成功的文件路径
!lnkfile.filename = 快捷方式默认文件名,可省略后缀名,\n未指定则取版本信息中的产品名或目标文件名
!lnkfile.description = 附加说明
!lnkfile.arguments = 参数
!lnkfile.path = 目标路径,设置该属性时:\n如果workDir为空则设workDir为目标路径所在目录\n如果description为空则设为版本信息中的文件描述
!lnkfile.workDir = 工作目录
!lnkfile.hotkey = 热键
!lnkfile.showCmd = 显示参数
!lnkfile.getIcon() = 返回图标文件路径,以及路标索引
!lnkfile.setIcon(.(文件路径,图标索引) = 设置图标\n索引可省咯,默认为0
!lnkfile.load(__/*lnk文件路径*/) = 载入快捷方式
!lnkfile.save(__/*lnk文件存储路径*/) = 保存快捷方式\n如果指定了filename或path属性,参数也可以指定存储目录
!lnkfile.pinToStartMenu(true) = 快捷方式钉到开始菜单\n不支持的操作系统忽略不执行\n此函数无返回值
!lnkfile.pinToTaskbar(true) = 锁定到任务栏\n此函数无返回值
!lnkfile.pinToTaskbar(false) = 解除任务栏锁定\n此函数无返回值
!lnkfile.pinToPrograms(.(true,"子目录路径") = 添加到开始菜单程序组\n可选指定子目录路径,参数@3如果为true则添加到所有用户程序组
!lnkfile.pinToPrograms(.(false,"子目录路径") = 自开始菜单程序组移除\n可选指定多个子目录参数\n如果指定了子目录则直接移除快捷方式所在父目录
!lnkfile.pinToDesktop(true) = 添加快捷方式到桌面\n,参数@2如果为true则添加到所有用户程序组
!lnkfile.pinToDesktop(false) = 自桌面移除快捷方式
?fsys.lnk = !lnkfile.
fsys.lnk() = 创建快捷方式\n!lnkfile.
end intellisense**/