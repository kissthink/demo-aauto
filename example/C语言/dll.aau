//生成DLL 

code = /** 
	#include <windows.h>
	
	/*
	入口函数,该函数可以有也可以没有。
	
	入口函数会自动加锁以保证线性调用,要避免在DllMain内调用下列函数:
	1、调用LoadLibrary或其他可能加载DLL的API函数( CreateProcess等 )
	2、可能再次触发DllMain的函数,例如 CreateThread,ExitThread
	3、GetModuleFileName, GetModuleHandle 等其他可能触发系统锁的API函数
	总之在DllMain最好不要调用API函数.
	*/
	int __stdcall DllMain(void * hinstDLL, unsigned long fdwReason, void * lpvReserved) {
	
		if (fdwReason == 1/*DLL_PROCESS_ATTACH*/ ){ 
			
		}
		return 1;
	}
	
	//__declspec(dllexport) 声明导出函数 
	__declspec(dllexport) int Msgbox( HWND hwnd ) 
	{     
		//定义一个结构体
		struct { const char * message;int id; } argument = { 
			.message = "测试消息来自C语言", 
			.id = GetCurrentThreadId()
		};
	 
	 	/*
		_WM_THREAD_CALLBACK 使所有回调安全的转发到UI线程。
		_WM_THREAD_CALLBACK 可以跨线程跨语言并且不需要创建回调线程，适用任何普通winform对象。
		
		与其他回调方案的比较：
    	raw.tocdecl raw.tostdcall 不能跨线程使用, 
    	thread.tocdecl,thread.tostdcall 需要创建回调线程。
    	thread.command 则只能在aardio代码中使用,需要将窗体转换为thread.command对象。
    	*/
		SendMessage(
			hwnd,0xACCE/*_WM_THREAD_CALLBACK*/, 
			"onMessageChange( { string message;int id } )", //要调用的窗体函数名( 结构体原型声明 ); 结构体原型声明应使用aardio语法
			&argument //将前面定义的结构体作为调用参数
		);
		return 0;
	}  
**/
 
import tcc; 
vm = tcc( );//创建TCC编译器 

/*
加载需要用到的动态库,或静态库
在"~\lib\tcc\.res\lib" 目录下查找 "动态库名.def" "静态库名.a"
也可以使用 vm.addLibPath() 函数添加搜索库的目录
*/
vm.addLib( 
	"user32",
	"kernel32",
	"gdi32"
) 
vm.output( "/bin.dll", code ) //编译C源码，生成DLL
vm.close(); //收工

//创建一个窗体以处理_WM_THREAD_CALLBACK线程回调命令。
import win.ui;
var winform = ..win.form(｛｝)
winform.messageOnly(); //窗体仅用于处理消息
winform.onMessageChange = function(param){ 
	winform.msgbox("调用:" + param.message )  
	win.quitMessage()
} 

//加载生成的DLL
var dll = raw.loadDll( "/bin.dll" );

//导入API,记住第二个参数需要指定cdecl调用约定(也就是C语言调用约定)
Msgbox = dll.api( "Msgbox","int(addr str)", "cdecl" ); 
Msgbox( winform.hwnd ); 

win.loopMessage()