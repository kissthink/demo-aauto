//layeredWindow 分层透明窗口
if( _STUDIO_INVOKED && _STUDIO_INVOKED != "process" ){ 
	error("web.kit不能在IDE嵌入线程模式下启动!",2)
}

import web.kit;
import web.kit.layeredRender;
namespace web.kit;

class layeredWindow{
	ctor( winform ){
		if( ! (winform[["hwnd"]] &&  winform.isForm) ) error("参数@1必须是win.form创建的窗体对象",2);
		
		if( winform.className == "static" ){
			winform.modifyStyle(,0x100/*_SS_NOTIFY*/ | 0x2000000/*_WS_CLIPCHILDREN*/); 
		} 
		else{
			if( winform.isForm &&  (! ..table.next( winform._ctrlHwnd) ) 
				&& ( ! ..win.getStyle(winform.hwnd,0x40000000/*_WS_CHILD*/) ) ){
				::CreateWindowEx(0x20/*_WS_EX_TRANSPARENT*/,"static",""
					,0x44000000/*_WS_CHILD | _WS_CLIPSIBLINGS*/ ,-2,-2,1,1,winform.hwnd,winform._getFreeCommandId(), _HINSTANSE ); 
			}
			winform.modifyStyle(,0x2000000/*_WS_CLIPCHILDREN*/)
		};
		
		if( winform.isDialogMessage ){
			if( winform.isDialogMessage!= ..win.isDialogMessage ){
				error("在创建webkit窗体以前,禁止重写默认 isDialogMessage() 函数 ",2)
			}
			else{
				winform.isDialogMessage = function(hwnd,msg) {
					return false; 
				}
			}
		};
		
		this = ..web.kit.view();
		this.transparent = true;
		var gdiRender = ..web.kit.layeredRender(this,winform.hwnd);
		this._form = winform;
		winform.transparent(true)
		
		var rect = winform.getClientRect();
		this.resize(rect.width(),rect.height());

		var isIconic = ..win.isIconic;
		winform.wndproc = function(hwnd,message,wParam,lParam){
			if( message == 0x2/*_WM_DESTROY*/){
				this.destroy();
				gdiRender.delete();
				return;
			}
			if( this.hWebView ){
				var handled,retCode = WebViewWndProc(this.hWebView,hwnd,message,wParam,lParam,0);
				if( this.isDirty() && ( !isIconic(hwnd) ) ){
					gdiRender.draw(winform.hwnd);
				} 
				if(handled) return retCode;
			}
		}
		
		winform.addtimer( 
			5,function(hwnd,msg,id,tick){
				if( this.isDirty() && ( !isIconic(hwnd) ) ){
					gdiRender.draw(winform.hwnd);
				}
			} 
		)
	};
	getForm = function(top){
		if( top === null ) top = true;
		return  ..win.form.getForm( this._form.hwnd );
		if( !top && ..win.isChild(form.hwnd,hwnd) ){
			return form.getCtrl( hwnd );
		}
		return form;
	}; 
} 

namespace layeredWindow{
	var wkex = ..raw.loadDll("~\lib\web\kit\.dll\wkex.dll",,"cdecl")
	WebViewWndProc = wkex.api("WebViewWndProc","bool(addr hView,addr hwnd,INT message,ADDR wParam,addr lParam,int &retCode)" ); 
}

/**intellisense()
web.kit.layeredWindow = webkit分层窗体
web.kit.layeredWindow(.(winform) = 参数为窗口对象
web.kit.layeredWindow() = !web_kit_view.
end intellisense**/

